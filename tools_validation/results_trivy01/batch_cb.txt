
Report Summary

┌───────────────────────────────────────────┬────────────┬───────────────────┐
│                  Target                   │    Type    │ Misconfigurations │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap448.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap713.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap747.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap753.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap895.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap971.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap972.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap973.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap974.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap975.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap976.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap977.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap978.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap979.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap980.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap982.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap983.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMapDep2.yaml                        │ kubernetes │        31         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_11.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_12.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_13.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_14.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_15.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_15_1.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_16.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_2.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_21.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_22.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_23.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_24.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_25.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_26.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_3.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_31.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_32.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_4.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_5.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMap_7.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ConfigMaps40.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ Config_2048.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ Config_2048_1.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ Config_2048_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ Config_2048_3.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ Configmap3100.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conf_mysql.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conf_mysql1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap31.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap3101.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap31_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap31_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap333.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap380.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap429.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap442.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap460.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap462.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap49.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap55.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap594.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap687.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap693.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap698.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap758.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap764.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap884.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap885.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap897.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap9.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap908.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap936.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap987.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap9_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap9_2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMapExample.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMapKeyRef.yaml                      │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMapKeyRef1.yaml                     │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMapPod11.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMapRef.yaml                         │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMapRef1.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMap_test1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMaps17.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMaps17_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMaps17_2.yaml                       │ kubernetes │        13         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMaps22.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMaps22_1.yaml                       │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configMaps34.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configVolume1.yaml                        │ kubernetes │        15         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_allow_secret_types.yaml            │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_deny_secret_types.yaml             │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_example.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_manager_deployment.yaml            │ kubernetes │         8         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_manager_deployment1.yaml           │ kubernetes │         8         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_manager_service.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_manager_service1.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map10.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map11.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map13.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map15.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map3.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map4.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map5.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map6.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map7.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map8.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map9.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map_aws.yaml                       │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map_aws1.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map_aws2.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map_aws3.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map_nginx.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map_nginx1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map_nginx2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map_nginx3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map_pod.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map_pod1.yaml                      │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_map_pod_manifest.yaml              │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_patch.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_patch1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_patch2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_patch3.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_secret.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ config_ssc.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap293.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap294.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap295.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap296.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap297.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap298.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap298_1.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap299.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap30.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap300.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap301.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap302.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap303.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap304.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap305.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap306.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap307.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap308.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap309.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap310.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap311.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap312.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap313.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap314.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap315.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap318.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap318_1.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap318_2.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap318_3.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap319.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap320.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap325.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap326.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap328.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap329.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap330.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap331.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap332.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap334.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap335.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap336.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap338.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap338_1.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap338_2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap338_3.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap338_4.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap339.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap340.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap356.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap357.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap358.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap359.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap360.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap361.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap373.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap374.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap375.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap376.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap38.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap381.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap382.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap383.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap384.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap385.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap386.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap38_1.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap38_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap39.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap398.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap399.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap40.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap400.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap401.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap402.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap404.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap405.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap406.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap407.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap408.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap409.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap41.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap410.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap411.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap412.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap413.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap417.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap418.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap42.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap421.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap423.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap424.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap425.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap426.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap428.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap43.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap431.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap44.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap440.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap441.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap443.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap445.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap449.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap451.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap452.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap453.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap454.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap455.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap456.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap457.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap459.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap46.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap461.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap463.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap464.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap465.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap466.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap467.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap468.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap469.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap47.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap470.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap471.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap472.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap473.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap474.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap475.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap48.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap50.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap507.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap51.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap510.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap511.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap512.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap52.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap529.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap53.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap530.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap531.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap533.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap534.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap535.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap536.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap537.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap538.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap539.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap54.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap540.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap541.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap542.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap544.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap545.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap546.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap547.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap550.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap552.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap56.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap57.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap575.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap576.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap577.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap578.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap579.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap580.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap581.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap588.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap59.yaml                          │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap590.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap593.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap595.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap596.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap597.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap598.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap6.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap600.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap601.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap602.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap605.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap606.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap607.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap611.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap613.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap613_1.yaml                       │ kubernetes │        17         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap615.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap616.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap62.yaml                          │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap622.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap623.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap624.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap625.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap626.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap627.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap628.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap63.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap632.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap633.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap634.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap635.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap636.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap637.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap638.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap639.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap64.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap640.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap641.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap642.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap643.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap644.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap645.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap646.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap65.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap653.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap66.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap662.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap664.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap665.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap666.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap667.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap669.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap67.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap670.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap678.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap680.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap682.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap683.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap684.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap685.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap686.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap688.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap689.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap69.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap690.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap691.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap692.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap692_1.yaml                       │ kubernetes │        16         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap694.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap697.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap703.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap704.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap712.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap717.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap717_1.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap718.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap719.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap720.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap721.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap722.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap723.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap724.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap725.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap727.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap728.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap729.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap732.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap733.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap740.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap745.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap748.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap754.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap755.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap756.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap757.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap759.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap760.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap761.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap762.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap763.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap765.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap766.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap767.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap769.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap770.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap771.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap775.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap779.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap781.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap782.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap784.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap786.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap791.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap799.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap8.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap82.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap825.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap826.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap83.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap834.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap835.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap836.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap837.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap838.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap839.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap84.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap847.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap85.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap86.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap87.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap877.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap880.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap886.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap887.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap896.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap899.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap902.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap904.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap907.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap909.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap910.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap911.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap912.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap913.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap915.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap916.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap917.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap918.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap919.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap920.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap921.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap923.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap924.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap925.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap926.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap927.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap928.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap929.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap932.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap933.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap937.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap938.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap938_1.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap938_2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap939.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap940.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap941.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap943.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap944.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap945.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap947.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap948.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap949.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap949_1.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap949_2.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap950.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap951.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap952.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap953.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap954.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap960.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap961.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap962.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap963.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap968.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap969.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap970.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap981.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap984.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap985.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap986.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap986_1.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap988.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap989.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmapPOD.yaml                         │ kubernetes │        14         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmapPOD2.yaml                        │ kubernetes │        14         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmapPod1.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_aws_config.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_db.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_endpoint_routing.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod.yaml                    │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod1.yaml                   │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod1_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod1_2.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod1_3.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod1_4.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod2.yaml                   │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod2_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod2_2.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod2_3.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod2_4.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod3.yaml                   │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod3_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod3_2.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod3_3.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod3_4.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod_2.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod_3.yaml                  │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_env_pod_4.yaml                  │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_family.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_gateway.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_hashgen.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_hashgen1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_hashgen2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_index_basico.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_ingress-nginx-controller.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_ingress-nginx-controller1.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_manifest.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_mysql.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_nginx.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_s3.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_sample.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_sample_1.yaml                   │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_shell_script.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_tcp-services.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_tcp-services1.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_udp-services.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_udp-services1.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_volume_pod.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_volume_pod1.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_volume_pod1_1.yaml              │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_volume_pod1_2.yaml              │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_volume_pod2.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_volume_pod2_1.yaml              │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_volume_pod2_2.yaml              │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_volume_pod3.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_volume_pod3_1.yaml              │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_volume_pod3_2.yaml              │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_volume_pod_1.yaml               │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmap_volume_pod_2.yaml               │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmapdemo.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmapdemo1.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmapdemo_1.yaml                      │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmapenvdocker.yaml                   │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmapforvolumev7.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps-1.yaml                         │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps-2.yaml                         │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps-3.yaml                         │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps-datasources1.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps-datasources5.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps-pod.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps-pod1.yaml                      │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps-pod2.yaml                      │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps10.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps10_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps11.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps12.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps13.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps14.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps15.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps16.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps16_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps18.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps21.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps21_1.yaml                       │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps24.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps25.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps26.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps27.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps27_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps2_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps3.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps30.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps31.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps32.yaml                         │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps33.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps36.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps38.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps38_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps38_2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps39.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps4.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps43.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps44.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps5.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps6.yaml                          │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps7.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps8.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps8_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps8_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmaps_2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configmapwebserver.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs2_1.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs2_2.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs2_3.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs2_4.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs2_5.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs2_6.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs5.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs_1.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs_2.yaml                            │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs_3.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs_4.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs_5.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configs_6.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configserver.yaml                         │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configserver_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configurable-http.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configuration-configmap-filelike.yaml     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configuration-configmap-propertylike.yaml │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configuration-secret.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configuration20.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configuration21.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configuration23.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configuration24.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configuration25.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configuration25_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configuration25_2.yaml                    │ kubernetes │        13         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configuration28.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configure-pod.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ configvolume.yaml                         │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ confined.yaml                             │ kubernetes │        15         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e10.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e10_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e10_2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e10_3.yaml                  │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e10_4.yaml                  │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e11.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e11_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e11_2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e11_3.yaml                  │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e11_4.yaml                  │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e13.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e13_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e13_2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e13_3.yaml                  │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e13_4.yaml                  │ kubernetes │        17         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e14.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e14_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e14_2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e14_3.yaml                  │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e14_4.yaml                  │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e15.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e15_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e15_2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e15_3.yaml                  │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e15_4.yaml                  │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e17.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e17_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e17_2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e17_3.yaml                  │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e17_4.yaml                  │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e18.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e18_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e18_2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e18_3.yaml                  │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e18_4.yaml                  │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e19.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e19_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e19_2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e19_3.yaml                  │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e19_4.yaml                  │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e1_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e1_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e1_3.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e1_4.yaml                   │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e2_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e2_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e2_3.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e2_4.yaml                   │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e3.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e3_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e3_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e3_3.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e3_4.yaml                   │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e4.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e4_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e4_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e4_3.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e4_4.yaml                   │ kubernetes │        17         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e5.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e5_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e5_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e5_3.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e5_4.yaml                   │ kubernetes │        17         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e6.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e6_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e6_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e6_3.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e6_4.yaml                   │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e7.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e7_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e7_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e7_3.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e7_4.yaml                   │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e8.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e8_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e8_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e8_3.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e8_4.yaml                   │ kubernetes │        17         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e9.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e9_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e9_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e9_3.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e9_4.yaml                   │ kubernetes │        17         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e_2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e_3.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conformance-e2e_4.yaml                    │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ congifM.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conigmap.yaml                             │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conjur_editor_role.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ conjur_viewer_role.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect-deployment.yaml                   │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect-server-service.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect-server-service1.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect-server-service2.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect-server-service3.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect-services.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect-services_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect-svc.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect1_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect2_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect3_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect4.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect5.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect6.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connect7.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connection-checker.yaml                   │ kubernetes │        11         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connection.yaml                           │ kubernetes │         2         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connection_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport.yaml          │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_1.yaml        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_10.yaml       │ kubernetes │        34         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_11.yaml       │ kubernetes │        34         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_12.yaml       │ kubernetes │        34         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_13.yaml       │ kubernetes │        34         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_14.yaml       │ kubernetes │        34         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_15.yaml       │ kubernetes │        34         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_16.yaml       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_17.yaml       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_18.yaml       │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_19.yaml       │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_2.yaml        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_20.yaml       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_21.yaml       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_22.yaml       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_23.yaml       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_24.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_25.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_26.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_27.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_28.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_29.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_3.yaml        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_30.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_31.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_32.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_33.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_34.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_35.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_36.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_37.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_38.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_4.yaml        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_5.yaml        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_6.yaml        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_7.yaml        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_8.yaml        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-hostport_9.yaml        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal.yaml          │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_1.yaml        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_10.yaml       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_11.yaml       │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_12.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_13.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_14.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_15.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_16.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_17.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_2.yaml        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_3.yaml        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_4.yaml        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_5.yaml        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_6.yaml        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_7.yaml        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ connectivity-check-internal_8.yaml        │ kubernetes │        19         │
└───────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


ConfigMap753.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'defender-updater-script-configmap' in 'twistlock' namespace stores secrets in key(s) or value(s) '{"TOKEN=$(curl --location \"$API_URL/$AUTH_ENDPOINT\" --header 'content-type"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



ConfigMap895.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'myapp' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'myapp' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



ConfigMapDep2.yaml (kubernetes)
===============================
Tests: 124 (SUCCESSES: 93, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 17, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-myservice' of Deployment 'myapp-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'network-multitool' of Deployment 'myapp-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ConfigMapDep2.yaml:18-40
────────────────────────────────────────
  18 ┌         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 │           ports:
  26 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-myservice' of Deployment 'myapp-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'network-multitool' of Deployment 'myapp-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ConfigMapDep2.yaml:18-40
────────────────────────────────────────
  18 ┌         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 │           ports:
  26 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-myservice' of 'deployment' 'myapp-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'network-multitool' of 'deployment' 'myapp-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ConfigMapDep2.yaml:18-40
────────────────────────────────────────
  18 ┌         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 │           ports:
  26 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-myservice' of Deployment 'myapp-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-myservice' of Deployment 'myapp-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'network-multitool' of Deployment 'myapp-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ConfigMapDep2.yaml:18-40
────────────────────────────────────────
  18 ┌         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 │           ports:
  26 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'network-multitool' of Deployment 'myapp-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ConfigMapDep2.yaml:18-40
────────────────────────────────────────
  18 ┌         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 │           ports:
  26 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-myservice' of Deployment 'myapp-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'network-multitool' of Deployment 'myapp-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ConfigMapDep2.yaml:18-40
────────────────────────────────────────
  18 ┌         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 │           ports:
  26 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-myservice' of Deployment 'myapp-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-myservice' of Deployment 'myapp-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-myservice' of Deployment 'myapp-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-myservice' of Deployment 'myapp-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'network-multitool' of Deployment 'myapp-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ConfigMapDep2.yaml:18-40
────────────────────────────────────────
  18 ┌         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 │           ports:
  26 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-myservice' of Deployment 'myapp-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'network-multitool' of Deployment 'myapp-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ConfigMapDep2.yaml:18-40
────────────────────────────────────────
  18 ┌         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 │           ports:
  26 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ConfigMapDep2.yaml:18-40
────────────────────────────────────────
  18 ┌         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 │           ports:
  26 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-myservice" of deployment "myapp-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "network-multitool" of deployment "myapp-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ConfigMapDep2.yaml:18-40
────────────────────────────────────────
  18 ┌         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 │           ports:
  26 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ConfigMapDep2.yaml:18-40
────────────────────────────────────────
  18 ┌         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 │           ports:
  26 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myapp-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ConfigMapDep2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myapp-pod
   5 │   labels:
   6 └     app: myapp
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment myapp-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ConfigMapDep2.yaml:46-48
────────────────────────────────────────
  46 ┌       - name: init-myservice
  47 │         image: busybox:1.28
  48 └         command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ConfigMapDep2.yaml:18-40
────────────────────────────────────────
  18 ┌         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 │           ports:
  26 └             - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myapp-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ConfigMapDep2.yaml:17-48
────────────────────────────────────────
  17 ┌       containers:
  18 │         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container network-multitool in deployment myapp-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ConfigMapDep2.yaml:18-40
────────────────────────────────────────
  18 ┌         - image: wbitt/network-multitool
  19 │           imagePullPolicy: IfNotPresent
  20 │           env:
  21 │             - name: HTTP_PORT
  22 │               value: "80"
  23 │             - name: HTTPS_PORT
  24 │               value: "443"
  25 │           ports:
  26 └             - containerPort: 80
  ..   
────────────────────────────────────────



ConfigMap_13.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'application-configs' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"app.value"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



ConfigMap_15_1.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"log_level"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



ConfigMap_2.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-config' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_Password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



ConfigMap_23.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'application-log-configs' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"log_level", "log_type"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



Config_2048_1.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app-2048' of Deployment 'deployment-2048' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app-2048' of Deployment 'deployment-2048' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app-2048' of 'deployment' 'deployment-2048' in 'game-2048' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app-2048' of Deployment 'deployment-2048' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app-2048' of Deployment 'deployment-2048' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app-2048' of Deployment 'deployment-2048' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app-2048' of Deployment 'deployment-2048' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app-2048' of Deployment 'deployment-2048' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app-2048' of Deployment 'deployment-2048' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app-2048' of Deployment 'deployment-2048' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app-2048' of Deployment 'deployment-2048' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app-2048' of Deployment 'deployment-2048' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app-2048" of deployment "deployment-2048" in "game-2048" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment deployment-2048 in game-2048 namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container deployment-2048 in game-2048 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment deployment-2048 in game-2048 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Config_2048_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app-2048 in deployment deployment-2048 (namespace: game-2048) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Config_2048_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
  18 │         imagePullPolicy: Always
  19 │         name: app-2048
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



Configmap3100.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo-container' of 'pod' 'configmap-demo-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo-container' of Pod 'configmap-demo-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo-container' of Pod 'configmap-demo-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo-container" of pod "configmap-demo-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Configmap3100.yaml:5
────────────────────────────────────────
   5 [   name: configmap-demo-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Configmap3100.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Configmap3100.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: demo-container
   9 │     image: nginx
  10 │     volumeMounts:
  11 │       - name: config
  12 │         mountPath: /etc/config
  13 │   volumes:
  14 │   - name: config
  15 │     configMap:
  16 └       name: configmap-3
────────────────────────────────────────



configMap3101.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'c1' of Pod 'config-map03' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'c1' of Pod 'config-map03' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'c1' of 'pod' 'config-map03' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'c1' of Pod 'config-map03' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'c1' of Pod 'config-map03' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'c1' of Pod 'config-map03' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'c1' of Pod 'config-map03' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'c1' of Pod 'config-map03' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'c1' of Pod 'config-map03' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'c1' of Pod 'config-map03' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'c1' of Pod 'config-map03' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'c1' of Pod 'config-map03' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "c1" of pod "config-map03" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod config-map03 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configMap3101.yaml:6
────────────────────────────────────────
   6 [   name: config-map03
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-map03 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod config-map03 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMap3101.yaml:8-21
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 └         - name: P_app
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container c1 in pod config-map03 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configMap3101.yaml:9-21
────────────────────────────────────────
   9 ┌     - name: c1
  10 │       image: chaitu1812/check-params
  11 │       env:
  12 │         - name: PARAMS
  13 │           value: "P_name P_app P_region P_api"
  14 │         - name: P_name
  15 │           value: "roboshop"
  16 │         - name: P_app
  17 └           value: "nginx-top"
  ..   
────────────────────────────────────────



configMap429.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'kibana-config' in 'production' namespace stores sensitive contents in key(s) or value(s) '{"kibana.yml", "xpack.encryptedSavedObjects.encryptionKey", "xpack.security.encryptionKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configMap693.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ocm-placement' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"matchKey", "statusListKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configMap693.yaml:2
────────────────────────────────────────
   2 [ ---
────────────────────────────────────────



configMap698.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"SERVER_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configMap884.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ascentfronend-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"VITE_JWT_EMAIL_VALIDATION_KEY", "VITE_ZEGOCLOUD_APPID"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'ascentfronend-config' in 'default' namespace stores secrets in key(s) or value(s) '{"VITE_GOOLE_SECRET", "VITE_JWT_SECRET", "VITE_ZEGOCLOUD_SERVER_SECRET"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configMapKeyRef.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'env-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'env-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'env-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'env-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'env-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "env-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod env-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configMapKeyRef.yaml:4
────────────────────────────────────────
   4 [   name: env-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container env-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMapKeyRef.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod env-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMapKeyRef.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────



configMapKeyRef1.yaml (kubernetes)
==================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'env-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'env-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'env-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'env-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'env-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'env-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'env-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "env-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod env-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configMapKeyRef1.yaml:4
────────────────────────────────────────
   4 [   name: env-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container env-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMapKeyRef1.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod env-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMapKeyRef1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     name: busybox
   9 │     command: ['sh', '-c', 'echo configmap is: $CONFIGMAPVAR && sleep 3600']
  10 │     env:
  11 │       - name: CONFIGMAPVAR
  12 │         valueFrom:
  13 │           configMapKeyRef:
  14 │             name: my-config
  15 └             key: name
────────────────────────────────────────



configMapPod11.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'configamp-pod1' of Pod 'configamp-pod1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'configamp-pod1' of Pod 'configamp-pod1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'configamp-pod1' of 'pod' 'configamp-pod1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'configamp-pod1' of Pod 'configamp-pod1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'configamp-pod1' of Pod 'configamp-pod1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'configamp-pod1' of Pod 'configamp-pod1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'configamp-pod1' of Pod 'configamp-pod1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'configamp-pod1' of Pod 'configamp-pod1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'configamp-pod1' of Pod 'configamp-pod1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'configamp-pod1' of Pod 'configamp-pod1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'configamp-pod1' of Pod 'configamp-pod1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'configamp-pod1' of Pod 'configamp-pod1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "configamp-pod1" of pod "configamp-pod1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configamp-pod1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configMapPod11.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     run: configamp-pod1
   7 └   name: configamp-pod1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configamp-pod1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMapPod11.yaml:17-23
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     name: configamp-pod1
  19 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  20 │     volumeMounts:
  21 │     - mountPath: /etc/config
  22 │       name: configvol
  23 └     resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configamp-pod1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMapPod11.yaml:9-25
────────────────────────────────────────
   9 ┌   volumes:
  10 │   - name: configvol
  11 │     configMap:
  12 │       name: log-config
  13 │       items:
  14 │       - key: log_level
  15 │         path: log_level
  16 │   containers:
  17 └   - image: busybox
  ..   
────────────────────────────────────────



configMapRef.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo' of 'pod' 'configmap-demo-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo' of Pod 'configmap-demo-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo" of pod "configmap-demo-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configMapRef.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMapRef.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMapRef.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────



configMapRef1.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo' of 'pod' 'configmap-demo-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo' of Pod 'configmap-demo-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo" of pod "configmap-demo-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configMapRef1.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMapRef1.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMapRef1.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       envFrom: # when using envFrom , complete config map will be passed into cntainer. i.e., all the keys in the cm will be populated.
  11 │         - configMapRef:
  12 └             name: my-config 
────────────────────────────────────────



configMaps17.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LOGGING_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configMaps17_2.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 100, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configMaps17_2.yaml:39-89
────────────────────────────────────────
  39 ┌       - name: app
  40 │         image: app:1.0.0
  41 │         volumeMounts:
  42 │         - mountPath: /etc/app/app-config
  43 │           name: app-config
  44 │         - name: app-config-item
  45 │           mountPath: /etc/app/app-config-item
  46 │         - name: app-config
  47 └           mountPath: /etc/app/perf.conf
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configMaps17_2.yaml:39-89
────────────────────────────────────────
  39 ┌       - name: app
  40 │         image: app:1.0.0
  41 │         volumeMounts:
  42 │         - mountPath: /etc/app/app-config
  43 │           name: app-config
  44 │         - name: app-config-item
  45 │           mountPath: /etc/app/app-config-item
  46 │         - name: app-config
  47 └           mountPath: /etc/app/perf.conf
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configMaps17_2.yaml:39-89
────────────────────────────────────────
  39 ┌       - name: app
  40 │         image: app:1.0.0
  41 │         volumeMounts:
  42 │         - mountPath: /etc/app/app-config
  43 │           name: app-config
  44 │         - name: app-config-item
  45 │           mountPath: /etc/app/app-config-item
  46 │         - name: app-config
  47 └           mountPath: /etc/app/perf.conf
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configMaps17_2.yaml:39-89
────────────────────────────────────────
  39 ┌       - name: app
  40 │         image: app:1.0.0
  41 │         volumeMounts:
  42 │         - mountPath: /etc/app/app-config
  43 │           name: app-config
  44 │         - name: app-config-item
  45 │           mountPath: /etc/app/app-config-item
  46 │         - name: app-config
  47 └           mountPath: /etc/app/perf.conf
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configMaps17_2.yaml:39-89
────────────────────────────────────────
  39 ┌       - name: app
  40 │         image: app:1.0.0
  41 │         volumeMounts:
  42 │         - mountPath: /etc/app/app-config
  43 │           name: app-config
  44 │         - name: app-config-item
  45 │           mountPath: /etc/app/app-config-item
  46 │         - name: app-config
  47 └           mountPath: /etc/app/perf.conf
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configMaps17_2.yaml:39-89
────────────────────────────────────────
  39 ┌       - name: app
  40 │         image: app:1.0.0
  41 │         volumeMounts:
  42 │         - mountPath: /etc/app/app-config
  43 │           name: app-config
  44 │         - name: app-config-item
  45 │           mountPath: /etc/app/app-config-item
  46 │         - name: app-config
  47 └           mountPath: /etc/app/perf.conf
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configMaps17_2.yaml:39-89
────────────────────────────────────────
  39 ┌       - name: app
  40 │         image: app:1.0.0
  41 │         volumeMounts:
  42 │         - mountPath: /etc/app/app-config
  43 │           name: app-config
  44 │         - name: app-config-item
  45 │           mountPath: /etc/app/app-config-item
  46 │         - name: app-config
  47 └           mountPath: /etc/app/perf.conf
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configMaps17_2.yaml:39-89
────────────────────────────────────────
  39 ┌       - name: app
  40 │         image: app:1.0.0
  41 │         volumeMounts:
  42 │         - mountPath: /etc/app/app-config
  43 │           name: app-config
  44 │         - name: app-config-item
  45 │           mountPath: /etc/app/app-config-item
  46 │         - name: app-config
  47 └           mountPath: /etc/app/perf.conf
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configMaps17_2.yaml:39-89
────────────────────────────────────────
  39 ┌       - name: app
  40 │         image: app:1.0.0
  41 │         volumeMounts:
  42 │         - mountPath: /etc/app/app-config
  43 │           name: app-config
  44 │         - name: app-config-item
  45 │           mountPath: /etc/app/app-config-item
  46 │         - name: app-config
  47 └           mountPath: /etc/app/perf.conf
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configMaps17_2.yaml:39-89
────────────────────────────────────────
  39 ┌       - name: app
  40 │         image: app:1.0.0
  41 │         volumeMounts:
  42 │         - mountPath: /etc/app/app-config
  43 │           name: app-config
  44 │         - name: app-config-item
  45 │           mountPath: /etc/app/app-config-item
  46 │         - name: app-config
  47 └           mountPath: /etc/app/perf.conf
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configMaps17_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: app-deployment
   5 │   labels:
   6 └     app: app-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMaps17_2.yaml:39-89
────────────────────────────────────────
  39 ┌       - name: app
  40 │         image: app:1.0.0
  41 │         volumeMounts:
  42 │         - mountPath: /etc/app/app-config
  43 │           name: app-config
  44 │         - name: app-config-item
  45 │           mountPath: /etc/app/app-config-item
  46 │         - name: app-config
  47 └           mountPath: /etc/app/perf.conf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configMaps17_2.yaml:17-89
────────────────────────────────────────
  17 ┌       terminationGracePeriodSeconds: 0
  18 │       volumes:
  19 │       - name: app-config
  20 │         configMap:
  21 │           name: app-config
  22 │       - name: app-config-item
  23 │         configMap:
  24 │           name: app-config
  25 └           items:
  ..   
────────────────────────────────────────



configMaps22_1.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'train-conf' in 'test' namespace stores sensitive contents in key(s) or value(s) '{"          AWS_SECRET_ACCESS_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'train-conf' in 'test' namespace stores secrets in key(s) or value(s) '{"          AWS_ACCESS_KEY_ID"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configVolume1.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 98, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test' of Pod 'configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configVolume1.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 │     volumeMounts:
  15 │       - name: config-vol
  16 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test' of Pod 'configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configVolume1.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 │     volumeMounts:
  15 │       - name: config-vol
  16 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test' of 'pod' 'configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configVolume1.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 │     volumeMounts:
  15 │       - name: config-vol
  16 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test' of Pod 'configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configVolume1.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 │     volumeMounts:
  15 │       - name: config-vol
  16 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test' of Pod 'configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configVolume1.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 │     volumeMounts:
  15 │       - name: config-vol
  16 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test' of Pod 'configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configVolume1.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 │     volumeMounts:
  15 │       - name: config-vol
  16 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test' of Pod 'configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configVolume1.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 │     volumeMounts:
  15 │       - name: config-vol
  16 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test' of Pod 'configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configVolume1.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 │     volumeMounts:
  15 │       - name: config-vol
  16 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test' of Pod 'configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configVolume1.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 │     volumeMounts:
  15 │       - name: config-vol
  16 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configVolume1.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 │     volumeMounts:
  15 │       - name: config-vol
  16 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test" of pod "configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configVolume1.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 │     volumeMounts:
  15 │       - name: config-vol
  16 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configVolume1.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 │     volumeMounts:
  15 │       - name: config-vol
  16 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configVolume1.yaml:4
────────────────────────────────────────
   4 [   name: configmap-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configVolume1.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 │     volumeMounts:
  15 │       - name: config-vol
  16 └         mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configVolume1.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test
   8 │     image: busybox:1.28
   9 │     resources:
  10 │       limits:
  11 │         memory: "128Mi"
  12 │         cpu: "500m"
  13 │     command: ['sh', '-c', 'echo "The app is running!" && tail -f /dev/null']
  14 └     volumeMounts:
  ..   
────────────────────────────────────────



config_allow_secret_types.yaml (kubernetes)
===========================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'admission-policies-secrets-store-sync-controller-allow-config' in 'default' namespace stores secrets in key(s) or value(s) '{"secretTypeBasicAuth", "secretTypeBootstrapToken", "secretTypeDockerCfg", "secretTypeDockerConfigJson", "secretTypeOpaque", "secretTypeSSHAuth", "secretTypeTLS"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config_deny_secret_types.yaml (kubernetes)
==========================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'admission-policies-secrets-store-sync-controller-deny-config' in 'default' namespace stores secrets in key(s) or value(s) '{"secretTypeServiceAccountToken"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config_example.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'config' in 'default' namespace stores secrets in key(s) or value(s) '{"token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config_manager_deployment.yaml (kubernetes)
===========================================
Tests: 112 (SUCCESSES: 104, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'config-manager-server' of Deployment 'config-manager-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config_manager_deployment.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config-manager-server' of Deployment 'config-manager-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config_manager_deployment.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config-manager-server' of Deployment 'config-manager-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config_manager_deployment.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config-manager-server' of Deployment 'config-manager-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config_manager_deployment.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config-manager-server' of Deployment 'config-manager-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config_manager_deployment.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config-manager-server' of Deployment 'config-manager-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config_manager_deployment.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config-manager-server' of Deployment 'config-manager-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config_manager_deployment.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment config-manager-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config_manager_deployment.yaml:5
────────────────────────────────────────
   5 [   name: config-manager-server
────────────────────────────────────────



config_manager_deployment1.yaml (kubernetes)
============================================
Tests: 112 (SUCCESSES: 104, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'config-manager-server' of Deployment 'config-manager-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config_manager_deployment1.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'config-manager-server' of Deployment 'config-manager-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config_manager_deployment1.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config-manager-server' of Deployment 'config-manager-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config_manager_deployment1.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config-manager-server' of Deployment 'config-manager-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config_manager_deployment1.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config-manager-server' of Deployment 'config-manager-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config_manager_deployment1.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config-manager-server' of Deployment 'config-manager-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config_manager_deployment1.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config-manager-server' of Deployment 'config-manager-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config_manager_deployment1.yaml:16-88
────────────────────────────────────────
  16 ┌       - name: config-manager-server
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: cloud-config_manager_server_image
  19 │         ports:
  20 │         - containerPort: 50500
  21 │           name: http2
  22 │         - containerPort: 50501
  23 │           name: metrics-http
  24 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment config-manager-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config_manager_deployment1.yaml:5
────────────────────────────────────────
   5 [   name: config-manager-server
────────────────────────────────────────



config_map10.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'config-map' in 'default' namespace stores secrets in key(s) or value(s) '{"PASSWORD", "POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config_map_aws.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'aws-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"export AWS_SECRET_ACCESS_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'aws-config' in 'default' namespace stores secrets in key(s) or value(s) '{"export AWS_ACCESS_KEY_ID"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config_map_aws1.yaml (kubernetes)
=================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'aws-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"export AWS_SECRET_ACCESS_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'aws-config' in 'default' namespace stores secrets in key(s) or value(s) '{"export AWS_ACCESS_KEY_ID"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config_map_aws2.yaml (kubernetes)
=================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'aws-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"export AWS_SECRET_ACCESS_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'aws-config' in 'default' namespace stores secrets in key(s) or value(s) '{"export AWS_ACCESS_KEY_ID"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config_map_aws3.yaml (kubernetes)
=================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'aws-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"export AWS_SECRET_ACCESS_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'aws-config' in 'default' namespace stores secrets in key(s) or value(s) '{"export AWS_ACCESS_KEY_ID"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config_map_pod.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple' of Pod 'simple' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple' of Pod 'simple' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple' of 'pod' 'simple' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple' of Pod 'simple' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple' of Pod 'simple' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'simple' of Pod 'simple' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple' of Pod 'simple' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple' of Pod 'simple' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple' of Pod 'simple' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple' of Pod 'simple' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple' of Pod 'simple' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple' of Pod 'simple' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple" of pod "simple" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod simple in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config_map_pod.yaml:4-6
────────────────────────────────────────
   4 ┌   name: simple
   5 │   labels:
   6 └     name: simple
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container simple in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config_map_pod.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod simple in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config_map_pod.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────



config_map_pod1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple' of Pod 'simple' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple' of Pod 'simple' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple' of 'pod' 'simple' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple' of Pod 'simple' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple' of Pod 'simple' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'simple' of Pod 'simple' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple' of Pod 'simple' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple' of Pod 'simple' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple' of Pod 'simple' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple' of Pod 'simple' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple' of Pod 'simple' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple' of Pod 'simple' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple" of pod "simple" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod simple in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config_map_pod1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: simple
   5 │   labels:
   6 └     name: simple
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container simple in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config_map_pod1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod simple in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config_map_pod1.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: simple
  10 │     image: simple-webapp-color
  11 │     ports":
  12 │       - containerPort: 8080
  13 │     envFrom:
  14 │       - configMapRef:
  15 └            name: app-config
────────────────────────────────────────



config_map_pod_manifest.yaml (kubernetes)
=========================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sassational-container' of Pod 'sassational-configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sassational-container' of Pod 'sassational-configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sassational-container' of 'pod' 'sassational-configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sassational-container' of Pod 'sassational-configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sassational-container' of Pod 'sassational-configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sassational-container' of Pod 'sassational-configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sassational-container' of Pod 'sassational-configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sassational-container' of Pod 'sassational-configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sassational-container' of Pod 'sassational-configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sassational-container' of Pod 'sassational-configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sassational-container' of Pod 'sassational-configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sassational-container' of Pod 'sassational-configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sassational-container" of pod "sassational-configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod sassational-configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config_map_pod_manifest.yaml:4-6
────────────────────────────────────────
   4 ┌   name: sassational-configmap-pod
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod sassational-configmap-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sassational-configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config_map_pod_manifest.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 │         mountPath: /etc/nginx/nginx.conf
  17 └         subPath: nginx.conf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod sassational-configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config_map_pod_manifest.yaml:8-31
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: sassational-container
  10 │     image: nginx
  11 │     ports:
  12 │       - containerPort: 80
  13 │       - containerPort: 443
  14 │     volumeMounts:
  15 │       - name: nginx-config-volume
  16 └         mountPath: /etc/nginx/nginx.conf
  ..   
────────────────────────────────────────



config_ssc.yaml (kubernetes)
============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'admission-policies-secret-sync-controller-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"labelKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'admission-policies-secret-sync-controller-config' in 'default' namespace stores secrets in key(s) or value(s) '{"tokenAudience1"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap294.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'db-config' in 'md2pdf' namespace stores sensitive contents in key(s) or value(s) '{"postgres"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap295.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'queue-config' in 'md2pdf' namespace stores sensitive contents in key(s) or value(s) '{"QUEUE_JOBS_ROUTING_KEY", "QUEUE_STATUS_ROUTING_KEY", "RABBITMQ_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'queue-config' in 'md2pdf' namespace stores secrets in key(s) or value(s) '{"RABBITMQ_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap298.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'msvc-usuarios' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap298_1.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'msvc-cursos' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap299.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap303.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap306.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'linkding-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LD_DB_PORT", "LD_SERVER_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap307.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'n8n-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DB_POSTGRESDB_PORT", "N8N_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap308.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'shelly-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MQTT_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap309.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'wallabag-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"SYMFONY__ENV__DATABASE_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap311.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'pgadmin-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PGADMIN_LISTEN_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap312.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'renovate-configmap' in 'renovate' namespace stores sensitive contents in key(s) or value(s) '{"RENOVATE_GIT_AUTHOR"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap318.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-config' in 'default' namespace stores secrets in key(s) or value(s) '{"PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap318_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello-cm' of Pod 'hello-cm' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello-cm' of Pod 'hello-cm' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello-cm' of 'pod' 'hello-cm' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello-cm' of Pod 'hello-cm' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello-cm' of Pod 'hello-cm' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'hello-cm' of Pod 'hello-cm' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello-cm' of Pod 'hello-cm' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello-cm' of Pod 'hello-cm' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello-cm' of Pod 'hello-cm' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello-cm' of Pod 'hello-cm' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello-cm' of Pod 'hello-cm' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello-cm' of Pod 'hello-cm' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello-cm" of pod "hello-cm" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hello-cm in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap318_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: hello-cm
   5 │   labels:
   6 └     app: application
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-cm in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hello-cm in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap318_1.yaml:8-21
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container hello-cm in pod hello-cm (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap318_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - image: 080196/hello-cm
  10 │     name: hello-cm
  11 │     ports:
  12 │     - containerPort: 3000
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 │       prefix: POSTGRES_
  17 └     env:
  ..   
────────────────────────────────────────



configmap318_2.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Pod 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Pod 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'pod' 'postgres' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Pod 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Pod 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'postgres' of Pod 'postgres' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Pod 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Pod 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Pod 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Pod 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Pod 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Pod 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of pod "postgres" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod postgres in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap318_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: postgres
   5 │   labels:
   6 └     app: db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap318_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod postgres in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap318_2.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: postgres
  10 │     name: postgres
  11 │     ports:
  12 │     - containerPort: 5432
  13 │     envFrom:
  14 │     - configMapRef:
  15 │         name: postgres-config
  16 └       prefix: POSTGRES_
────────────────────────────────────────



configmap328.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ghost-configmap' in 'ghost' namespace stores sensitive contents in key(s) or value(s) '{"mail__options__port", "mail__transport"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap329.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'pixa-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PIXA_AUTH_SECRET_KEY", "PIXA_STORAGE_ACCOUNT_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'pixa-config' in 'default' namespace stores secrets in key(s) or value(s) '{"PIXA_AUTH_SECRET_KEY", "PIXA_STORAGE_URL_SASTOKEN", "PIX_DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap330.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap338_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mycon' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mycon' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mycon' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mycon' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mycon' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mycon' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mycon' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mycon' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mycon" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap338_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mypod
   5 │   labels:
   6 └     sang: ghe
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap338_1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap338_1.yaml:8-17
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mycon
  10 │     image: alpine
  11 │     envFrom:
  12 │     - configMapRef:
  13 │         name: myconfig
  14 │         optional: false
  15 │     args:
  16 │     - sleep
  17 └     - 1d
────────────────────────────────────────



configmap338_3.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mycon' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mycon' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mycon' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mycon' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mycon' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mycon' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mycon' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mycon' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mycon' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mycon" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap338_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mypod
   5 │   labels:
   6 └     sang: ghe
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap338_3.yaml:9-24
────────────────────────────────────────
   9 ┌   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 │           name: myconfig
  17 └     - name: SANGAMESH1
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap338_3.yaml:8-24
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: mycon
  10 │     image: alpine
  11 │     env:
  12 │     - name: SANGAMESH
  13 │       valueFrom:
  14 │         configMapKeyRef:
  15 │           key: sangamesh
  16 └           name: myconfig
  ..   
────────────────────────────────────────



configmap338_4.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap338_4.yaml:4
────────────────────────────────────────
   4 [   name: my-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap338_4.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap338_4.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container
   8 │     image: my-image
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 │       mountPath: /etc/config
  12 │   volumes:
  13 │   - name: config-volume
  14 │     configMap:
  15 └       name: my-config
────────────────────────────────────────



configmap339.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysql' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap340.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysql' in 'default' namespace stores secrets in key(s) or value(s) '{"MYSQL_ROOT_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap356.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'config' in 'kubernetes-101' namespace stores sensitive contents in key(s) or value(s) '{"config_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap356.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap357.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'config' in 'kubernetes-101' namespace stores sensitive contents in key(s) or value(s) '{"config_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap357.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap359.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ingress-nginx-controller' in 'ingress-nginx' namespace stores sensitive contents in key(s) or value(s) '{"proxy-read-timeout", "proxy-send-timeout"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap373.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_DATABASE_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap376.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap381.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"      const username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"        pwd", "      const password ", "const rootPass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap382.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap38_1.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap38_1.yaml:4
────────────────────────────────────────
   4 [   name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap38_1.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap38_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────



configmap398.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap401.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'notification-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"SENDGRID_SENDER_EMAIL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap402.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap404.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap408.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap409.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap413.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap417.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'immich-configmap' in 'home' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT", "REDIS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap417.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap423.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'immich-config' in 'immich' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT", "DB_USERNAME", "REDIS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap431.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'projectname-config' in 'projectname' namespace stores sensitive contents in key(s) or value(s) '{"APP_KEY", "DB_PORT", "DB_USERNAME", "MAIL_FROM_ADDRESS", "MAIL_PORT", "MAIL_USERNAME", "REDIS_PORT", "SESSION_LIFETIME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'projectname-config' in 'projectname' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD", "MAIL_PASSWORD", "REDIS_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap443.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key3"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap456.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap459.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ease-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"APP_KEY", "DB_PORT", "DB_USERNAME", "REDIS_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'ease-config' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap46.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap461.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap463.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap464.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'converter-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap465.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'gateway-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap466.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'notifications-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap467.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap469.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap473.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap475.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'okd-in-use-project-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"default.port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap52.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap530.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap540.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'job-cleanup-script' in 'default' namespace stores secrets in key(s) or value(s) '{"kubectl config set-credentials user --token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap550.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'not-secret-variables' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"ENV_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap552.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-config' in 'staging' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap576.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"      const username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"        pwd", "      const password ", "const rootPass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap577.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap59.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ihotraco-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MONGO_INITDB_ROOT_USERNAME", "finance_email", "hotraco_email"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'ihotraco-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"mail-password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap590.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'quake3-server-config' in 'default' namespace stores secrets in key(s) or value(s) '{"  password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap593.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysql-creds' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap595.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap598.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap607.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'wikiculture-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"USER_SERVICE_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap611.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"RABBITMQ_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap613_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap613_1.yaml:4
────────────────────────────────────────
   4 [   name: my-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap613_1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap613_1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container
   8 │     image: your-image:tag
   9 │     volumeMounts:
  10 │     - name: config-volume
  11 │       mountPath: /data
  12 │   volumes:
  13 │   - name: config-volume
  14 │     configMap:
  15 └       name: my-configmap
────────────────────────────────────────



configmap62.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"      const username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"        pwd", "      const password ", "const rootPass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap625.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysql-creds' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap627.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysql-creds' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap628.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"my-api-key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap63.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap634.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mssql-connection-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"Server"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap640.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap662.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'db-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT", "DB_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap665.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"POSTGRES_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap667.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDERcode"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap669.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-be-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"dbPort"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap670.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'hadoop-conf' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"CAPACITY-SCHEDULER.XML_yarn.scheduler.capacity.maximum-applications", "CAPACITY-SCHEDULER.XML_yarn.scheduler.capacity.root.default.capacity", "CAPACITY-SCHEDULER.XML_yarn.scheduler.capacity.root.default.maximum-capacity", "CAPACITY-SCHEDULER.XML_yarn.scheduler.capacity.root.default.state", "YARN-SITE.XML_yarn.nodemanager.delete.debug-delay-sec"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap678.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rsyslog-config' in 'relp-rsyslog' namespace stores sensitive contents in key(s) or value(s) '{"    tls.myprivkey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap683.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'first-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"memory"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap684.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap69.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap691.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'backend-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DJANGO_SUPERUSER_EMAIL", "DJANGO_SUPERUSER_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'backend-config' in 'default' namespace stores secrets in key(s) or value(s) '{"DJANGO_SUPERUSER_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap692_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 97, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myapp' of Pod 'myapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap692_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myapp
   5 │   labels:
   6 └     name: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap692_1.yaml:9-21
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 │     - configMapRef:
  17 └         name: my-db-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap692_1.yaml:8-21
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: myapp
  10 │     image: busybox
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - env
  15 │     envFrom:
  16 └     - configMapRef:
  ..   
────────────────────────────────────────



configmap717.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'msvc-usuarios' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'msvc-usuarios' in 'default' namespace stores secrets in key(s) or value(s) '{"super_password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap717_1.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'msvc-cursos' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"port"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap718.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mongodb-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"      const username "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'mongodb-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"        pwd", "      const password ", "const rootPass "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap719.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap724.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'elasticsearch-kibana-conf' in 'cti-svcs-cdso-gdk-169643' namespace stores sensitive contents in key(s) or value(s) '{"kibana.yml", "xpack.encryptedSavedObjects.encryptionKey", "xpack.reporting.encryptionKey", "xpack.security.encryptionKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap724.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap725.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'databaseproject-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MONGO_DB_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap727.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'simplebank-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"postgresql"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap733.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'gatus' in 'observability' namespace stores sensitive contents in key(s) or value(s) '{"    user-key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap733.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'gatus' in 'observability' namespace stores secrets in key(s) or value(s) '{"    application-token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 configmap733.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap745.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'caddy-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"Caddyfile"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap755.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap761.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-set-env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key-1", "key-2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap782.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'coredns-custom' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"keycloak.override"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap784.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"EMP_ID", "USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap8.yaml (kubernetes)
============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'simplebank-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"postgresql"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap826.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'test-config-map' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key1", "key2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap838.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'discordbot-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LOG_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap838.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap839.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'discordbot-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LOG_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap839.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap880.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-cm' in 'aprenda-golang' namespace stores sensitive contents in key(s) or value(s) '{"REDIS_PORT", "SERVER_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap904.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"AUTH_PORT", "WEATHER_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap909.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap913.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap915.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'immich-configmap' in 'media' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT", "SERVER_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap915.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap917.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap920.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT", "DB_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap923.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'argocd-image-updater-config' in 'default' namespace stores secrets in key(s) or value(s) '{"  credentials"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap925.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'hitohub-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"FIREBASE_MESSAGING_SENDER_ID", "GOOGLE_ANALYTICS_TRACKING_ID", "VR_MATCH_MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap926.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'hitohub-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"FIREBASE_MESSAGING_SENDER_ID", "GOOGLE_ANALYTICS_TRACKING_ID", "VR_MATCH_MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap927.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'ecr-registry-helper-cm' in 'k8s-ecr-token-updater' namespace stores secrets in key(s) or value(s) '{"DOCKER_SECRET_NAME"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap928.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'palworld-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PGID", "PORT", "PUID", "RCON_PORT", "TZ"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap928.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'palworld-cm' in 'default' namespace stores secrets in key(s) or value(s) '{"SERVER_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 configmap928.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap929.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'valheim-config' in 'selfhosted' namespace stores sensitive contents in key(s) or value(s) '{"BACKUPS_DIRECTORY_PERMISSIONS", "BACKUPS_FILE_PERMISSIONS", "BACKUPS_IDLE_GRACE_PERIOD", "BACKUPS_INTERVAL", "CONFIG_DIRECTORY_PERMISSIONS", "WORLDS_DIRECTORY_PERMISSIONS", "WORLDS_FILE_PERMISSIONS"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmap929.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmap937.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'mycfgmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"bindPort"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap938_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap938_1.yaml:4
────────────────────────────────────────
   4 [   name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap938_1.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap938_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: nodejs-env-config
────────────────────────────────────────



configmap939.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-config' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap945.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'config' in 'kube-auth-proxy' namespace stores sensitive contents in key(s) or value(s) '{"config.yaml"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap948.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'wordpress-config' in 'default' namespace stores secrets in key(s) or value(s) '{"WORDPRESS_DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap949_1.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-aflow-redis-health' in 'ml-workshop' namespace stores secrets in key(s) or value(s) '{"[[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD", "[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap949_2.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'app-aflow-redis-scripts' in 'ml-workshop' namespace stores secrets in key(s) or value(s) '{"[[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap950.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap954.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'rabbitmq-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PLACEHOLDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap960.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'cart' in 'roboshop' namespace stores sensitive contents in key(s) or value(s) '{"CATALOGUE_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap986.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-secret' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap986_1.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'rabbitmq-secret' in 'default' namespace stores secrets in key(s) or value(s) '{"RABBITMQ_DEFAULT_PASS"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmap988.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'api-tester-2121-properties' in 'anotherclass-212' namespace stores sensitive contents in key(s) or value(s) '{"application_role"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmapPOD.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 99, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webcon' of Pod 'webapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmapPOD.yaml:8-32
────────────────────────────────────────
   8 ┌  - name: webcon
   9 │    image: sudarshanlnx/2022sundayweb:v1
  10 │    imagePullPolicy: Always
  11 │    ports:
  12 │    - containerPort: 80
  13 │      name: apache
  14 │      protocol: TCP
  15 │    resources:
  16 └          requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webcon' of Pod 'webapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmapPOD.yaml:8-32
────────────────────────────────────────
   8 ┌  - name: webcon
   9 │    image: sudarshanlnx/2022sundayweb:v1
  10 │    imagePullPolicy: Always
  11 │    ports:
  12 │    - containerPort: 80
  13 │      name: apache
  14 │      protocol: TCP
  15 │    resources:
  16 └          requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webcon' of 'pod' 'webapp' in 'devproject' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmapPOD.yaml:8-32
────────────────────────────────────────
   8 ┌  - name: webcon
   9 │    image: sudarshanlnx/2022sundayweb:v1
  10 │    imagePullPolicy: Always
  11 │    ports:
  12 │    - containerPort: 80
  13 │      name: apache
  14 │      protocol: TCP
  15 │    resources:
  16 └          requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webcon' of Pod 'webapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmapPOD.yaml:8-32
────────────────────────────────────────
   8 ┌  - name: webcon
   9 │    image: sudarshanlnx/2022sundayweb:v1
  10 │    imagePullPolicy: Always
  11 │    ports:
  12 │    - containerPort: 80
  13 │      name: apache
  14 │      protocol: TCP
  15 │    resources:
  16 └          requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webcon' of Pod 'webapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmapPOD.yaml:8-32
────────────────────────────────────────
   8 ┌  - name: webcon
   9 │    image: sudarshanlnx/2022sundayweb:v1
  10 │    imagePullPolicy: Always
  11 │    ports:
  12 │    - containerPort: 80
  13 │      name: apache
  14 │      protocol: TCP
  15 │    resources:
  16 └          requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webcon' of Pod 'webapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmapPOD.yaml:8-32
────────────────────────────────────────
   8 ┌  - name: webcon
   9 │    image: sudarshanlnx/2022sundayweb:v1
  10 │    imagePullPolicy: Always
  11 │    ports:
  12 │    - containerPort: 80
  13 │      name: apache
  14 │      protocol: TCP
  15 │    resources:
  16 └          requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webcon' of Pod 'webapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmapPOD.yaml:8-32
────────────────────────────────────────
   8 ┌  - name: webcon
   9 │    image: sudarshanlnx/2022sundayweb:v1
  10 │    imagePullPolicy: Always
  11 │    ports:
  12 │    - containerPort: 80
  13 │      name: apache
  14 │      protocol: TCP
  15 │    resources:
  16 └          requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmapPOD.yaml:8-32
────────────────────────────────────────
   8 ┌  - name: webcon
   9 │    image: sudarshanlnx/2022sundayweb:v1
  10 │    imagePullPolicy: Always
  11 │    ports:
  12 │    - containerPort: 80
  13 │      name: apache
  14 │      protocol: TCP
  15 │    resources:
  16 └          requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webcon" of pod "webapp" in "devproject" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmapPOD.yaml:8-32
────────────────────────────────────────
   8 ┌  - name: webcon
   9 │    image: sudarshanlnx/2022sundayweb:v1
  10 │    imagePullPolicy: Always
  11 │    ports:
  12 │    - containerPort: 80
  13 │      name: apache
  14 │      protocol: TCP
  15 │    resources:
  16 └          requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmapPOD.yaml:8-32
────────────────────────────────────────
   8 ┌  - name: webcon
   9 │    image: sudarshanlnx/2022sundayweb:v1
  10 │    imagePullPolicy: Always
  11 │    ports:
  12 │    - containerPort: 80
  13 │      name: apache
  14 │      protocol: TCP
  15 │    resources:
  16 └          requests:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod webapp in devproject namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp in devproject namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmapPOD.yaml:8-32
────────────────────────────────────────
   8 ┌  - name: webcon
   9 │    image: sudarshanlnx/2022sundayweb:v1
  10 │    imagePullPolicy: Always
  11 │    ports:
  12 │    - containerPort: 80
  13 │      name: apache
  14 │      protocol: TCP
  15 │    resources:
  16 └          requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod webapp in devproject namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmapPOD.yaml:7-32
────────────────────────────────────────
   7 ┌  containers:
   8 │  - name: webcon
   9 │    image: sudarshanlnx/2022sundayweb:v1
  10 │    imagePullPolicy: Always
  11 │    ports:
  12 │    - containerPort: 80
  13 │      name: apache
  14 │      protocol: TCP
  15 └    resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container webcon in pod webapp (namespace: devproject) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmapPOD.yaml:8-32
────────────────────────────────────────
   8 ┌  - name: webcon
   9 │    image: sudarshanlnx/2022sundayweb:v1
  10 │    imagePullPolicy: Always
  11 │    ports:
  12 │    - containerPort: 80
  13 │      name: apache
  14 │      protocol: TCP
  15 │    resources:
  16 └          requests:
  ..   
────────────────────────────────────────



configmapPOD2.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 99, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'webcon' of Pod 'webapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmapPOD2.yaml:8-35
────────────────────────────────────────
   8 ┌     - name: webcon
   9 │       image: sudarshanlnx/2022sundayweb:v1
  10 │       imagePullPolicy: Always
  11 │       ports:
  12 │         - containerPort: 80
  13 │           name: apache
  14 │           protocol: TCP
  15 │       resources:
  16 └         requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'webcon' of Pod 'webapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmapPOD2.yaml:8-35
────────────────────────────────────────
   8 ┌     - name: webcon
   9 │       image: sudarshanlnx/2022sundayweb:v1
  10 │       imagePullPolicy: Always
  11 │       ports:
  12 │         - containerPort: 80
  13 │           name: apache
  14 │           protocol: TCP
  15 │       resources:
  16 └         requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'webcon' of 'pod' 'webapp' in 'devproject' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmapPOD2.yaml:8-35
────────────────────────────────────────
   8 ┌     - name: webcon
   9 │       image: sudarshanlnx/2022sundayweb:v1
  10 │       imagePullPolicy: Always
  11 │       ports:
  12 │         - containerPort: 80
  13 │           name: apache
  14 │           protocol: TCP
  15 │       resources:
  16 └         requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'webcon' of Pod 'webapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmapPOD2.yaml:8-35
────────────────────────────────────────
   8 ┌     - name: webcon
   9 │       image: sudarshanlnx/2022sundayweb:v1
  10 │       imagePullPolicy: Always
  11 │       ports:
  12 │         - containerPort: 80
  13 │           name: apache
  14 │           protocol: TCP
  15 │       resources:
  16 └         requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'webcon' of Pod 'webapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmapPOD2.yaml:8-35
────────────────────────────────────────
   8 ┌     - name: webcon
   9 │       image: sudarshanlnx/2022sundayweb:v1
  10 │       imagePullPolicy: Always
  11 │       ports:
  12 │         - containerPort: 80
  13 │           name: apache
  14 │           protocol: TCP
  15 │       resources:
  16 └         requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'webcon' of Pod 'webapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmapPOD2.yaml:8-35
────────────────────────────────────────
   8 ┌     - name: webcon
   9 │       image: sudarshanlnx/2022sundayweb:v1
  10 │       imagePullPolicy: Always
  11 │       ports:
  12 │         - containerPort: 80
  13 │           name: apache
  14 │           protocol: TCP
  15 │       resources:
  16 └         requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'webcon' of Pod 'webapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmapPOD2.yaml:8-35
────────────────────────────────────────
   8 ┌     - name: webcon
   9 │       image: sudarshanlnx/2022sundayweb:v1
  10 │       imagePullPolicy: Always
  11 │       ports:
  12 │         - containerPort: 80
  13 │           name: apache
  14 │           protocol: TCP
  15 │       resources:
  16 └         requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmapPOD2.yaml:8-35
────────────────────────────────────────
   8 ┌     - name: webcon
   9 │       image: sudarshanlnx/2022sundayweb:v1
  10 │       imagePullPolicy: Always
  11 │       ports:
  12 │         - containerPort: 80
  13 │           name: apache
  14 │           protocol: TCP
  15 │       resources:
  16 └         requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "webcon" of pod "webapp" in "devproject" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmapPOD2.yaml:8-35
────────────────────────────────────────
   8 ┌     - name: webcon
   9 │       image: sudarshanlnx/2022sundayweb:v1
  10 │       imagePullPolicy: Always
  11 │       ports:
  12 │         - containerPort: 80
  13 │           name: apache
  14 │           protocol: TCP
  15 │       resources:
  16 └         requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmapPOD2.yaml:8-35
────────────────────────────────────────
   8 ┌     - name: webcon
   9 │       image: sudarshanlnx/2022sundayweb:v1
  10 │       imagePullPolicy: Always
  11 │       ports:
  12 │         - containerPort: 80
  13 │           name: apache
  14 │           protocol: TCP
  15 │       resources:
  16 └         requests:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod webapp in devproject namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp in devproject namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmapPOD2.yaml:8-35
────────────────────────────────────────
   8 ┌     - name: webcon
   9 │       image: sudarshanlnx/2022sundayweb:v1
  10 │       imagePullPolicy: Always
  11 │       ports:
  12 │         - containerPort: 80
  13 │           name: apache
  14 │           protocol: TCP
  15 │       resources:
  16 └         requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod webapp in devproject namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmapPOD2.yaml:7-39
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: webcon
   9 │       image: sudarshanlnx/2022sundayweb:v1
  10 │       imagePullPolicy: Always
  11 │       ports:
  12 │         - containerPort: 80
  13 │           name: apache
  14 │           protocol: TCP
  15 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container webcon in pod webapp (namespace: devproject) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmapPOD2.yaml:8-35
────────────────────────────────────────
   8 ┌     - name: webcon
   9 │       image: sudarshanlnx/2022sundayweb:v1
  10 │       imagePullPolicy: Always
  11 │       ports:
  12 │         - containerPort: 80
  13 │           name: apache
  14 │           protocol: TCP
  15 │       resources:
  16 └         requests:
  ..   
────────────────────────────────────────



configmapPod1.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busyboxpod' of Pod 'configmappod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busyboxpod' of Pod 'configmappod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busyboxpod' of 'pod' 'configmappod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busyboxpod' of Pod 'configmappod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busyboxpod' of Pod 'configmappod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busyboxpod' of Pod 'configmappod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busyboxpod' of Pod 'configmappod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busyboxpod' of Pod 'configmappod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busyboxpod' of Pod 'configmappod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busyboxpod' of Pod 'configmappod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busyboxpod' of Pod 'configmappod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busyboxpod' of Pod 'configmappod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busyboxpod" of pod "configmappod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmappod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmapPod1.yaml:4
────────────────────────────────────────
   4 [   name: configmappod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmappod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmapPod1.yaml:11-17
────────────────────────────────────────
  11 ┌   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 │     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  15 │     volumeMounts:
  16 │     - mountPath: /data/config
  17 └       name: app-config-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmappod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmapPod1.yaml:6-17
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: app-config-volume
   8 │     configMap:
   9 │       name: app-config
  10 │   containers:
  11 │   - name: busyboxpod
  12 │     image: busybox
  13 │     command: ['/bin/sh']
  14 └     args: ['-c', 'while true; do echo $(date) > /dev/stdout; sleep 10; done']
  ..   
────────────────────────────────────────



configmap_env_pod.yaml (kubernetes)
===================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_env_pod.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 └     - name: SPECIAL_LEVEL_KEY
  ..   
────────────────────────────────────────



configmap_env_pod1.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_env_pod1.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod1.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod1.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 └     - name: SPECIAL_LEVEL_KEY
  ..   
────────────────────────────────────────



configmap_env_pod1_2.yaml (kubernetes)
======================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"log_level"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap_env_pod1_3.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_env_pod1_3.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod1_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod1_3.yaml:6-24
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 └     - name: SPECIAL_LEVEL_KEY
  ..   
────────────────────────────────────────



configmap_env_pod1_4.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_env_pod1_4.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod1_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod1_4.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 └     - configMapRef:
  ..   
────────────────────────────────────────



configmap_env_pod2.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_env_pod2.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod2.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod2.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 └     - name: SPECIAL_LEVEL_KEY
  ..   
────────────────────────────────────────



configmap_env_pod2_2.yaml (kubernetes)
======================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"log_level"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap_env_pod2_3.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_env_pod2_3.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod2_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod2_3.yaml:6-24
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 └     - name: SPECIAL_LEVEL_KEY
  ..   
────────────────────────────────────────



configmap_env_pod2_4.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_env_pod2_4.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod2_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod2_4.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 └     - configMapRef:
  ..   
────────────────────────────────────────



configmap_env_pod3.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_env_pod3.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod3.yaml:7-18
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod3.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 └     - name: SPECIAL_LEVEL_KEY
  ..   
────────────────────────────────────────



configmap_env_pod3_2.yaml (kubernetes)
======================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"log_level"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap_env_pod3_3.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_env_pod3_3.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod3_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod3_3.yaml:6-24
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 └     - name: SPECIAL_LEVEL_KEY
  ..   
────────────────────────────────────────



configmap_env_pod3_4.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_env_pod3_4.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod3_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod3_4.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 └     - configMapRef:
  ..   
────────────────────────────────────────



configmap_env_pod_2.yaml (kubernetes)
=====================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'env-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"log_level"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmap_env_pod_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_env_pod_3.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod_3.yaml:7-23
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 │     - name: SPECIAL_LEVEL_KEY
  15 └       valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod_3.yaml:6-24
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     env:
  14 └     - name: SPECIAL_LEVEL_KEY
  ..   
────────────────────────────────────────



configmap_env_pod_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_env_pod_4.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod_4.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 │     - configMapRef:
  15 └         name: special-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_env_pod_4.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - env
  13 │     envFrom:
  14 └     - configMapRef:
  ..   
────────────────────────────────────────



configmap_sample_1.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app-container' of Deployment 'config-map-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app-container' of Deployment 'config-map-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app-container' of 'deployment' 'config-map-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app-container' of Deployment 'config-map-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app-container' of Deployment 'config-map-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app-container' of Deployment 'config-map-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app-container' of Deployment 'config-map-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app-container' of Deployment 'config-map-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app-container' of Deployment 'config-map-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app-container' of Deployment 'config-map-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app-container' of Deployment 'config-map-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app-container' of Deployment 'config-map-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app-container" of deployment "config-map-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment config-map-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_sample_1.yaml:4
────────────────────────────────────────
   4 [   name: config-map-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container config-map-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment config-map-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_sample_1.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 └               key: app_name
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app-container in deployment config-map-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configmap_sample_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: app-container
  17 │         image: my/app-image:latest
  18 │         env:
  19 │         - name: APP_NAME
  20 │           valueFrom:
  21 │             configMapKeyRef:
  22 │               name: example-configmap
  23 │               key: app_name
  24 └         - name: APP_VERSION
  ..   
────────────────────────────────────────



configmap_volume_pod1_1.yaml (kubernetes)
=========================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod1_1.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 └     - name: config-volume
  ..   
────────────────────────────────────────



configmap_volume_pod1_2.yaml (kubernetes)
=========================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod1_2.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 └     - name: config-volume
  ..   
────────────────────────────────────────



configmap_volume_pod2_1.yaml (kubernetes)
=========================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod2_1.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 └     - name: config-volume
  ..   
────────────────────────────────────────



configmap_volume_pod2_2.yaml (kubernetes)
=========================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod2_2.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 └     - name: config-volume
  ..   
────────────────────────────────────────



configmap_volume_pod3_1.yaml (kubernetes)
=========================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod3_1.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 └     - name: config-volume
  ..   
────────────────────────────────────────



configmap_volume_pod3_2.yaml (kubernetes)
=========================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod3_2.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 └     - name: config-volume
  ..   
────────────────────────────────────────



configmap_volume_pod_1.yaml (kubernetes)
========================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_volume_pod_1.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod_1.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - ls /etc/config/
  13 │     volumeMounts:
  14 └     - name: config-volume
  ..   
────────────────────────────────────────



configmap_volume_pod_2.yaml (kubernetes)
========================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-container' of 'pod' 'dapi-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-container' of Pod 'dapi-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-container' of Pod 'dapi-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-container" of pod "dapi-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dapi-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmap_volume_pod_2.yaml:4
────────────────────────────────────────
   4 [   name: dapi-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container dapi-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod_2.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 │     - name: config-volume
  15 └       mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dapi-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmap_volume_pod_2.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: test-container
   8 │     image: k8s.gcr.io/busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - cat /etc/config/keys
  13 │     volumeMounts:
  14 └     - name: config-volume
  ..   
────────────────────────────────────────



configmapdemo1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmapdemo1.yaml:4
────────────────────────────────────────
   4 [   name: my-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmapdemo1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmapdemo1.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: MY_CONFIG
  11 │       valueFrom:
  12 │         configMapKeyRef:
  13 │           name: my-config
  14 └           key: key1
────────────────────────────────────────



configmapdemo_1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmapdemo_1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx
   6 └   name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmapdemo_1.yaml:18-32
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 │               key: virtual_host
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmapdemo_1.yaml:17-45
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: VIRTUAL_HOST
  22 │           valueFrom:
  23 │             configMapKeyRef:
  24 │               name: nginx-demo
  25 └               key: virtual_host
  ..   
────────────────────────────────────────



configmapenvdocker.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sample-env-container' of Pod 'sample-pod-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sample-env-container' of Pod 'sample-pod-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sample-env-container' of 'pod' 'sample-pod-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sample-env-container' of Pod 'sample-pod-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sample-env-container' of Pod 'sample-pod-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sample-env-container' of Pod 'sample-pod-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sample-env-container' of Pod 'sample-pod-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sample-env-container' of Pod 'sample-pod-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sample-env-container' of Pod 'sample-pod-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sample-env-container' of Pod 'sample-pod-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sample-env-container' of Pod 'sample-pod-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sample-env-container' of Pod 'sample-pod-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sample-env-container" of pod "sample-pod-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod sample-pod-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmapenvdocker.yaml:4
────────────────────────────────────────
   4 [   name: sample-pod-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sample-pod-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmapenvdocker.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 │               name: env-sample
  15 └               key: key.sample1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod sample-pod-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmapenvdocker.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: sample-env-container
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "env"]
  10 │       env:
  11 │         - name: KEY_FROM_CONFIG
  12 │           valueFrom:
  13 │             configMapKeyRef:
  14 └               name: env-sample
  ..   
────────────────────────────────────────



configmaps-1.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmaps-1.yaml:40-43
────────────────────────────────────────
  40 ┌   creationTimestamp: null
  41 │   labels:
  42 │     run: nginx
  43 └   name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmaps-1.yaml:46-54
────────────────────────────────────────
  46 ┌   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 │             name: options
  54 └             key: var5
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmaps-1.yaml:45-56
────────────────────────────────────────
  45 ┌   containers:
  46 │   - image: nginx
  47 │     name: nginx
  48 │     resources: {}
  49 │     env:
  50 │       - name: var5
  51 │         valueFrom:
  52 │           configMapKeyRef:
  53 └             name: options
  ..   
────────────────────────────────────────



configmaps-2.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'anotherone' of Pod 'anotherone' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'anotherone' of Pod 'anotherone' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'anotherone' of 'pod' 'anotherone' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'anotherone' of Pod 'anotherone' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'anotherone' of Pod 'anotherone' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'anotherone' of Pod 'anotherone' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'anotherone' of Pod 'anotherone' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'anotherone' of Pod 'anotherone' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'anotherone' of Pod 'anotherone' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'anotherone' of Pod 'anotherone' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'anotherone' of Pod 'anotherone' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'anotherone' of Pod 'anotherone' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "anotherone" of pod "anotherone" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod anotherone in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmaps-2.yaml:12-15
────────────────────────────────────────
  12 ┌   creationTimestamp: null
  13 │   labels:
  14 │     run: anotherone
  15 └   name: anotherone
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container anotherone in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmaps-2.yaml:18-23
────────────────────────────────────────
  18 ┌   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 └           name: anotherone
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod anotherone in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmaps-2.yaml:17-25
────────────────────────────────────────
  17 ┌   containers:
  18 │   - image: nginx
  19 │     name: anotherone
  20 │     resources: {}
  21 │     envFrom:
  22 │       - configMapRef:
  23 │           name: anotherone
  24 │   dnsPolicy: ClusterFirst
  25 └   restartPolicy: Always
────────────────────────────────────────



configmaps-3.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cmvolume' of Pod 'cmvolume' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cmvolume' of Pod 'cmvolume' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cmvolume' of 'pod' 'cmvolume' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cmvolume' of Pod 'cmvolume' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cmvolume' of Pod 'cmvolume' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cmvolume' of Pod 'cmvolume' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cmvolume' of Pod 'cmvolume' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cmvolume' of Pod 'cmvolume' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cmvolume' of Pod 'cmvolume' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cmvolume' of Pod 'cmvolume' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cmvolume' of Pod 'cmvolume' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cmvolume' of Pod 'cmvolume' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cmvolume" of pod "cmvolume" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cmvolume in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmaps-3.yaml:11-14
────────────────────────────────────────
  11 ┌   creationTimestamp: null
  12 │   labels:
  13 │     run: cmvolume
  14 └   name: cmvolume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cmvolume in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmaps-3.yaml:17-24
────────────────────────────────────────
  17 ┌   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cmvolume in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmaps-3.yaml:16-31
────────────────────────────────────────
  16 ┌   containers:
  17 │   - command: [ "/bin/sh", "-c", "ls /etc/lala" ]
  18 │     # 要用 command 執行指令，否則啟動會失敗
  19 │     image: nginx
  20 │     name: cmvolume
  21 │     resources: {}
  22 │     volumeMounts:
  23 │       - name: cmvolume
  24 └         mountPath: /etc/lala
  ..   
────────────────────────────────────────



configmaps-pod.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Pod 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Pod 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'pod' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Pod 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Pod 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Pod 'web' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Pod 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Pod 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Pod 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Pod 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Pod 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Pod 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of pod "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmaps-pod.yaml:4
────────────────────────────────────────
   4 [   name: web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmaps-pod.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmaps-pod.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────



configmaps-pod1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Pod 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Pod 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'pod' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Pod 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Pod 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Pod 'web' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Pod 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Pod 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Pod 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Pod 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Pod 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Pod 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of pod "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmaps-pod1.yaml:4
────────────────────────────────────────
   4 [   name: web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmaps-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmaps-pod1.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────



configmaps-pod2.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Pod 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Pod 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'pod' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Pod 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Pod 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Pod 'web' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Pod 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Pod 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Pod 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Pod 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Pod 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Pod 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of pod "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configmaps-pod2.yaml:4
────────────────────────────────────────
   4 [   name: web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmaps-pod2.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configmaps-pod2.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: web
   8 │       image: httpd:latest
   9 │       envFrom:
  10 │         - configMapRef:
  11 └             name: rds-configmap
────────────────────────────────────────



configmaps11.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'n8n-configmap' in 'n8n' namespace stores sensitive contents in key(s) or value(s) '{"N8N_SMTP_SENDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmaps11.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmaps12.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-name' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"ENV"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmaps13.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-name' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"ENV"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmaps14.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'jitsi-envs' in 'rocketchat' namespace stores sensitive contents in key(s) or value(s) '{"HTTPS_PORT", "JVB_PORT", "TURN_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'jitsi-envs' in 'rocketchat' namespace stores secrets in key(s) or value(s) '{"JIBRI_RECORDER_PASSWORD", "JIBRI_XMPP_PASSWORD", "JICOFO_AUTH_PASSWORD", "JIGASI_XMPP_PASSWORD", "JVB_AUTH_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmaps15.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"exampleKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmaps18.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-name' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"ENV"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmaps21.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'producer-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MONGODB_PORT", "RABBITMQ_PORT", "RABBITMQ_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'producer-env' in 'default' namespace stores secrets in key(s) or value(s) '{"MONGODB_PASSWORD", "RABBITMQ_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmaps21_1.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'consumer-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MONGODB_PORT", "RABBITMQ_PORT", "RABBITMQ_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'consumer-env' in 'default' namespace stores secrets in key(s) or value(s) '{"MONGODB_PASSWORD", "RABBITMQ_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmaps25.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'eazybank-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"KEYCLOAK_ADMIN", "KEYCLOAK_ADMIN_PASSWORD"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'eazybank-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"KEYCLOAK_ADMIN_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmaps26.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-name' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"ENV"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmaps3.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'n8n-configmap' in 'n8n' namespace stores sensitive contents in key(s) or value(s) '{"N8N_SMTP_SENDER"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 configmaps3.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configmaps30.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-name' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"ENV"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmaps32.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'eazybank-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"KEYCLOAK_ADMIN", "KEYCLOAK_ADMIN_PASSWORD"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'eazybank-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"KEYCLOAK_ADMIN_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmaps33.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-name' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"ENV"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmaps39.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-name' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"ENV"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmaps4.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-name' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"ENV"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmaps43.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-name' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"ENV"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmaps44.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'myconfig' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MQ_ROUTING_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmaps5.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-name' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"ENV"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configmaps6.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'jitsi-envs' in 'rocketchat' namespace stores sensitive contents in key(s) or value(s) '{"HTTPS_PORT", "JVB_PORT", "TURN_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'jitsi-envs' in 'rocketchat' namespace stores secrets in key(s) or value(s) '{"JIBRI_RECORDER_PASSWORD", "JIBRI_XMPP_PASSWORD", "JICOFO_AUTH_PASSWORD", "JIGASI_XMPP_PASSWORD", "JVB_AUTH_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configmaps7.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"exampleKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configs2_1.yaml (kubernetes)
============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'pl-ld-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PL_LD_SDK_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configs2_2.yaml (kubernetes)
============================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'pl-oauth-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PL_AUTH_EMAIL_PASSWORD_CONN"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'pl-oauth-config' in 'default' namespace stores secrets in key(s) or value(s) '{"PL_AUTH_EMAIL_PASSWORD_CONN"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configs2_3.yaml (kubernetes)
============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'segment-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"cli-write-key", "ui-write-key", "write-key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configs_1.yaml (kubernetes)
===========================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'pl-ld-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PL_LD_SDK_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configs_2.yaml (kubernetes)
===========================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'pl-oauth-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PL_AUTH_EMAIL_PASSWORD_CONN"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'pl-oauth-config' in 'default' namespace stores secrets in key(s) or value(s) '{"PL_AUTH_EMAIL_PASSWORD_CONN"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configs_3.yaml (kubernetes)
===========================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'segment-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"cli-write-key", "ui-write-key", "write-key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configserver.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'configserver' of Deployment 'configserver-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'configserver' of Deployment 'configserver-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'configserver' of 'deployment' 'configserver-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'configserver' of Deployment 'configserver-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'configserver' of Deployment 'configserver-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'configserver' of Deployment 'configserver-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'configserver' of Deployment 'configserver-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'configserver' of Deployment 'configserver-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'configserver' of Deployment 'configserver-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'configserver' of Deployment 'configserver-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'configserver' of Deployment 'configserver-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "configserver" of deployment "configserver-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment configserver-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configserver.yaml:4-6
────────────────────────────────────────
   4 ┌   name: configserver-deployment
   5 │   labels:
   6 └     app: configserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configserver-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment configserver-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configserver.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container configserver in deployment configserver-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configserver.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: configserver
  19 │         image: eazybytes/configserver:s14
  20 │         ports:
  21 └         - containerPort: 8071
────────────────────────────────────────



configuration20.yaml (kubernetes)
=================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'home-assistant-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"  token"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



configuration21.yaml (kubernetes)
=================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'bluepill' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"BLUEPILL_HTTP_KEY_FILE", "BLUEPILL_HTTP_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configuration23.yaml (kubernetes)
=================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres' in 'default' namespace stores secrets in key(s) or value(s) '{"POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 configuration23.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



configuration25.yaml (kubernetes)
=================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'opentelemetry-collector-conf' in 'observability' namespace stores sensitive contents in key(s) or value(s) '{"opentelemetry-collector-config"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



configuration25_2.yaml (kubernetes)
===================================
Tests: 113 (SUCCESSES: 100, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'opentelemetry-collector' of Deployment 'opentelemetry-collector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configuration25_2.yaml:22-58
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /otelcol
  24 │         - --config=/conf/opentelemetry-collector-config.yaml
  25 │         env:
  26 │         - name: POD_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 │               apiVersion: v1
  30 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'opentelemetry-collector' of Deployment 'opentelemetry-collector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configuration25_2.yaml:22-58
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /otelcol
  24 │         - --config=/conf/opentelemetry-collector-config.yaml
  25 │         env:
  26 │         - name: POD_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 │               apiVersion: v1
  30 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'opentelemetry-collector' of 'deployment' 'opentelemetry-collector' in 'observability' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configuration25_2.yaml:22-58
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /otelcol
  24 │         - --config=/conf/opentelemetry-collector-config.yaml
  25 │         env:
  26 │         - name: POD_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 │               apiVersion: v1
  30 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'opentelemetry-collector' of Deployment 'opentelemetry-collector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configuration25_2.yaml:22-58
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /otelcol
  24 │         - --config=/conf/opentelemetry-collector-config.yaml
  25 │         env:
  26 │         - name: POD_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 │               apiVersion: v1
  30 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'opentelemetry-collector' of Deployment 'opentelemetry-collector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configuration25_2.yaml:22-58
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /otelcol
  24 │         - --config=/conf/opentelemetry-collector-config.yaml
  25 │         env:
  26 │         - name: POD_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 │               apiVersion: v1
  30 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'opentelemetry-collector' of Deployment 'opentelemetry-collector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configuration25_2.yaml:22-58
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /otelcol
  24 │         - --config=/conf/opentelemetry-collector-config.yaml
  25 │         env:
  26 │         - name: POD_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 │               apiVersion: v1
  30 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'opentelemetry-collector' of Deployment 'opentelemetry-collector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configuration25_2.yaml:22-58
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /otelcol
  24 │         - --config=/conf/opentelemetry-collector-config.yaml
  25 │         env:
  26 │         - name: POD_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 │               apiVersion: v1
  30 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configuration25_2.yaml:22-58
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /otelcol
  24 │         - --config=/conf/opentelemetry-collector-config.yaml
  25 │         env:
  26 │         - name: POD_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 │               apiVersion: v1
  30 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "opentelemetry-collector" of deployment "opentelemetry-collector" in "observability" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configuration25_2.yaml:22-58
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /otelcol
  24 │         - --config=/conf/opentelemetry-collector-config.yaml
  25 │         env:
  26 │         - name: POD_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 │               apiVersion: v1
  30 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configuration25_2.yaml:22-58
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /otelcol
  24 │         - --config=/conf/opentelemetry-collector-config.yaml
  25 │         env:
  26 │         - name: POD_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 │               apiVersion: v1
  30 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container opentelemetry-collector in observability namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configuration25_2.yaml:22-58
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /otelcol
  24 │         - --config=/conf/opentelemetry-collector-config.yaml
  25 │         env:
  26 │         - name: POD_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 │               apiVersion: v1
  30 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment opentelemetry-collector in observability namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configuration25_2.yaml:21-70
────────────────────────────────────────
  21 ┌       containers:
  22 │       - command:
  23 │         - /otelcol
  24 │         - --config=/conf/opentelemetry-collector-config.yaml
  25 │         env:
  26 │         - name: POD_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 └               apiVersion: v1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container opentelemetry-collector in deployment opentelemetry-collector (namespace: observability) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 configuration25_2.yaml:22-58
────────────────────────────────────────
  22 ┌       - command:
  23 │         - /otelcol
  24 │         - --config=/conf/opentelemetry-collector-config.yaml
  25 │         env:
  26 │         - name: POD_NAME
  27 │           valueFrom:
  28 │             fieldRef:
  29 │               apiVersion: v1
  30 └               fieldPath: metadata.name
  ..   
────────────────────────────────────────



configure-pod.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo' of 'pod' 'configmap-demo-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo' of Pod 'configmap-demo-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo' of Pod 'configmap-demo-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo" of pod "configmap-demo-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-demo-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configure-pod.yaml:4
────────────────────────────────────────
   4 [   name: configmap-demo-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-demo-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configure-pod.yaml:7-26
────────────────────────────────────────
   7 ┌     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 │           valueFrom:
  15 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-demo-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configure-pod.yaml:6-38
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: demo
   8 │       image: alpine
   9 │       command: ["sleep", "3600"]
  10 │       env:
  11 │         # Define the environment variable
  12 │         - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
  13 │                                      # from the key name in the ConfigMap.
  14 └           valueFrom:
  ..   
────────────────────────────────────────



configvolume.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container-with-volume' of Pod 'test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container-with-volume' of Pod 'test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container-with-volume' of 'pod' 'test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container-with-volume' of Pod 'test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container-with-volume' of Pod 'test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container-with-volume' of Pod 'test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container-with-volume' of Pod 'test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container-with-volume' of Pod 'test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container-with-volume' of Pod 'test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container-with-volume' of Pod 'test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container-with-volume' of Pod 'test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container-with-volume' of Pod 'test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container-with-volume" of pod "test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 configvolume.yaml:4
────────────────────────────────────────
   4 [   name: test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configvolume.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 configvolume.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: container-with-volume
   8 │       image: k8s.gcr.io/busybox
   9 │       command: ["/bin/sh", "-c", "ls /etc/config/"]
  10 │       volumeMounts:
  11 │         - name: config-volume
  12 │           mountPath: /etc/config
  13 │   volumes:
  14 └     - name: config-volume
  ..   
────────────────────────────────────────



confined.yaml (kubernetes)
==========================
Tests: 112 (SUCCESSES: 97, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello-python' of Pod 'hello-python' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello-python' of Pod 'hello-python' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello-python' of 'pod' 'hello-python' in 'seccomp-demo' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello-python' of Pod 'hello-python' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello-python' of Pod 'hello-python' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'hello-python' of Pod 'hello-python' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello-python' of Pod 'hello-python' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello-python' of Pod 'hello-python' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello-python' of Pod 'hello-python' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello-python' of Pod 'hello-python' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello-python' of Pod 'hello-python' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello-python' of Pod 'hello-python' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod hello-python in seccomp-demo namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container hello-python in pod hello-python (namespace: seccomp-demo) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 confined.yaml:14-21
────────────────────────────────────────
  14 ┌   - name: hello-python
  15 │     image: tiangolo/uwsgi-nginx-flask:latest
  16 │     imagePullPolicy: Always
  17 │     ports:
  18 │     - containerPort: 80
  19 │     volumeMounts:
  20 │     - name: app-script
  21 └       mountPath: /app/
────────────────────────────────────────



conformance-e2e10_3.yaml (kubernetes)
=====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e10_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e10_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e10_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e10_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e10_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conformance-container in pod e2e-conformance-test (namespace: conformance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conformance-e2e10_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────



conformance-e2e11_3.yaml (kubernetes)
=====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e11_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e11_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e11_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e11_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e11_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conformance-container in pod e2e-conformance-test (namespace: conformance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conformance-e2e11_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────



conformance-e2e13_3.yaml (kubernetes)
=====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e13_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e13_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e13_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e13_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e13_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e13_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────



conformance-e2e14_3.yaml (kubernetes)
=====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e14_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e14_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e14_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e14_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e14_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conformance-container in pod e2e-conformance-test (namespace: conformance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conformance-e2e14_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────



conformance-e2e15_3.yaml (kubernetes)
=====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e15_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e15_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e15_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e15_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e15_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conformance-container in pod e2e-conformance-test (namespace: conformance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conformance-e2e15_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────



conformance-e2e17_3.yaml (kubernetes)
=====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e17_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e17_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e17_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e17_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e17_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conformance-container in pod e2e-conformance-test (namespace: conformance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conformance-e2e17_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────



conformance-e2e18_3.yaml (kubernetes)
=====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e18_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e18_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e18_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e18_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e18_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conformance-container in pod e2e-conformance-test (namespace: conformance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conformance-e2e18_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────



conformance-e2e19_3.yaml (kubernetes)
=====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e19_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e19_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e19_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e19_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e19_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conformance-container in pod e2e-conformance-test (namespace: conformance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conformance-e2e19_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────



conformance-e2e1_3.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e1_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e1_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e1_4.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e1_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e1_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conformance-container in pod e2e-conformance-test (namespace: conformance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conformance-e2e1_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────



conformance-e2e2_3.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e2_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e2_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e2_4.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e2_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e2_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conformance-container in pod e2e-conformance-test (namespace: conformance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conformance-e2e2_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────



conformance-e2e3_3.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e3_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e3_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e3_4.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e3_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e3_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conformance-container in pod e2e-conformance-test (namespace: conformance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conformance-e2e3_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────



conformance-e2e4_3.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e4_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e4_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e4_4.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e4_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e4_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e4_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────



conformance-e2e5_3.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e5_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e5_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e5_4.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e5_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e5_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e5_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────



conformance-e2e6_3.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e6_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e6_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e6_4.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e6_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e6_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conformance-container in pod e2e-conformance-test (namespace: conformance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conformance-e2e6_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────



conformance-e2e7_3.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e7_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e7_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e7_4.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e7_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e7_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conformance-container in pod e2e-conformance-test (namespace: conformance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conformance-e2e7_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────



conformance-e2e8_3.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e8_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e8_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e8_4.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e8_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e8_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e8_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────



conformance-e2e9_3.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e9_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e9_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e9_4.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e9_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e9_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e9_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: k8s.gcr.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────



conformance-e2e_3.yaml (kubernetes)
===================================
Tests: 112 (SUCCESSES: 110, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 conformance-e2e_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'conformance-serviceaccount' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 conformance-e2e_3.yaml:8-13
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - '*'
  10 │   resources:
  11 │   - '*'
  12 │   verbs:
  13 └   - '*'
────────────────────────────────────────



conformance-e2e_4.yaml (kubernetes)
===================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conformance-container' of 'pod' 'e2e-conformance-test' in 'conformance' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conformance-container' of Pod 'e2e-conformance-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'e2e-conformance-test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 conformance-e2e_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conformance-container" of pod "e2e-conformance-test" in "conformance" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container e2e-conformance-test in conformance namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod e2e-conformance-test in conformance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conformance-e2e_4.yaml:7-30
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 └       value: ''
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conformance-container in pod e2e-conformance-test (namespace: conformance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conformance-e2e_4.yaml:8-24
────────────────────────────────────────
   8 ┌   - name: conformance-container
   9 │     image: registry.k8s.io/conformance-amd64:v1.14
  10 │     imagePullPolicy: IfNotPresent
  11 │     env:
  12 │     - name: E2E_FOCUS
  13 │       value: \[Conformance\]
  14 │     - name: E2E_SKIP
  15 │       value: ''
  16 └     - name: E2E_PROVIDER
  ..   
────────────────────────────────────────



conigmap.yaml (kubernetes)
==========================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysql-creds' in 'default' namespace stores secrets in key(s) or value(s) '{"DB_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



connect-deployment.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'connect' of Deployment 'connect' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'connect' of Deployment 'connect' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'connect' of 'deployment' 'connect' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'connect' of Deployment 'connect' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'connect' of Deployment 'connect' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'connect' of Deployment 'connect' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'connect' of Deployment 'connect' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'connect' of Deployment 'connect' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'connect' of Deployment 'connect' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'connect' of Deployment 'connect' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'connect' of Deployment 'connect' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'connect' of Deployment 'connect' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "connect" of deployment "connect" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment connect in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connect-deployment.yaml:4
────────────────────────────────────────
   4 [   name: connect
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container connect in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment connect in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connect-deployment.yaml:15-57
────────────────────────────────────────
  15 ┌       hostname: connect
  16 │       containers:
  17 │       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 └           value: 'broker:29092'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container connect in deployment connect (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connect-deployment.yaml:17-57
────────────────────────────────────────
  17 ┌       - name: connect
  18 │         image: us-central1-docker.pkg.dev/thesis-416800/uoc/mysql-kafka-connector:latest
  19 │         ports:
  20 │         - containerPort: 8083
  21 │         env:
  22 │         - name: CONNECT_BOOTSTRAP_SERVERS
  23 │           value: 'broker:29092'
  24 │         - name: CONNECT_REST_ADVERTISED_HOST_NAME
  25 └           value: connect
  ..   
────────────────────────────────────────



connection-checker.yaml (kubernetes)
====================================
Tests: 112 (SUCCESSES: 101, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'svcchecker' of Deployment '__ignored__' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connection-checker.yaml:12-55
────────────────────────────────────────
  12 ┌         - command:
  13 │           - sh
  14 │           - -c
  15 │           - |
  16 │             echo "Waiting for $SVC_HOST to become ready..."
  17 │ 
  18 │             until printf "." && nc -z -w 2 $(SVC_HOST) $(SVC_PORT); do
  19 │                 sleep $SVC_WAIT_INTERVAL;
  20 └             done;
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'svcchecker' of 'deployment' '__ignored__' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connection-checker.yaml:12-55
────────────────────────────────────────
  12 ┌         - command:
  13 │           - sh
  14 │           - -c
  15 │           - |
  16 │             echo "Waiting for $SVC_HOST to become ready..."
  17 │ 
  18 │             until printf "." && nc -z -w 2 $(SVC_HOST) $(SVC_PORT); do
  19 │                 sleep $SVC_WAIT_INTERVAL;
  20 └             done;
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'svcchecker' of Deployment '__ignored__' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connection-checker.yaml:12-55
────────────────────────────────────────
  12 ┌         - command:
  13 │           - sh
  14 │           - -c
  15 │           - |
  16 │             echo "Waiting for $SVC_HOST to become ready..."
  17 │ 
  18 │             until printf "." && nc -z -w 2 $(SVC_HOST) $(SVC_PORT); do
  19 │                 sleep $SVC_WAIT_INTERVAL;
  20 └             done;
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'svcchecker' of Deployment '__ignored__' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connection-checker.yaml:12-55
────────────────────────────────────────
  12 ┌         - command:
  13 │           - sh
  14 │           - -c
  15 │           - |
  16 │             echo "Waiting for $SVC_HOST to become ready..."
  17 │ 
  18 │             until printf "." && nc -z -w 2 $(SVC_HOST) $(SVC_PORT); do
  19 │                 sleep $SVC_WAIT_INTERVAL;
  20 └             done;
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'svcchecker' of Deployment '__ignored__' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connection-checker.yaml:12-55
────────────────────────────────────────
  12 ┌         - command:
  13 │           - sh
  14 │           - -c
  15 │           - |
  16 │             echo "Waiting for $SVC_HOST to become ready..."
  17 │ 
  18 │             until printf "." && nc -z -w 2 $(SVC_HOST) $(SVC_PORT); do
  19 │                 sleep $SVC_WAIT_INTERVAL;
  20 └             done;
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connection-checker.yaml:12-55
────────────────────────────────────────
  12 ┌         - command:
  13 │           - sh
  14 │           - -c
  15 │           - |
  16 │             echo "Waiting for $SVC_HOST to become ready..."
  17 │ 
  18 │             until printf "." && nc -z -w 2 $(SVC_HOST) $(SVC_PORT); do
  19 │                 sleep $SVC_WAIT_INTERVAL;
  20 └             done;
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "svcchecker" of deployment "__ignored__" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connection-checker.yaml:12-55
────────────────────────────────────────
  12 ┌         - command:
  13 │           - sh
  14 │           - -c
  15 │           - |
  16 │             echo "Waiting for $SVC_HOST to become ready..."
  17 │ 
  18 │             until printf "." && nc -z -w 2 $(SVC_HOST) $(SVC_PORT); do
  19 │                 sleep $SVC_WAIT_INTERVAL;
  20 └             done;
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connection-checker.yaml:12-55
────────────────────────────────────────
  12 ┌         - command:
  13 │           - sh
  14 │           - -c
  15 │           - |
  16 │             echo "Waiting for $SVC_HOST to become ready..."
  17 │ 
  18 │             until printf "." && nc -z -w 2 $(SVC_HOST) $(SVC_PORT); do
  19 │                 sleep $SVC_WAIT_INTERVAL;
  20 └             done;
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment __ignored__ in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connection-checker.yaml:7
────────────────────────────────────────
   7 [   name: __ignored__
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment __ignored__ in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connection-checker.yaml:11-55
────────────────────────────────────────
  11 ┌       initContainers:
  12 │         - command:
  13 │           - sh
  14 │           - -c
  15 │           - |
  16 │             echo "Waiting for $SVC_HOST to become ready..."
  17 │ 
  18 │             until printf "." && nc -z -w 2 $(SVC_HOST) $(SVC_PORT); do
  19 └                 sleep $SVC_WAIT_INTERVAL;
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container svcchecker in deployment __ignored__ (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connection-checker.yaml:12-55
────────────────────────────────────────
  12 ┌         - command:
  13 │           - sh
  14 │           - -c
  15 │           - |
  16 │             echo "Waiting for $SVC_HOST to become ready..."
  17 │ 
  18 │             until printf "." && nc -z -w 2 $(SVC_HOST) $(SVC_PORT); do
  19 │                 sleep $SVC_WAIT_INTERVAL;
  20 └             done;
  ..   
────────────────────────────────────────



connection.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0050 (CRITICAL): ClusterRole 'k8s-full-secrets-abilities-with-labels' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 connection.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - rbac.authorization.k8s.io
  23 │   resources:
  24 │   - rolebindings
  25 │   - clusterrolebindings
  26 │   verbs:
  27 │   - create
  28 │   - update
  29 └   - delete
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'k8s-full-secrets-abilities-with-labels' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 connection.yaml:30-40
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - rbac.authorization.k8s.io
  32 │   resources:
  33 │   - roles
  34 │   - clusterroles
  35 │   verbs:
  36 │   - bind
  37 │   - escalate
  38 └   - create
  ..   
────────────────────────────────────────



connectivity-check-hostport.yaml (kubernetes)
=============================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'echo-a-container' of Deployment 'echo-a' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'echo-a-container' of 'deployment' 'echo-a' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'echo-a-container' of Deployment 'echo-a' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'echo-a-container' of Deployment 'echo-a' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "echo-a-container" of deployment "echo-a" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment echo-a in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport.yaml:2-9
────────────────────────────────────────
   2 ┌   name: echo-a
   3 │   labels:
   4 │     name: echo-a
   5 │     topology: any
   6 │     component: network-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container echo-a in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment echo-a in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport.yaml:16-50
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 └         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container echo-a-container in deployment echo-a (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_1.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'echo-b-container' of Deployment 'echo-b' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'echo-b-container' of 'deployment' 'echo-b' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'echo-b-container' of Deployment 'echo-b' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'echo-b-container' of Deployment 'echo-b' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'echo-b-container' of Deployment 'echo-b' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "echo-b-container" of deployment "echo-b" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment echo-b in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:2-9
────────────────────────────────────────
   2 ┌   name: echo-b
   3 │   labels:
   4 │     name: echo-b
   5 │     topology: any
   6 │     component: services-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container echo-b in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment echo-b in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:16-51
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 └           hostPort: 40000
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container echo-b-container in deployment echo-b (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



connectivity-check-hostport_10.yaml (kubernetes)
================================================
Tests: 129 (SUCCESSES: 95, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-a-intra-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pod-to-a-intra-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-allow-container' of 'deployment' 'pod-to-a-intra-node-proxy-egress-policy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-reject-container' of 'deployment' 'pod-to-a-intra-node-proxy-egress-policy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-a-intra-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-a-intra-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-a-intra-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-a-intra-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-a-intra-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-intra-node-proxy-egress-policy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-a-intra-node-proxy-egress-policy-allow-container" of deployment "pod-to-a-intra-node-proxy-egress-policy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-a-intra-node-proxy-egress-policy-reject-container" of deployment "pod-to-a-intra-node-proxy-egress-policy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-a-intra-node-proxy-egress-policy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-a-intra-node-proxy-egress-policy
   3 │   labels:
   4 │     name: pod-to-a-intra-node-proxy-egress-policy
   5 │     topology: intra-node
   6 │     component: proxy-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-a-intra-node-proxy-egress-policy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-a-intra-node-proxy-egress-policy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-a-intra-node-proxy-egress-policy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:16-74
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-a-intra-node-proxy-egress-policy-allow-container in deployment pod-to-a-intra-node-proxy-egress-policy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-a-intra-node-proxy-egress-policy-reject-container in deployment pod-to-a-intra-node-proxy-egress-policy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_10.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-intra-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_11.yaml (kubernetes)
================================================
Tests: 129 (SUCCESSES: 95, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-a-multi-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pod-to-a-multi-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-allow-container' of 'deployment' 'pod-to-a-multi-node-proxy-egress-policy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-reject-container' of 'deployment' 'pod-to-a-multi-node-proxy-egress-policy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-a-multi-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-a-multi-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-a-multi-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-a-multi-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-allow-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-a-multi-node-proxy-egress-policy-reject-container' of Deployment 'pod-to-a-multi-node-proxy-egress-policy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-a-multi-node-proxy-egress-policy-allow-container" of deployment "pod-to-a-multi-node-proxy-egress-policy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-a-multi-node-proxy-egress-policy-reject-container" of deployment "pod-to-a-multi-node-proxy-egress-policy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-a-multi-node-proxy-egress-policy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-a-multi-node-proxy-egress-policy
   3 │   labels:
   4 │     name: pod-to-a-multi-node-proxy-egress-policy
   5 │     topology: multi-node
   6 │     component: proxy-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-a-multi-node-proxy-egress-policy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-a-multi-node-proxy-egress-policy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-a-multi-node-proxy-egress-policy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:16-74
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-a-multi-node-proxy-egress-policy-allow-container in deployment pod-to-a-multi-node-proxy-egress-policy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-a-multi-node-proxy-egress-policy-reject-container in deployment pod-to-a-multi-node-proxy-egress-policy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_11.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-a-multi-node-proxy-egress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_12.yaml (kubernetes)
================================================
Tests: 129 (SUCCESSES: 95, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-c-intra-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pod-to-c-intra-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-allow-container' of 'deployment' 'pod-to-c-intra-node-proxy-ingress-policy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-reject-container' of 'deployment' 'pod-to-c-intra-node-proxy-ingress-policy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-c-intra-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-c-intra-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-c-intra-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-c-intra-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-c-intra-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-ingress-policy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-c-intra-node-proxy-ingress-policy-allow-container" of deployment "pod-to-c-intra-node-proxy-ingress-policy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-c-intra-node-proxy-ingress-policy-reject-container" of deployment "pod-to-c-intra-node-proxy-ingress-policy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-c-intra-node-proxy-ingress-policy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-c-intra-node-proxy-ingress-policy
   3 │   labels:
   4 │     name: pod-to-c-intra-node-proxy-ingress-policy
   5 │     topology: intra-node
   6 │     component: proxy-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-c-intra-node-proxy-ingress-policy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-c-intra-node-proxy-ingress-policy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-c-intra-node-proxy-ingress-policy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:16-74
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-c-intra-node-proxy-ingress-policy-allow-container in deployment pod-to-c-intra-node-proxy-ingress-policy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-c-intra-node-proxy-ingress-policy-reject-container in deployment pod-to-c-intra-node-proxy-ingress-policy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_12.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_13.yaml (kubernetes)
================================================
Tests: 129 (SUCCESSES: 95, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-c-multi-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pod-to-c-multi-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-allow-container' of 'deployment' 'pod-to-c-multi-node-proxy-ingress-policy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-reject-container' of 'deployment' 'pod-to-c-multi-node-proxy-ingress-policy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-c-multi-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-c-multi-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-c-multi-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-c-multi-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-c-multi-node-proxy-ingress-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-ingress-policy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-c-multi-node-proxy-ingress-policy-allow-container" of deployment "pod-to-c-multi-node-proxy-ingress-policy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-c-multi-node-proxy-ingress-policy-reject-container" of deployment "pod-to-c-multi-node-proxy-ingress-policy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-c-multi-node-proxy-ingress-policy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-c-multi-node-proxy-ingress-policy
   3 │   labels:
   4 │     name: pod-to-c-multi-node-proxy-ingress-policy
   5 │     topology: multi-node
   6 │     component: proxy-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-c-multi-node-proxy-ingress-policy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-c-multi-node-proxy-ingress-policy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-c-multi-node-proxy-ingress-policy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:16-74
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-c-multi-node-proxy-ingress-policy-allow-container in deployment pod-to-c-multi-node-proxy-ingress-policy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-c-multi-node-proxy-ingress-policy-reject-container in deployment pod-to-c-multi-node-proxy-ingress-policy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_13.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-ingress-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_14.yaml (kubernetes)
================================================
Tests: 129 (SUCCESSES: 95, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-allow-container' of 'deployment' 'pod-to-c-intra-node-proxy-to-proxy-policy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-reject-container' of 'deployment' 'pod-to-c-intra-node-proxy-to-proxy-policy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-c-intra-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-intra-node-proxy-to-proxy-policy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-c-intra-node-proxy-to-proxy-policy-allow-container" of deployment "pod-to-c-intra-node-proxy-to-proxy-policy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-c-intra-node-proxy-to-proxy-policy-reject-container" of deployment "pod-to-c-intra-node-proxy-to-proxy-policy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-c-intra-node-proxy-to-proxy-policy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-c-intra-node-proxy-to-proxy-policy
   3 │   labels:
   4 │     name: pod-to-c-intra-node-proxy-to-proxy-policy
   5 │     topology: intra-node
   6 │     component: proxy-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-c-intra-node-proxy-to-proxy-policy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-c-intra-node-proxy-to-proxy-policy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-c-intra-node-proxy-to-proxy-policy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:16-74
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-c-intra-node-proxy-to-proxy-policy-allow-container in deployment pod-to-c-intra-node-proxy-to-proxy-policy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-c-intra-node-proxy-to-proxy-policy-reject-container in deployment pod-to-c-intra-node-proxy-to-proxy-policy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_14.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-intra-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_15.yaml (kubernetes)
================================================
Tests: 129 (SUCCESSES: 95, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-allow-container' of 'deployment' 'pod-to-c-multi-node-proxy-to-proxy-policy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-reject-container' of 'deployment' 'pod-to-c-multi-node-proxy-to-proxy-policy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-allow-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-c-multi-node-proxy-to-proxy-policy-reject-container' of Deployment 'pod-to-c-multi-node-proxy-to-proxy-policy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-c-multi-node-proxy-to-proxy-policy-allow-container" of deployment "pod-to-c-multi-node-proxy-to-proxy-policy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-c-multi-node-proxy-to-proxy-policy-reject-container" of deployment "pod-to-c-multi-node-proxy-to-proxy-policy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-c-multi-node-proxy-to-proxy-policy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-c-multi-node-proxy-to-proxy-policy
   3 │   labels:
   4 │     name: pod-to-c-multi-node-proxy-to-proxy-policy
   5 │     topology: multi-node
   6 │     component: proxy-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-c-multi-node-proxy-to-proxy-policy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-c-multi-node-proxy-to-proxy-policy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-c-multi-node-proxy-to-proxy-policy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:16-74
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-c-multi-node-proxy-to-proxy-policy-allow-container in deployment pod-to-c-multi-node-proxy-to-proxy-policy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:18-48
────────────────────────────────────────
  18 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-allow-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-c-multi-node-proxy-to-proxy-policy-reject-container in deployment pod-to-c-multi-node-proxy-to-proxy-policy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_15.yaml:49-64
────────────────────────────────────────
  49 ┌       - name: pod-to-c-multi-node-proxy-to-proxy-policy-reject-container
  50 │         ports: []
  51 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  52 │         imagePullPolicy: IfNotPresent
  53 │         command:
  54 │         - /bin/ash
  55 │         - -c
  56 │         - sleep 1000000000
  57 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_16.yaml (kubernetes)
================================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of 'deployment' 'pod-to-b-multi-node-clusterip' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-b-multi-node-clusterip-container" of deployment "pod-to-b-multi-node-clusterip" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-b-multi-node-clusterip in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-b-multi-node-clusterip
   3 │   labels:
   4 │     name: pod-to-b-multi-node-clusterip
   5 │     topology: multi-node
   6 │     component: services-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-b-multi-node-clusterip in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-b-multi-node-clusterip in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:16-60
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-b-multi-node-clusterip-container in deployment pod-to-b-multi-node-clusterip (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_16.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_17.yaml (kubernetes)
================================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-b-multi-node-headless-container' of 'deployment' 'pod-to-b-multi-node-headless' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-b-multi-node-headless-container" of deployment "pod-to-b-multi-node-headless" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-b-multi-node-headless in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-b-multi-node-headless
   3 │   labels:
   4 │     name: pod-to-b-multi-node-headless
   5 │     topology: multi-node
   6 │     component: services-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-b-multi-node-headless in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-b-multi-node-headless in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:16-60
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-b-multi-node-headless-container in deployment pod-to-b-multi-node-headless (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_17.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_18.yaml (kubernetes)
================================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'host-to-b-multi-node-clusterip-container' of 'deployment' 'host-to-b-multi-node-clusterip' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'host-to-b-multi-node-clusterip' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:11-65
────────────────────────────────────────
  11 ┌   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: host-to-b-multi-node-clusterip
  15 │     spec:
  16 │       hostNetwork: true
  17 │       containers:
  18 │       - name: host-to-b-multi-node-clusterip-container
  19 └         ports: []
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "host-to-b-multi-node-clusterip-container" of deployment "host-to-b-multi-node-clusterip" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment host-to-b-multi-node-clusterip in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:2-9
────────────────────────────────────────
   2 ┌   name: host-to-b-multi-node-clusterip
   3 │   labels:
   4 │     name: host-to-b-multi-node-clusterip
   5 │     topology: multi-node
   6 │     component: services-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container host-to-b-multi-node-clusterip in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment host-to-b-multi-node-clusterip in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:16-61
────────────────────────────────────────
  16 ┌       hostNetwork: true
  17 │       containers:
  18 │       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container host-to-b-multi-node-clusterip-container in deployment host-to-b-multi-node-clusterip (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_18.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_19.yaml (kubernetes)
================================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'host-to-b-multi-node-headless-container' of Deployment 'host-to-b-multi-node-headless' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'host-to-b-multi-node-headless-container' of Deployment 'host-to-b-multi-node-headless' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'host-to-b-multi-node-headless-container' of 'deployment' 'host-to-b-multi-node-headless' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'host-to-b-multi-node-headless' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:11-65
────────────────────────────────────────
  11 ┌   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: host-to-b-multi-node-headless
  15 │     spec:
  16 │       hostNetwork: true
  17 │       containers:
  18 │       - name: host-to-b-multi-node-headless-container
  19 └         ports: []
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'host-to-b-multi-node-headless-container' of Deployment 'host-to-b-multi-node-headless' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'host-to-b-multi-node-headless-container' of Deployment 'host-to-b-multi-node-headless' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'host-to-b-multi-node-headless-container' of Deployment 'host-to-b-multi-node-headless' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'host-to-b-multi-node-headless-container' of Deployment 'host-to-b-multi-node-headless' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'host-to-b-multi-node-headless-container' of Deployment 'host-to-b-multi-node-headless' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'host-to-b-multi-node-headless-container' of Deployment 'host-to-b-multi-node-headless' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'host-to-b-multi-node-headless-container' of Deployment 'host-to-b-multi-node-headless' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'host-to-b-multi-node-headless-container' of Deployment 'host-to-b-multi-node-headless' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "host-to-b-multi-node-headless-container" of deployment "host-to-b-multi-node-headless" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment host-to-b-multi-node-headless in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:2-9
────────────────────────────────────────
   2 ┌   name: host-to-b-multi-node-headless
   3 │   labels:
   4 │     name: host-to-b-multi-node-headless
   5 │     topology: multi-node
   6 │     component: services-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container host-to-b-multi-node-headless in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment host-to-b-multi-node-headless in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:16-61
────────────────────────────────────────
  16 ┌       hostNetwork: true
  17 │       containers:
  18 │       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container host-to-b-multi-node-headless-container in deployment host-to-b-multi-node-headless (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_19.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_2.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'echo-b-host-container' of 'deployment' 'echo-b-host' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'echo-b-host' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:11-63
────────────────────────────────────────
  11 ┌   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: echo-b-host
  15 │     spec:
  16 │       hostNetwork: true
  17 │       containers:
  18 │       - name: echo-b-host-container
  19 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "echo-b-host-container" of deployment "echo-b-host" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment echo-b-host in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:2-9
────────────────────────────────────────
   2 ┌   name: echo-b-host
   3 │   labels:
   4 │     name: echo-b-host
   5 │     topology: any
   6 │     component: services-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container echo-b-host in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment echo-b-host in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:16-59
────────────────────────────────────────
  16 ┌       hostNetwork: true
  17 │       containers:
  18 │       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container echo-b-host-container in deployment echo-b-host (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────



connectivity-check-hostport_20.yaml (kubernetes)
================================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-b-multi-node-hostport-container' of Deployment 'pod-to-b-multi-node-hostport' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-b-multi-node-hostport-container' of Deployment 'pod-to-b-multi-node-hostport' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-b-multi-node-hostport-container' of 'deployment' 'pod-to-b-multi-node-hostport' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-b-multi-node-hostport-container' of Deployment 'pod-to-b-multi-node-hostport' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-b-multi-node-hostport-container' of Deployment 'pod-to-b-multi-node-hostport' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-b-multi-node-hostport-container' of Deployment 'pod-to-b-multi-node-hostport' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-b-multi-node-hostport-container' of Deployment 'pod-to-b-multi-node-hostport' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-b-multi-node-hostport-container' of Deployment 'pod-to-b-multi-node-hostport' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-b-multi-node-hostport-container' of Deployment 'pod-to-b-multi-node-hostport' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-b-multi-node-hostport-container' of Deployment 'pod-to-b-multi-node-hostport' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-b-multi-node-hostport-container' of Deployment 'pod-to-b-multi-node-hostport' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-b-multi-node-hostport-container" of deployment "pod-to-b-multi-node-hostport" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-b-multi-node-hostport in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-b-multi-node-hostport
   3 │   labels:
   4 │     name: pod-to-b-multi-node-hostport
   5 │     topology: multi-node
   6 │     component: hostport-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-b-multi-node-hostport in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-b-multi-node-hostport in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:16-60
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-b-multi-node-hostport-container in deployment pod-to-b-multi-node-hostport (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_20.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_21.yaml (kubernetes)
================================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-b-intra-node-hostport-container' of Deployment 'pod-to-b-intra-node-hostport' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-b-intra-node-hostport-container' of Deployment 'pod-to-b-intra-node-hostport' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-b-intra-node-hostport-container' of 'deployment' 'pod-to-b-intra-node-hostport' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-b-intra-node-hostport-container' of Deployment 'pod-to-b-intra-node-hostport' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-b-intra-node-hostport-container' of Deployment 'pod-to-b-intra-node-hostport' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-b-intra-node-hostport-container' of Deployment 'pod-to-b-intra-node-hostport' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-b-intra-node-hostport-container' of Deployment 'pod-to-b-intra-node-hostport' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-b-intra-node-hostport-container' of Deployment 'pod-to-b-intra-node-hostport' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-b-intra-node-hostport-container' of Deployment 'pod-to-b-intra-node-hostport' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-b-intra-node-hostport-container' of Deployment 'pod-to-b-intra-node-hostport' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-b-intra-node-hostport-container' of Deployment 'pod-to-b-intra-node-hostport' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-b-intra-node-hostport-container" of deployment "pod-to-b-intra-node-hostport" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-b-intra-node-hostport in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-b-intra-node-hostport
   3 │   labels:
   4 │     name: pod-to-b-intra-node-hostport
   5 │     topology: intra-node
   6 │     component: hostport-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-b-intra-node-hostport in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-b-intra-node-hostport in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:16-60
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-b-intra-node-hostport-container in deployment pod-to-b-intra-node-hostport (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_21.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-hostport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_22.yaml (kubernetes)
================================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of 'deployment' 'pod-to-b-multi-node-nodeport' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-b-multi-node-nodeport-container" of deployment "pod-to-b-multi-node-nodeport" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-b-multi-node-nodeport in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-b-multi-node-nodeport
   3 │   labels:
   4 │     name: pod-to-b-multi-node-nodeport
   5 │     topology: multi-node
   6 │     component: nodeport-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-b-multi-node-nodeport in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-b-multi-node-nodeport in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:16-60
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-b-multi-node-nodeport-container in deployment pod-to-b-multi-node-nodeport (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_22.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_23.yaml (kubernetes)
================================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of 'deployment' 'pod-to-b-intra-node-nodeport' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-b-intra-node-nodeport-container" of deployment "pod-to-b-intra-node-nodeport" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-b-intra-node-nodeport in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-b-intra-node-nodeport
   3 │   labels:
   4 │     name: pod-to-b-intra-node-nodeport
   5 │     topology: intra-node
   6 │     component: nodeport-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-b-intra-node-nodeport in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-b-intra-node-nodeport in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:16-60
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-b-intra-node-nodeport-container in deployment pod-to-b-intra-node-nodeport (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_23.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_3.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'echo-c-container' of Deployment 'echo-c' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'echo-c-container' of Deployment 'echo-c' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'echo-c-container' of 'deployment' 'echo-c' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'echo-c-container' of Deployment 'echo-c' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'echo-c-container' of Deployment 'echo-c' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'echo-c-container' of Deployment 'echo-c' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'echo-c-container' of Deployment 'echo-c' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'echo-c-container' of Deployment 'echo-c' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'echo-c-container' of Deployment 'echo-c' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'echo-c-container' of Deployment 'echo-c' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'echo-c-container' of Deployment 'echo-c' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'echo-c-container' of Deployment 'echo-c' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "echo-c-container" of deployment "echo-c" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment echo-c in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:2-9
────────────────────────────────────────
   2 ┌   name: echo-c
   3 │   labels:
   4 │     name: echo-c
   5 │     topology: any
   6 │     component: proxy-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container echo-c in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment echo-c in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:16-51
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 └           hostPort: 40001
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container echo-c-container in deployment echo-c (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_3.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-c-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40001
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



connectivity-check-hostport_4.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'echo-c-host-container' of Deployment 'echo-c-host' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'echo-c-host-container' of Deployment 'echo-c-host' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'echo-c-host-container' of 'deployment' 'echo-c-host' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'echo-c-host' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:11-63
────────────────────────────────────────
  11 ┌   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: echo-c-host
  15 │     spec:
  16 │       hostNetwork: true
  17 │       containers:
  18 │       - name: echo-c-host-container
  19 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'echo-c-host-container' of Deployment 'echo-c-host' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'echo-c-host-container' of Deployment 'echo-c-host' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'echo-c-host-container' of Deployment 'echo-c-host' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'echo-c-host-container' of Deployment 'echo-c-host' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'echo-c-host-container' of Deployment 'echo-c-host' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'echo-c-host-container' of Deployment 'echo-c-host' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'echo-c-host-container' of Deployment 'echo-c-host' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'echo-c-host-container' of Deployment 'echo-c-host' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "echo-c-host-container" of deployment "echo-c-host" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment echo-c-host in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:2-9
────────────────────────────────────────
   2 ┌   name: echo-c-host
   3 │   labels:
   4 │     name: echo-c-host
   5 │     topology: any
   6 │     component: proxy-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container echo-c-host in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment echo-c-host in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:16-59
────────────────────────────────────────
  16 ┌       hostNetwork: true
  17 │       containers:
  18 │       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container echo-c-host-container in deployment echo-c-host (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_4.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-c-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21002'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────



connectivity-check-hostport_5.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-a-container' of 'deployment' 'pod-to-a' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-a-container" of deployment "pod-to-a" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-a in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-a
   3 │   labels:
   4 │     name: pod-to-a
   5 │     topology: any
   6 │     component: network-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-a in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-a in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:16-50
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-a-container in deployment pod-to-a (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_6.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-external-1111-container' of Deployment 'pod-to-external-1111' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-external-1111-container' of Deployment 'pod-to-external-1111' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-external-1111-container' of 'deployment' 'pod-to-external-1111' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-external-1111-container' of Deployment 'pod-to-external-1111' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-external-1111-container' of Deployment 'pod-to-external-1111' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-external-1111-container' of Deployment 'pod-to-external-1111' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-external-1111-container' of Deployment 'pod-to-external-1111' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-external-1111-container' of Deployment 'pod-to-external-1111' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-external-1111-container' of Deployment 'pod-to-external-1111' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-external-1111-container' of Deployment 'pod-to-external-1111' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-external-1111-container' of Deployment 'pod-to-external-1111' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-external-1111-container" of deployment "pod-to-external-1111" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-external-1111 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-external-1111
   3 │   labels:
   4 │     name: pod-to-external-1111
   5 │     topology: any
   6 │     component: network-check
   7 │     traffic: external
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-external-1111 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-external-1111 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:16-50
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-external-1111-container in deployment pod-to-external-1111 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-1111-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_7.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-a-denied-cnp-container' of 'deployment' 'pod-to-a-denied-cnp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-a-denied-cnp-container" of deployment "pod-to-a-denied-cnp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-a-denied-cnp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-a-denied-cnp
   3 │   labels:
   4 │     name: pod-to-a-denied-cnp
   5 │     topology: any
   6 │     component: policy-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-a-denied-cnp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-a-denied-cnp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:16-40
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-a-denied-cnp-container in deployment pod-to-a-denied-cnp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_7.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_8.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-a-allowed-cnp-container' of 'deployment' 'pod-to-a-allowed-cnp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-a-allowed-cnp-container" of deployment "pod-to-a-allowed-cnp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-a-allowed-cnp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-a-allowed-cnp
   3 │   labels:
   4 │     name: pod-to-a-allowed-cnp
   5 │     topology: any
   6 │     component: policy-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-a-allowed-cnp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-a-allowed-cnp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:16-50
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-a-allowed-cnp-container in deployment pod-to-a-allowed-cnp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-hostport_9.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-external-fqdn-allow-google-cnp-container' of Deployment 'pod-to-external-fqdn-allow-google-cnp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-external-fqdn-allow-google-cnp-container' of Deployment 'pod-to-external-fqdn-allow-google-cnp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-external-fqdn-allow-google-cnp-container' of 'deployment' 'pod-to-external-fqdn-allow-google-cnp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-external-fqdn-allow-google-cnp-container' of Deployment 'pod-to-external-fqdn-allow-google-cnp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-external-fqdn-allow-google-cnp-container' of Deployment 'pod-to-external-fqdn-allow-google-cnp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-external-fqdn-allow-google-cnp-container' of Deployment 'pod-to-external-fqdn-allow-google-cnp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-external-fqdn-allow-google-cnp-container' of Deployment 'pod-to-external-fqdn-allow-google-cnp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-external-fqdn-allow-google-cnp-container' of Deployment 'pod-to-external-fqdn-allow-google-cnp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-external-fqdn-allow-google-cnp-container' of Deployment 'pod-to-external-fqdn-allow-google-cnp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-external-fqdn-allow-google-cnp-container' of Deployment 'pod-to-external-fqdn-allow-google-cnp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-external-fqdn-allow-google-cnp-container' of Deployment 'pod-to-external-fqdn-allow-google-cnp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-external-fqdn-allow-google-cnp-container" of deployment "pod-to-external-fqdn-allow-google-cnp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-external-fqdn-allow-google-cnp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-external-fqdn-allow-google-cnp
   3 │   labels:
   4 │     name: pod-to-external-fqdn-allow-google-cnp
   5 │     topology: any
   6 │     component: policy-check
   7 │     traffic: external
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-external-fqdn-allow-google-cnp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-external-fqdn-allow-google-cnp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:16-50
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-external-fqdn-allow-google-cnp-container in deployment pod-to-external-fqdn-allow-google-cnp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-hostport_9.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-external-fqdn-allow-google-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-internal.yaml (kubernetes)
=============================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'echo-a-container' of Deployment 'echo-a' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'echo-a-container' of 'deployment' 'echo-a' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'echo-a-container' of Deployment 'echo-a' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'echo-a-container' of Deployment 'echo-a' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'echo-a-container' of Deployment 'echo-a' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "echo-a-container" of deployment "echo-a" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment echo-a in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-internal.yaml:2-9
────────────────────────────────────────
   2 ┌   name: echo-a
   3 │   labels:
   4 │     name: echo-a
   5 │     topology: any
   6 │     component: network-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container echo-a in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment echo-a in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal.yaml:16-50
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 └         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container echo-a-container in deployment echo-a (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-internal.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: echo-a-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  25 │         imagePullPolicy: IfNotPresent
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-internal_1.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'echo-b-container' of Deployment 'echo-b' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'echo-b-container' of 'deployment' 'echo-b' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'echo-b-container' of Deployment 'echo-b' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'echo-b-container' of Deployment 'echo-b' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'echo-b-container' of Deployment 'echo-b' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'echo-b-container' of Deployment 'echo-b' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "echo-b-container" of deployment "echo-b" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment echo-b in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-internal_1.yaml:2-9
────────────────────────────────────────
   2 ┌   name: echo-b
   3 │   labels:
   4 │     name: echo-b
   5 │     topology: any
   6 │     component: services-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container echo-b in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment echo-b in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_1.yaml:16-51
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 └           hostPort: 40000
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container echo-b-container in deployment echo-b (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-internal_1.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: echo-b-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         ports:
  23 │         - containerPort: 8080
  24 │           hostPort: 40000
  25 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  26 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



connectivity-check-internal_10.yaml (kubernetes)
================================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of 'deployment' 'pod-to-b-multi-node-nodeport' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-b-multi-node-nodeport-container' of Deployment 'pod-to-b-multi-node-nodeport' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-b-multi-node-nodeport-container" of deployment "pod-to-b-multi-node-nodeport" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-b-multi-node-nodeport in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-internal_10.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-b-multi-node-nodeport
   3 │   labels:
   4 │     name: pod-to-b-multi-node-nodeport
   5 │     topology: multi-node
   6 │     component: nodeport-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-b-multi-node-nodeport in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-b-multi-node-nodeport in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_10.yaml:16-60
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-b-multi-node-nodeport-container in deployment pod-to-b-multi-node-nodeport (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-internal_10.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-internal_11.yaml (kubernetes)
================================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of 'deployment' 'pod-to-b-intra-node-nodeport' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-b-intra-node-nodeport-container' of Deployment 'pod-to-b-intra-node-nodeport' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-b-intra-node-nodeport-container" of deployment "pod-to-b-intra-node-nodeport" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-b-intra-node-nodeport in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-internal_11.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-b-intra-node-nodeport
   3 │   labels:
   4 │     name: pod-to-b-intra-node-nodeport
   5 │     topology: intra-node
   6 │     component: nodeport-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-b-intra-node-nodeport in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-b-intra-node-nodeport in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_11.yaml:16-60
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-b-intra-node-nodeport-container in deployment pod-to-b-intra-node-nodeport (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-internal_11.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-intra-node-nodeport-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-internal_2.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'echo-b-host-container' of 'deployment' 'echo-b-host' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'echo-b-host' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 connectivity-check-internal_2.yaml:11-63
────────────────────────────────────────
  11 ┌   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: echo-b-host
  15 │     spec:
  16 │       hostNetwork: true
  17 │       containers:
  18 │       - name: echo-b-host-container
  19 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'echo-b-host-container' of Deployment 'echo-b-host' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "echo-b-host-container" of deployment "echo-b-host" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment echo-b-host in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-internal_2.yaml:2-9
────────────────────────────────────────
   2 ┌   name: echo-b-host
   3 │   labels:
   4 │     name: echo-b-host
   5 │     topology: any
   6 │     component: services-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container echo-b-host in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment echo-b-host in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_2.yaml:16-59
────────────────────────────────────────
  16 ┌       hostNetwork: true
  17 │       containers:
  18 │       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container echo-b-host-container in deployment echo-b-host (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-internal_2.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: echo-b-host-container
  19 │         env:
  20 │         - name: PORT
  21 │           value: '21000'
  22 │         ports: []
  23 │         image: quay.io/cilium/json-mock:v1.3.2@sha256:bc6c46c74efadb135bc996c2467cece6989302371ef4e3f068361460abaf39be
  24 │         imagePullPolicy: IfNotPresent
  25 │         terminationMessagePolicy: FallbackToLogsOnError
  26 └         readinessProbe:
  ..   
────────────────────────────────────────



connectivity-check-internal_3.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-a-container' of 'deployment' 'pod-to-a' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-a-container' of Deployment 'pod-to-a' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-a-container" of deployment "pod-to-a" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-a in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-internal_3.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-a
   3 │   labels:
   4 │     name: pod-to-a
   5 │     topology: any
   6 │     component: network-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-a in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-a in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_3.yaml:16-50
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-a-container in deployment pod-to-a (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-internal_3.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-internal_4.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-a-denied-cnp-container' of 'deployment' 'pod-to-a-denied-cnp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-a-denied-cnp-container' of Deployment 'pod-to-a-denied-cnp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-a-denied-cnp-container" of deployment "pod-to-a-denied-cnp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-a-denied-cnp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-internal_4.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-a-denied-cnp
   3 │   labels:
   4 │     name: pod-to-a-denied-cnp
   5 │     topology: any
   6 │     component: policy-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-a-denied-cnp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-a-denied-cnp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_4.yaml:16-40
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-a-denied-cnp-container in deployment pod-to-a-denied-cnp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-internal_4.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: pod-to-a-denied-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-internal_5.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-a-allowed-cnp-container' of 'deployment' 'pod-to-a-allowed-cnp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-a-allowed-cnp-container' of Deployment 'pod-to-a-allowed-cnp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-a-allowed-cnp-container" of deployment "pod-to-a-allowed-cnp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-a-allowed-cnp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-internal_5.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-a-allowed-cnp
   3 │   labels:
   4 │     name: pod-to-a-allowed-cnp
   5 │     topology: any
   6 │     component: policy-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-a-allowed-cnp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-a-allowed-cnp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_5.yaml:16-50
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-a-allowed-cnp-container in deployment pod-to-a-allowed-cnp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-internal_5.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-a-allowed-cnp-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-internal_6.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of 'deployment' 'pod-to-b-multi-node-clusterip' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-b-multi-node-clusterip-container' of Deployment 'pod-to-b-multi-node-clusterip' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-b-multi-node-clusterip-container" of deployment "pod-to-b-multi-node-clusterip" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-b-multi-node-clusterip in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-internal_6.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-b-multi-node-clusterip
   3 │   labels:
   4 │     name: pod-to-b-multi-node-clusterip
   5 │     topology: multi-node
   6 │     component: services-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-b-multi-node-clusterip in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-b-multi-node-clusterip in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_6.yaml:16-60
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-b-multi-node-clusterip-container in deployment pod-to-b-multi-node-clusterip (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-internal_6.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-internal_7.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-to-b-multi-node-headless-container' of 'deployment' 'pod-to-b-multi-node-headless' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-to-b-multi-node-headless-container' of Deployment 'pod-to-b-multi-node-headless' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-to-b-multi-node-headless-container" of deployment "pod-to-b-multi-node-headless" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pod-to-b-multi-node-headless in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-internal_7.yaml:2-9
────────────────────────────────────────
   2 ┌   name: pod-to-b-multi-node-headless
   3 │   labels:
   4 │     name: pod-to-b-multi-node-headless
   5 │     topology: multi-node
   6 │     component: services-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-to-b-multi-node-headless in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pod-to-b-multi-node-headless in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_7.yaml:16-60
────────────────────────────────────────
  16 ┌       hostNetwork: false
  17 │       containers:
  18 │       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pod-to-b-multi-node-headless-container in deployment pod-to-b-multi-node-headless (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-internal_7.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: pod-to-b-multi-node-headless-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────



connectivity-check-internal_8.yaml (kubernetes)
===============================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'host-to-b-multi-node-clusterip-container' of 'deployment' 'host-to-b-multi-node-clusterip' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'host-to-b-multi-node-clusterip' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 connectivity-check-internal_8.yaml:11-65
────────────────────────────────────────
  11 ┌   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: host-to-b-multi-node-clusterip
  15 │     spec:
  16 │       hostNetwork: true
  17 │       containers:
  18 │       - name: host-to-b-multi-node-clusterip-container
  19 └         ports: []
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'host-to-b-multi-node-clusterip-container' of Deployment 'host-to-b-multi-node-clusterip' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "host-to-b-multi-node-clusterip-container" of deployment "host-to-b-multi-node-clusterip" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment host-to-b-multi-node-clusterip in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 connectivity-check-internal_8.yaml:2-9
────────────────────────────────────────
   2 ┌   name: host-to-b-multi-node-clusterip
   3 │   labels:
   4 │     name: host-to-b-multi-node-clusterip
   5 │     topology: multi-node
   6 │     component: services-check
   7 │     traffic: internal
   8 │     quarantine: 'false'
   9 └     type: autocheck
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container host-to-b-multi-node-clusterip in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment host-to-b-multi-node-clusterip in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 connectivity-check-internal_8.yaml:16-61
────────────────────────────────────────
  16 ┌       hostNetwork: true
  17 │       containers:
  18 │       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 └         - -c
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container host-to-b-multi-node-clusterip-container in deployment host-to-b-multi-node-clusterip (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 connectivity-check-internal_8.yaml:18-50
────────────────────────────────────────
  18 ┌       - name: host-to-b-multi-node-clusterip-container
  19 │         ports: []
  20 │         image: quay.io/cilium/alpine-curl:v1.5.0@sha256:7b286939730d8af1149ef88dba15739d8330bb83d7d9853a23e5ab4043e2d33c
  21 │         imagePullPolicy: IfNotPresent
  22 │         command:
  23 │         - /bin/ash
  24 │         - -c
  25 │         - sleep 1000000000
  26 └         terminationMessagePolicy: FallbackToLogsOnError
  ..   
────────────────────────────────────────


