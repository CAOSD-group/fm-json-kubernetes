
Report Summary

┌───────────────────────────────────────┬────────────┬───────────────────┐
│                Target                 │    Type    │ Misconfigurations │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret408.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret454.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret493.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret579.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret628.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret629.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret631.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret632.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret633.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret634.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret637.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret638.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret639.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret640.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret641.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret642.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret643.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret789.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret864.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret865.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret866.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret867.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret868.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret869.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret870.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret871.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secret970.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ SecretExample.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secrete1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secrete1_1.yaml                       │ kubernetes │        17         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secrets-Local.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Secrets-Prod-Example.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret37.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret370.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret371.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret374.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret381.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret382.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret383.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret384.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret385.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret387.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret388.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret39.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret390.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret391.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret392.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret393.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret394.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret395.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret396.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret397.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret398.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret399.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret40.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret400.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret401.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret402.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret403.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret409.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret412.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret413.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret414.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret415.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret416.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret417.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret418.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret419.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret42.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret421.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret422.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret424.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret425.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret426.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret43.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret438.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret439.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret44.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret440.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret441.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret442.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret443.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret447.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret448.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret449.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret45.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret450.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret451.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret452.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret455.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret46.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret464.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret466.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret469.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret469_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret47.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret471.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret472.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret473.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret474.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret475.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret476.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret477.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret478.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret479.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret479_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret48.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret480.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret481.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret481_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret481_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret481_3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret484.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret488.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret489.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret490.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret491.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret492.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret494.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret495.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret496.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret497.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret498.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret500.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret501.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret502.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret502_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret503.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret504.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret504_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret504_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret504_3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret505.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret506.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret507.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret508.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret509.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret51.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret510.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret511.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret512.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret513.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret514.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret515.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret516.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret517.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret518.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret519.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret52.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret520.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret521.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret522.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret522_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret523.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret524.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret524_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret524_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret524_3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret525.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret526.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret527.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret527_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret528.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret529.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret529_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret529_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret529_3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret53.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret530.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret531.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret532.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret532_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret533.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret534.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret534_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret534_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret534_3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret539.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret544.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret545.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret546.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret547.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret548.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret549.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret550.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret551.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret552.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret553.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret554.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret555.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret556.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret557.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret558.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret559.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret567.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret57.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret570.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret571.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret576.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret577.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret578.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret58.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret580.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret581.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret583.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret584.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret585.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret586.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret587.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret588.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret589.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret59.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret590.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret591.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret592.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret593.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret60.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret602.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret603.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret604.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret605.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret607.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret608.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret608_1.yaml                      │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret609.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret61.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret610.yaml                        │ kubernetes │        17         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret610_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret611.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret611_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret611_2.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret611_3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret612.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret613.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret614.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret615.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret616.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret617.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret618.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret619.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret61_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret61_2.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret61_3.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret62.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret620.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret621.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret622.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret623.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret624.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret625.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret626.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret627.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret63.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret630.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret635.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret636.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret64.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret644.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret645.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret646.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret647.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret648.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret65.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret651.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret654.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret66.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret660.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret663.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret664.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret67.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret671.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret672.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret673.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret674.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret675.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret677.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret677_1.yaml                      │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret678.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret679.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret68.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret680.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret681.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret682.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret683.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret684.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret685.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret686.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret687.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret689.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret691.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret692.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret696.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret697.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret698.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret699.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret70.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret700.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret701.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret706.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret707.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret708.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret709.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret71.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret710.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret711.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret712.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret714.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret715.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret716.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret717.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret72.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret726.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret727.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret728.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret729.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret73.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret730.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret731.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret735.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret736.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret737.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret738.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret739.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret73_1.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret73_2.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret74.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret740.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret741.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret749.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret75.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret755.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret758.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret760.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret760_1.yaml                      │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret762.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret763.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret764.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret765.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret768.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret768_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret768_2.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret768_3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret769.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret77.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret770.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret771.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret772.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret773.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret774.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret775.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret776.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret777.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret778.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret779.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret78.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret780.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret781.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret784.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret785.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret786.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret787.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret788.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret790.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret791.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret792.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret796.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret799.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret8.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret800.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret801.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret803.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret804.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret804_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret805.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret806.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret808.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret809.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret81.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret810.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret811.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret812.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret813.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret815.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret816.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret817.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret818.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret819.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret820.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret821.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret823.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret825.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret826.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret827.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret828.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret828_1.yaml                      │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret829.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret830.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret835.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret837.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret838.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret839.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret840.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret841.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret843.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret844.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret845.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret846.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret847.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret849.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret850.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret851.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret852.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret853.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret857.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret858.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret860.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret861.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret87.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret872.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret873.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret874.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret88.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret888.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret889.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret89.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret891.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret892.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret893.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret895.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret896.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret899.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret9.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret90.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret900.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret901.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret902.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret903.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret904.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret905.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret906.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret923.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret925.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret932.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret933.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret934.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret935.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret936.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret937.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret938.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret939.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret94.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret940.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret941.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret942.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret943.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret945.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret946.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret947.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret948.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret949.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret94_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret95.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret950.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret951.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret952.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret953.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret954.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret955.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret956.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret96.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret962.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret963.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret965.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret966.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret97.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret974.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret98.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret983.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret984.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret985.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret986.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret987.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret988.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret989.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret99.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret990.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret991.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret992.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret993.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret994.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret995.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret996.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secret997.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secretdb.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secretdemo.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secretdemo_1.yaml                     │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrete.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrete2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secretoVolumen.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secretreader-deployment.yaml          │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-1.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-2.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-3.yaml                        │ kubernetes │        17         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-4.yaml                        │ kubernetes │        17         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-api.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-as-environment-variables.yaml │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-as-volumes.yaml               │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-db1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-db2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-dockerhub.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-example.yaml                  │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-multiple.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-opaque.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-pgadmin1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-pgadmin2.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-pod-dockerhub.yaml            │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-pod.yaml                      │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-postgres.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-postgres1.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-string-data.yaml              │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-template.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-template_1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-template_2.yaml               │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-template_3.yaml               │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-template_4.yaml               │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-template_5.yaml               │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-ui1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-ui1_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets-vault-namespace.yaml          │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.example1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.example1_1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.example2.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.example3.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.example4.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops10.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops11.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops12.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops13.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops14.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops15.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops16.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops17.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops18.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops19.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops20.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops21.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops22.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops23.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops24.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops25.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops26.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops28.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops4.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops5.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops6.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops7.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops8.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.sops9.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets11.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets113.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets114.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets115.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets117.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets127.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets128.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets131.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets133.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets137.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets14.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets144.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets145.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets145_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets145_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets146.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets148.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets14_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets14_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets151.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets152.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets159.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets166.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets166_1.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets166_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets166_3.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets166_4.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets174.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets179.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets181.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets182.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets183.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets184.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets185.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets186.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets187.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets191.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets196.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets197.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets1_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets200.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets201.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets203.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets204.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets205.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets207.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets208.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets209.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets210.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets211.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets213.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets214.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets216.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets217.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets217_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets226.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets226_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets227.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets229.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets230.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets231.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets232.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets233.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets234.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets238.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets239.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets242.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets243.yaml                       │ kubernetes │        16         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets245.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets25.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets252.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets256.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets257.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets258.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets259.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets25_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets25_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets26.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets260.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets261.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets261_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets262.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets263.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets264.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets265.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets265_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets267.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets269.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets269_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets27.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets270.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets271.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets272.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets273.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets274.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets275.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets275_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets275_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets277.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets278.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets279.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets280.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets280_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets280_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets281.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets282.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets285.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets286.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets287.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets29.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets293.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets295.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets296.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets298.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets299.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets300.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets301.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets302.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets303.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets304.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets305.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets307.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets308.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets309.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets31.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets310.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets313.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets314.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets315.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets32.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets320.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets320_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets320_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets320_3.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets328.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets329.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets33.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets330.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets331.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets332.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets333.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets334.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets336.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets338.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets339.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets34.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets340.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets343.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets344.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets347.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets352.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets353.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets354.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets355.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets356.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets357.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets36.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets362.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets369.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets369_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets369_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets369_3.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets369_4.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets370.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets370_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets370_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets370_3.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets370_4.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets371.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets378.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets380.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets381.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets382.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets39.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets391.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets392.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets393.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets394.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets395.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets396.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets397.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets398.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets399.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets40.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets400.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets401.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets402.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets41.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets415.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets418.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets419.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets42.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets420.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets423.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets425.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets426.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets427.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets42_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets433.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets436.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets437.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets439.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets440.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets441.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets442.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets444.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets444_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets449.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets449_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets449_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets449_3.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets449_4.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets450.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets450_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets450_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets450_3.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets450_4.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets451.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets451_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets452.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets452_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets453.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets454.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets455.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets458.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets459.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets46.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets461.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets462.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets464.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets465.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets466.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets466_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets467.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ secrets468.yaml                       │ kubernetes │         0         │
└───────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


Secrete1_1.yaml (kubernetes)
============================
Tests: 99 (SUCCESSES: 82, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Deployment 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'deployment' 'mysql' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Deployment 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Deployment 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Deployment 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of deployment "mysql" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mysql in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Secrete1_1.yaml:4
────────────────────────────────────────
   4 [   name: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Secrete1_1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mysql in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Secrete1_1.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mysql
  17 │         image: mysql:5.7
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 └           valueFrom:
  ..   
────────────────────────────────────────



secret577.yaml (kubernetes)
===========================
Tests: 99 (SUCCESSES: 81, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'secret-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'secret-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'secret-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'secret-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "secret-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret577.yaml:4
────────────────────────────────────────
   4 [   name: secret-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret577.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret577.yaml:6-26
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 └           key: username
  ..   
────────────────────────────────────────



secret608_1.yaml (kubernetes)
=============================
Tests: 99 (SUCCESSES: 81, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'mysecretpod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'mysecretpod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'mysecretpod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'mysecretpod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'mysecretpod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'mysecretpod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'mysecretpod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'mysecretpod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'mysecretpod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'mysecretpod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'mysecretpod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'mysecretpod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "mysecretpod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mysecretpod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret608_1.yaml:4
────────────────────────────────────────
   4 [   name: mysecretpod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysecretpod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret608_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mysecretpod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret608_1.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: main
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - name: certvol
  11 │       mountPath: /etc/nginx/certs
  12 │       readOnly: true
  13 │   volumes:
  14 └   - name: certvol
  ..   
────────────────────────────────────────



secret610.yaml (kubernetes)
===========================
Tests: 99 (SUCCESSES: 82, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'centos-container' of Pod 'centos-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'centos-container' of 'pod' 'centos-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "centos-container" of pod "centos-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod centos-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret610.yaml:4
────────────────────────────────────────
   4 [   name: centos-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container centos-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret610.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod centos-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret610.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - secretRef:
  14 └         name: secret-demo
────────────────────────────────────────



secret611_2.yaml (kubernetes)
=============================
Tests: 99 (SUCCESSES: 80, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret611_2.yaml:4
────────────────────────────────────────
   4 [   name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret611_2.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret611_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────



secret61_2.yaml (kubernetes)
============================
Tests: 99 (SUCCESSES: 80, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret61_2.yaml:4
────────────────────────────────────────
   4 [   name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret61_2.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret61_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: nodejs-env
  18 │         image: khannedy/nodejs-env
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: nodejs-env-config
  24 │         - secretRef:
  25 └             name: nodejs-env-secret
────────────────────────────────────────



secret677_1.yaml (kubernetes)
=============================
Tests: 99 (SUCCESSES: 81, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret677_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-pod
   5 │   labels:
   6 └     app: xyz-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret677_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret677_1.yaml:8-23
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 └         secretKeyRef:
  ..   
────────────────────────────────────────



secret73_1.yaml (kubernetes)
============================
Tests: 99 (SUCCESSES: 80, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'podinfo' of 'deployment' 'podinfo-secret-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-secret-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "podinfo" of deployment "podinfo-secret-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment podinfo-secret-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret73_1.yaml:4
────────────────────────────────────────
   4 [   name: podinfo-secret-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container podinfo-secret-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment podinfo-secret-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret73_1.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 └               key: SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container podinfo in deployment podinfo-secret-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret73_1.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         env:
  19 │         - name: SECRET_KEY
  20 │           valueFrom:
  21 │             secretKeyRef:
  22 │               name: example-secret
  23 │               key: SECRET_KEY
  24 └         - name: ANOTHER_SECRET
  ..   
────────────────────────────────────────



secret73_2.yaml (kubernetes)
============================
Tests: 99 (SUCCESSES: 80, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'podinfo' of 'deployment' 'podinfo-secret-volume' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'podinfo' of Deployment 'podinfo-secret-volume' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'podinfo' of Deployment 'podinfo-secret-volume' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "podinfo" of deployment "podinfo-secret-volume" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment podinfo-secret-volume in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret73_2.yaml:4
────────────────────────────────────────
   4 [   name: podinfo-secret-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container podinfo-secret-volume in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment podinfo-secret-volume in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret73_2.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 │           subPath: config.json
  22 │       volumes:
  23 └       - name: secret-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container podinfo in deployment podinfo-secret-volume (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret73_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: podinfo
  17 │         image: stefanprodan/podinfo:latest
  18 │         volumeMounts:
  19 │         - name: secret-volume
  20 │           mountPath: /etc/secret
  21 └           subPath: config.json
────────────────────────────────────────



secret760_1.yaml (kubernetes)
=============================
Tests: 99 (SUCCESSES: 81, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'silly-demo' of 'deployment' 'silly-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'silly-demo' of Deployment 'silly-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "silly-demo" of deployment "silly-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment silly-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret760_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: silly-demo
   5 │   labels:
   6 └     app.kubernetes.io/name: silly-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container silly-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment silly-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret760_1.yaml:16-31
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container silly-demo in deployment silly-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret760_1.yaml:17-27
────────────────────────────────────────
  17 ┌       - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine
  18 │         name: silly-demo
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         readinessProbe:
  22 │           httpGet:
  23 │             path: /
  24 │             port: 8080
  25 └         volumeMounts:
  ..   
────────────────────────────────────────



secret768_2.yaml (kubernetes)
=============================
Tests: 99 (SUCCESSES: 80, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-env' of 'replicaset' 'nodejs-env' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-env' of ReplicaSet 'nodejs-env' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-env" of replicaset "nodejs-env" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nodejs-env in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret768_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nodejs-env
   5 │   labels:
   6 └     name: nodejs-env
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-env in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nodejs-env in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret768_2.yaml:18-27
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-env in replicaset nodejs-env (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secret768_2.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: nodejs-env
  20 │         image: akhmadwildan/nodejs-env
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         envFrom:
  24 │         - configMapRef:
  25 │             name: nodejs-env-config
  26 │         - secretRef:
  27 └             name: nodejs-env-secret
────────────────────────────────────────



secret828_1.yaml (kubernetes)
=============================
Tests: 99 (SUCCESSES: 81, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secret828_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-pod
   5 │   labels:
   6 └     app: xyz-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret828_1.yaml:9-23
────────────────────────────────────────
   9 ┌   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 │         secretKeyRef:
  17 └           name: my-cred
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secret828_1.yaml:8-23
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: my-container
  10 │     image: mysql
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       valueFrom:
  16 └         secretKeyRef:
  ..   
────────────────────────────────────────



secretdemo_1.yaml (kubernetes)
==============================
Tests: 99 (SUCCESSES: 81, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secretdemo_1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx
   6 └   name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secretdemo_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 │               key: username
  26 └         - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secretdemo_1.yaml:17-38
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: nginx
  19 │         name: nginx
  20 │         env:
  21 │         - name: USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: credencial
  25 └               key: username
  ..   
────────────────────────────────────────



secretreader-deployment.yaml (kubernetes)
=========================================
Tests: 99 (SUCCESSES: 80, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secretreader' of Deployment 'secretreader' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secretreader' of Deployment 'secretreader' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secretreader' of 'deployment' 'secretreader' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secretreader' of Deployment 'secretreader' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secretreader' of Deployment 'secretreader' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secretreader' of Deployment 'secretreader' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secretreader' of Deployment 'secretreader' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secretreader' of Deployment 'secretreader' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secretreader' of Deployment 'secretreader' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secretreader' of Deployment 'secretreader' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secretreader' of Deployment 'secretreader' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secretreader' of Deployment 'secretreader' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secretreader" of deployment "secretreader" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment secretreader in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secretreader-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: secretreader
   5 │   labels:
   6 └     name: secretreader
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secretreader in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment secretreader in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secretreader-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container secretreader in deployment secretreader (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secretreader-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: secretreader
  19 │         image: karthequian/secretreader:latest
  20 │         env:
  21 │         - name: api_key
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 │               name: apikey
  25 └               key: api_key
────────────────────────────────────────



secrets-1.yaml (kubernetes)
===========================
Tests: 99 (SUCCESSES: 81, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secrets-1.yaml:21-24
────────────────────────────────────────
  21 ┌   creationTimestamp: null
  22 │   labels:
  23 │     run: nginx
  24 └   name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-1.yaml:27-32
────────────────────────────────────────
  27 ┌   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 └         mountPath: /etc/foo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-1.yaml:26-38
────────────────────────────────────────
  26 ┌   containers:
  27 │   - image: nginx
  28 │     name: nginx
  29 │     resources: {}
  30 │     volumeMounts:
  31 │       - name: mysecret2
  32 │         mountPath: /etc/foo
  33 │   dnsPolicy: ClusterFirst
  34 └   restartPolicy: Never
  ..   
────────────────────────────────────────



secrets-2.yaml (kubernetes)
===========================
Tests: 99 (SUCCESSES: 81, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secrets-2.yaml:8-11
────────────────────────────────────────
   8 ┌   creationTimestamp: null
   9 │   labels:
  10 │     run: nginx
  11 └   name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-2.yaml:14-22
────────────────────────────────────────
  14 ┌   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 │             name: mysecret2
  22 └             key: username
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-2.yaml:13-24
────────────────────────────────────────
  13 ┌   containers:
  14 │   - image: nginx
  15 │     name: nginx
  16 │     resources: {}
  17 │     env:
  18 │       - name: USERNAME
  19 │         valueFrom:
  20 │           secretKeyRef:
  21 └             name: mysecret2
  ..   
────────────────────────────────────────



secrets-3.yaml (kubernetes)
===========================
Tests: 99 (SUCCESSES: 82, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'consumer' of Pod 'consumer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'consumer' of Pod 'consumer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'consumer' of 'pod' 'consumer' in 'secret-ops' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'consumer' of Pod 'consumer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'consumer' of Pod 'consumer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'consumer' of Pod 'consumer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'consumer' of Pod 'consumer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'consumer' of Pod 'consumer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'consumer' of Pod 'consumer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'consumer' of Pod 'consumer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'consumer' of Pod 'consumer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'consumer' of Pod 'consumer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "consumer" of pod "consumer" in "secret-ops" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container consumer in secret-ops namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-3.yaml:22-30
────────────────────────────────────────
  22 ┌   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 │             name: ext-service-secret
  30 └             key: API_KEY
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod consumer in secret-ops namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-3.yaml:21-32
────────────────────────────────────────
  21 ┌   containers:
  22 │   - image: nginx
  23 │     name: consumer
  24 │     resources: {}
  25 │     env:
  26 │       - name: API_KEY
  27 │         valueFrom:
  28 │           secretKeyRef:
  29 └             name: ext-service-secret
  ..   
────────────────────────────────────────



secrets-4.yaml (kubernetes)
===========================
Tests: 99 (SUCCESSES: 82, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'consumer' of Pod 'consumer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'consumer' of Pod 'consumer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'consumer' of 'pod' 'consumer' in 'secret-ops' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'consumer' of Pod 'consumer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'consumer' of Pod 'consumer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'consumer' of Pod 'consumer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'consumer' of Pod 'consumer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'consumer' of Pod 'consumer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'consumer' of Pod 'consumer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'consumer' of Pod 'consumer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'consumer' of Pod 'consumer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'consumer' of Pod 'consumer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "consumer" of pod "consumer" in "secret-ops" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container consumer in secret-ops namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-4.yaml:23-28
────────────────────────────────────────
  23 ┌   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 └         mountPath: /var/app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod consumer in secret-ops namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-4.yaml:22-35
────────────────────────────────────────
  22 ┌   containers:
  23 │   - image: nginx
  24 │     name: consumer
  25 │     resources: {}
  26 │     volumeMounts:
  27 │       - name: my-secret
  28 │         mountPath: /var/app
  29 │   dnsPolicy: ClusterFirst
  30 └   restartPolicy: Never
  ..   
────────────────────────────────────────



secrets-as-environment-variables.yaml (kubernetes)
==================================================
Tests: 99 (SUCCESSES: 81, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mycontainer' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mycontainer' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mycontainer' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mycontainer" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secrets-as-environment-variables.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-as-environment-variables.yaml:7-19
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 │           key: username
  15 └     - name: DB_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-as-environment-variables.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: mycontainer
   8 │     image: myimage
   9 │     env:
  10 │     - name: DB_USERNAME
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: my-secret
  14 └           key: username
  ..   
────────────────────────────────────────



secrets-as-volumes.yaml (kubernetes)
====================================
Tests: 99 (SUCCESSES: 81, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mycontainer' of Pod 'mypod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mycontainer' of 'pod' 'mypod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mycontainer' of Pod 'mypod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mycontainer' of Pod 'mypod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mycontainer" of pod "mypod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mypod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secrets-as-volumes.yaml:4
────────────────────────────────────────
   4 [   name: mypod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mypod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-as-volumes.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/secrets
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mypod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-as-volumes.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: mycontainer
   8 │     image: myimage
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 │       mountPath: /etc/secrets
  12 │   volumes:
  13 │   - name: secret-volume
  14 │     secret:
  15 └       secretName: my-secret
────────────────────────────────────────



secrets-example.yaml (kubernetes)
=================================
Tests: 98 (SUCCESSES: 96, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'asmr-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"KAFKA_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'asmr-config' in 'default' namespace stores secrets in key(s) or value(s) '{"AUTH_SECRET", "KAFKA_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



secrets-pod-dockerhub.yaml (kubernetes)
=======================================
Tests: 99 (SUCCESSES: 81, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'giropops-autenticado' of Pod 'giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'giropops-autenticado' of Pod 'giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'giropops-autenticado' of 'pod' 'giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'giropops-autenticado' of Pod 'giropops' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'giropops-autenticado' of Pod 'giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'giropops-autenticado' of Pod 'giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'giropops-autenticado' of Pod 'giropops' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'giropops-autenticado' of Pod 'giropops' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'giropops-autenticado' of Pod 'giropops' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'giropops-autenticado' of Pod 'giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'giropops-autenticado' of Pod 'giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "giropops-autenticado" of pod "giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:4
────────────────────────────────────────
   4 [   name: giropops
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: giropops-autenticado
   8 │     image: bebianc/linuxtips-giropops-senhas:7.0
   9 │   imagePullSecrets: # passamos aqui qual Secret vai usar para fazer o pull da imagem
  10 └   - name: secret-dockerhub 
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container giropops-autenticado in pod giropops (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 secrets-pod-dockerhub.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: giropops-autenticado
   8 └     image: bebianc/linuxtips-giropops-senhas:7.0
────────────────────────────────────────



secrets-pod.yaml (kubernetes)
=============================
Tests: 99 (SUCCESSES: 85, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-secret' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secrets-pod.yaml:9-28
────────────────────────────────────────
   9 ┌   - name: nginx-secret
  10 │     image: nginx
  11 │     env: # definindo secret como variável de ambiente dentro do POD
  12 │     - name: USERNAME
  13 │       valueFrom:
  14 │         secretKeyRef: # a referência da chave secret
  15 │           name: secret-opaque # usa o secret já criado
  16 │           key: username # atribui ao username do secret criado, o valor
  17 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-secret' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secrets-pod.yaml:9-28
────────────────────────────────────────
   9 ┌   - name: nginx-secret
  10 │     image: nginx
  11 │     env: # definindo secret como variável de ambiente dentro do POD
  12 │     - name: USERNAME
  13 │       valueFrom:
  14 │         secretKeyRef: # a referência da chave secret
  15 │           name: secret-opaque # usa o secret já criado
  16 │           key: username # atribui ao username do secret criado, o valor
  17 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-secret' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secrets-pod.yaml:9-28
────────────────────────────────────────
   9 ┌   - name: nginx-secret
  10 │     image: nginx
  11 │     env: # definindo secret como variável de ambiente dentro do POD
  12 │     - name: USERNAME
  13 │       valueFrom:
  14 │         secretKeyRef: # a referência da chave secret
  15 │           name: secret-opaque # usa o secret já criado
  16 │           key: username # atribui ao username do secret criado, o valor
  17 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-secret' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secrets-pod.yaml:9-28
────────────────────────────────────────
   9 ┌   - name: nginx-secret
  10 │     image: nginx
  11 │     env: # definindo secret como variável de ambiente dentro do POD
  12 │     - name: USERNAME
  13 │       valueFrom:
  14 │         secretKeyRef: # a referência da chave secret
  15 │           name: secret-opaque # usa o secret já criado
  16 │           key: username # atribui ao username do secret criado, o valor
  17 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-secret' of Pod 'myapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secrets-pod.yaml:9-28
────────────────────────────────────────
   9 ┌   - name: nginx-secret
  10 │     image: nginx
  11 │     env: # definindo secret como variável de ambiente dentro do POD
  12 │     - name: USERNAME
  13 │       valueFrom:
  14 │         secretKeyRef: # a referência da chave secret
  15 │           name: secret-opaque # usa o secret já criado
  16 │           key: username # atribui ao username do secret criado, o valor
  17 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-secret' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secrets-pod.yaml:9-28
────────────────────────────────────────
   9 ┌   - name: nginx-secret
  10 │     image: nginx
  11 │     env: # definindo secret como variável de ambiente dentro do POD
  12 │     - name: USERNAME
  13 │       valueFrom:
  14 │         secretKeyRef: # a referência da chave secret
  15 │           name: secret-opaque # usa o secret já criado
  16 │           key: username # atribui ao username do secret criado, o valor
  17 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-secret' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secrets-pod.yaml:9-28
────────────────────────────────────────
   9 ┌   - name: nginx-secret
  10 │     image: nginx
  11 │     env: # definindo secret como variável de ambiente dentro do POD
  12 │     - name: USERNAME
  13 │       valueFrom:
  14 │         secretKeyRef: # a referência da chave secret
  15 │           name: secret-opaque # usa o secret já criado
  16 │           key: username # atribui ao username do secret criado, o valor
  17 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-secret' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secrets-pod.yaml:9-28
────────────────────────────────────────
   9 ┌   - name: nginx-secret
  10 │     image: nginx
  11 │     env: # definindo secret como variável de ambiente dentro do POD
  12 │     - name: USERNAME
  13 │       valueFrom:
  14 │         secretKeyRef: # a referência da chave secret
  15 │           name: secret-opaque # usa o secret já criado
  16 │           key: username # atribui ao username do secret criado, o valor
  17 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secrets-pod.yaml:9-28
────────────────────────────────────────
   9 ┌   - name: nginx-secret
  10 │     image: nginx
  11 │     env: # definindo secret como variável de ambiente dentro do POD
  12 │     - name: USERNAME
  13 │       valueFrom:
  14 │         secretKeyRef: # a referência da chave secret
  15 │           name: secret-opaque # usa o secret já criado
  16 │           key: username # atribui ao username do secret criado, o valor
  17 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-secret" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secrets-pod.yaml:9-28
────────────────────────────────────────
   9 ┌   - name: nginx-secret
  10 │     image: nginx
  11 │     env: # definindo secret como variável de ambiente dentro do POD
  12 │     - name: USERNAME
  13 │       valueFrom:
  14 │         secretKeyRef: # a referência da chave secret
  15 │           name: secret-opaque # usa o secret já criado
  16 │           key: username # atribui ao username do secret criado, o valor
  17 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secrets-pod.yaml:9-28
────────────────────────────────────────
   9 ┌   - name: nginx-secret
  10 │     image: nginx
  11 │     env: # definindo secret como variável de ambiente dentro do POD
  12 │     - name: USERNAME
  13 │       valueFrom:
  14 │         secretKeyRef: # a referência da chave secret
  15 │           name: secret-opaque # usa o secret já criado
  16 │           key: username # atribui ao username do secret criado, o valor
  17 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secrets-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myapp
   5 │   labels:
   6 └     name: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-pod.yaml:9-28
────────────────────────────────────────
   9 ┌   - name: nginx-secret
  10 │     image: nginx
  11 │     env: # definindo secret como variável de ambiente dentro do POD
  12 │     - name: USERNAME
  13 │       valueFrom:
  14 │         secretKeyRef: # a referência da chave secret
  15 │           name: secret-opaque # usa o secret já criado
  16 │           key: username # atribui ao username do secret criado, o valor
  17 └     - name: PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets-pod.yaml:8-28
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-secret
  10 │     image: nginx
  11 │     env: # definindo secret como variável de ambiente dentro do POD
  12 │     - name: USERNAME
  13 │       valueFrom:
  14 │         secretKeyRef: # a referência da chave secret
  15 │           name: secret-opaque # usa o secret já criado
  16 └           key: username # atribui ao username do secret criado, o valor
  ..   
────────────────────────────────────────



secrets166_1.yaml (kubernetes)
==============================
Tests: 98 (SUCCESSES: 97, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'app-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"LOGGING_LEVEL"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



secrets166_4.yaml (kubernetes)
==============================
Tests: 99 (SUCCESSES: 82, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'app-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secrets166_4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: app-deployment
   5 │   labels:
   6 └     app: app-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets166_4.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 │           valueFrom:
  26 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets166_4.yaml:17-41
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: app
  19 │         image: app:1.0.0
  20 │         ports:
  21 │         - containerPort: 5000
  22 │           name: http
  23 │         env:
  24 │         - name: LOGGING_LEVEL_APP
  25 └           valueFrom:
  ..   
────────────────────────────────────────



secrets243.yaml (kubernetes)
============================
Tests: 99 (SUCCESSES: 83, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secrets' of Deployment 'secrets' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secrets' of Deployment 'secrets' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secrets' of 'deployment' 'secrets' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secrets' of Deployment 'secrets' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secrets' of Deployment 'secrets' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secrets' of Deployment 'secrets' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secrets' of Deployment 'secrets' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secrets' of Deployment 'secrets' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secrets' of Deployment 'secrets' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secrets' of Deployment 'secrets' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secrets" of deployment "secrets" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment secrets in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secrets243.yaml:4
────────────────────────────────────────
   4 [   name: secrets
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secrets in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets243.yaml:19-36
────────────────────────────────────────
  19 ┌       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 │           - mountPath: /etc/secrets
  23 │             name: secret-1
  24 │         env:
  25 │           - name: AMIGOSCODE_SECRET
  26 │             valueFrom:
  27 └               secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment secrets in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets243.yaml:14-36
────────────────────────────────────────
  14 ┌       volumes:
  15 │         - name: secret-1
  16 │           secret:
  17 │             secretName: mysecret
  18 │       containers:
  19 │       - name: secrets
  20 │         image: busybox
  21 │         volumeMounts:
  22 └           - mountPath: /etc/secrets
  ..   
────────────────────────────────────────



secrets261.yaml (kubernetes)
============================
Tests: 99 (SUCCESSES: 81, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'secret-container-devops' of Pod 'secret-devops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'secret-container-devops' of Pod 'secret-devops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'secret-container-devops' of 'pod' 'secret-devops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret-container-devops' of Pod 'secret-devops' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'secret-container-devops' of Pod 'secret-devops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secret-container-devops' of Pod 'secret-devops' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'secret-container-devops' of Pod 'secret-devops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret-container-devops' of Pod 'secret-devops' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret-container-devops' of Pod 'secret-devops' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret-container-devops' of Pod 'secret-devops' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret-container-devops' of Pod 'secret-devops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret-container-devops' of Pod 'secret-devops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "secret-container-devops" of pod "secret-devops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod secret-devops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 secrets261.yaml:4-6
────────────────────────────────────────
   4 ┌   name: secret-devops
   5 │   labels:
   6 └     name: centos
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container secret-devops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets261.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 │     - containerPort: 8080
  17 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod secret-devops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 secrets261.yaml:8-23
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: secret-container-devops
  10 │     image: centos:latest
  11 │     command:
  12 │     - /bin/sh
  13 │     - -c
  14 │     - sleep infinity
  15 │     ports:
  16 └     - containerPort: 8080
  ..   
────────────────────────────────────────


