
Report Summary

┌───────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                        Target                         │    Type    │ Misconfigurations │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress-alb.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress-argocd-server.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ image_in_csi-plugin.yaml                              │ kubernetes │        33         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ image_in_manager.yaml                                 │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ image_metrics_service.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ image_with_legacy_cnb_service_bindings_2.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ image_with_legacy_cnb_service_bindings_3.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ image_with_service_bindings_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ imgproxy-service.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ imgproxy.yaml                                         │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ imgproxy1.yaml                                        │ kubernetes │        16         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ imgproxy_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ immediate-sc.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ immich-postgres-pvc.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ immich-pvc.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ immich-pvc_1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ immich-secret.sops.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ immich4.yaml                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ immich7.yaml                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ immich8_1.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ in-e-gress.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ inaccel.yaml                                          │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ incorrect-port-name-external-name-service-type.yaml   │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ incorrect-port-name-external-name-service-type_1.yaml │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ incorrect-port-name-external-name-service-type_2.yaml │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ increase_replicas_patch.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ increase_replicas_v1.yaml                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ increase_replicas_v11.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ index-gen-deploy.yaml                                 │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ index-gen-deploy1.yaml                                │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ index-html-configmap.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ index-html-configmap1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexapi.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexapi_1.yaml                                       │ kubernetes │        15         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexed_job.yaml                                      │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-api-svc.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-api-svc1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-api-svc2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-api-svc3.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-api-svc4.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-api-svc5.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-cred-secret.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-cred-secret1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-cred-secret2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-cred-secret3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-cred-secret4.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-resources.yaml                                │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-resources1.yaml                               │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-resources2.yaml                               │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-resources3.yaml                               │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-resources4.yaml                               │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-resources5.yaml                               │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-resources6.yaml                               │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-resources7.yaml                               │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-resources8.yaml                               │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-resources9.yaml                               │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-sts.yaml                                      │ kubernetes │        43         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-sts1.yaml                                     │ kubernetes │        43         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-sts2.yaml                                     │ kubernetes │        43         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-sts3.yaml                                     │ kubernetes │        43         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-sts4.yaml                                     │ kubernetes │        43         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-sts5.yaml                                     │ kubernetes │        41         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-svc.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-svc1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-svc2.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-svc3.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-svc4.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer-svc5.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer_config.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer_config1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer_config2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer_config3.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer_config4.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer_config5.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer_config6.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer_config7.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer_deployment.yaml                               │ kubernetes │         8         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ indexer_deployment1.yaml                              │ kubernetes │         8         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infer-deployment.yaml                                 │ kubernetes │        34         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infer.yaml                                            │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infer1.yaml                                           │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infer1_1.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infer2.yaml                                           │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ inference-cloud.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ inference.yaml                                        │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ inference1.yaml                                       │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ inference2.yaml                                       │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ inference3.yaml                                       │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ inference4.yaml                                       │ kubernetes │        35         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ inference5.yaml                                       │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influx-ingress.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-cm.yaml                                      │ kubernetes │         2         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-deployment.yaml                              │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-deployment1.yaml                             │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-deployment3.yaml                             │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-deployment4.yaml                             │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-grafana-controller.yaml                      │ kubernetes │        23         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-grafana-controller1.yaml                     │ kubernetes │        23         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-pvc.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-pvc1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-secrets.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-service.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-service1.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-service2.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-service3.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-service4.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-service5.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-service6.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-service7.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-setup.yaml                                   │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb-setup1.yaml                                  │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb1.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb10.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb10_1.yaml                                     │ kubernetes │        16         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb10_2.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb1_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb1_2.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb1_3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb1_4.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb1_5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb1_6.yaml                                      │ kubernetes │        15         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb3.yaml                                        │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb3_1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb4.yaml                                        │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb4_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb6.yaml                                        │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb6_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb7.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb8_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb9_1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_1.yaml                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_2.yaml                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_3.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_4.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_5.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_6.yaml                                       │ kubernetes │        15         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_deployment_all.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_deployment_all_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_deployment_all_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_deployment_all_3.yaml                        │ kubernetes │        16         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_deployment_all_4.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_deployment_all_5.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_editor_role.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ influxdb_viewer_role.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ info-service-v1.yaml                                  │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ info-service-v11.yaml                                 │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infra-deploy.yaml                                     │ kubernetes │        14         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infra-deploy1.yaml                                    │ kubernetes │        15         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infra-deploy1_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infra-deploy_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infra-deploy_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infra-develop1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infra-develop1_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infra-develop1_2.yaml                                 │ kubernetes │        14         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infra-develop1_3.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infra-hpa.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infra_logs.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infra_logs1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infrastructure-labels-annotations_1.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infrastructure-labels-annotations_3.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infrastructure11.yaml                                 │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infrastructure11_1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infrastructure12.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infrastructure12_1.yaml                               │ kubernetes │        18         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ infrastructure9.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-api.yaml                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-api1.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-dep1.yaml                                         │ kubernetes │        20         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-dep1_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-dep2.yaml                                         │ kubernetes │        20         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-dep2_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-dep3.yaml                                         │ kubernetes │        20         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-dep3_1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-goapp.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-nginx.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-nginx1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-nginx2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-nginx3.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-service.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-tls.yaml                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing-wordpress.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.api-example-com.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.api-example-com1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada-example-com.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada-example-com1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada-ssl-passthrough.nginx.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada-ssl-passthrough.nginx1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.affinity-gke.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.affinity-gke1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.affinity-gke1_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.affinity-gke_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.affinity-nginx.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.affinity-nginx1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.defaultBackend.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.defaultBackend1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.implementationSpecific.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.implementationSpecific1.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.ingressClassName.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.ingressClassName1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.tls.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.tls1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.wildcard.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.wildcard1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada10.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada11.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada3.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada4.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada5.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada6.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada7.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada8.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.kiada9.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.resource-backend-example.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.resource-backend-example1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing1.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing10.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing100.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing101.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing102.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing103.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing104.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing105.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing106.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing107.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing108.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing109.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing11.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing110.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing12.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing120.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing13.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing130.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing131.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing132.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing133.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing134.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing135.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing136.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing137.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing138.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing139.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing14.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing140.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing141.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing142.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing143.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing144.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing145.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing146.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing147.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing148.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing149.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing15.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing150.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing151.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing152.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing153.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing154.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing155.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing156.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing157.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing158.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing159.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing16.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing160.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing161.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing162.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing163.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing164.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing165.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing166.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing167.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing168.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing169.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing17.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing170.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing171.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing172.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing173.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing174.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing175.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing176.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing18.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing19.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing2.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing20.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing21.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing22.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing23.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing24.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing25.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing26.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing27.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing28.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing29.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing3.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing30.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing31.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing32.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing33.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing34.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing35.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing4.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing45.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing46.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing47.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing48.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing49.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing5.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing50.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing51.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing52.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing53.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing54.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing55.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing56.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing57.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing58.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing59.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing6.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing60.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing61.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing62.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing63.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing64.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing65.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing66.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing67.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing68.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing69.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing7.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing70.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing71.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing72.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing74.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing8.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing84.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing85.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing86.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing87.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing88.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing89.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing9.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing90.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing91.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing92.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing93.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing94.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing95.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing96.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing97.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing98.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ing99.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingree.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingree1.yaml                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-1.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-10-affinity-cookie.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-11-upstream-hashing.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-11.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-12.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-13-limite-com-rps.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-13.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-14.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-15.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-16.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-2.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-21.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-22.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-23.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-24.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-25.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-3.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-31.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-32.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-33.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-34.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-35.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-4.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-41.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-42.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-43.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-44.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-45.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-4k.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-4k1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-5.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-51.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-52.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-53.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-6-eks-affinity-cookie copy.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-6-eks-canary-deploy.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-6-eks-rate-limit.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-6-eks-upstream-hashing.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-6-eks.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-6-eks1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-6-para-eks-aws.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-6.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-7-para-eks-aws-com-dominio-valido.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-7-para-eks-aws-com-dominio-valido1.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-8-cert-manager-e-https.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-9-com-autenticacao.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-annotation-failover-simple.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-annotation-failover.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-annotation-rr.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache_10.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache_11.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache_12.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache_13.yaml                                │ kubernetes │         8         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache_2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache_3.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache_4.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache_5.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache_6.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache_7.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache_8.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-apache_9.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-api-gateway.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-app-1-nginx.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-app-1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-app-2-nginx.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-app-2.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-app1.yaml                                     │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-app11.yaml                                    │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-app11_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-app1_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-app2.yaml                                     │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-app21.yaml                                    │ kubernetes │        19         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-app21_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-app2_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-app3.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad10.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad10_1.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad10_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad10_3.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad10_4.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad10_5.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad10_6.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad11.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad11_1.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad11_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad11_3.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad11_4.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad11_5.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad11_6.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad12.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad12_1.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad12_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad12_3.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad12_4.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad12_5.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad12_6.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad1_1.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad1_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad1_3.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad1_4.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad1_5.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad1_6.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad2_1.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad2_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad2_3.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad2_4.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad2_5.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad2_6.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad3.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad3_1.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad3_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad3_3.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad3_4.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad3_5.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad3_6.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad4.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad4_1.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad4_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad4_3.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad4_4.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad4_5.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad4_6.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad5.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad5_1.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad5_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad5_3.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad5_4.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad5_5.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad5_6.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad6.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad6_1.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad6_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad6_3.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad6_4.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad6_5.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad6_6.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad7.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad7_1.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad7_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad7_3.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad7_4.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad7_5.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad7_6.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad8.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad8_1.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad8_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad8_3.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad8_4.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad8_5.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad8_6.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad9.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad9_1.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad9_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad9_3.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad9_4.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad9_5.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad9_6.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad_1.yaml                       │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad_2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad_3.yaml                       │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad_4.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad_5.yaml                       │ kubernetes │        17         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-application-ckad_6.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-argo.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-argocd.test.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-argocd.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-autenticado.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-autenticado1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-authentik.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-authentik_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-authentik_2.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-aws.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-backend-srv.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-backend.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-backend1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-backend11.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-backend2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-backend3.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad10.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad10_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad11.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad11_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad12.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad12_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad13.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad13_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad13_2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad14.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad14_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad15.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad15_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad16.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad16_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad16_2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad17.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad17_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad17_2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad17_3.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad18.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad18_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad19.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad19_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad1_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad1_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad1_3.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad2.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad20.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad20_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad21.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad21_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad21_2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad22.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad22_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad23.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad23_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad24.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad24_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad24_2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad25.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad25_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad25_2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad25_3.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad26.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad26_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad27.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad27_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad28.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad28_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad29.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad29_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad29_2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad2_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad3.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad30.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad30_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad31.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad31_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad32.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad32_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad32_2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad33.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad33_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad33_2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad33_3.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad34.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad34_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad35.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad35_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad36.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad36_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad37.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad37_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad37_2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad38.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad38_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad39.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad39_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad3_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad4.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad4_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad5.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad5_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad5_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad6.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad6_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad7.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad7_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad8.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad8_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad8_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad9.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad9_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad9_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad9_3.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-bad_2.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-basic.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-basic1.yaml                                   │ kubernetes │        20         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-basic1_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-basic1_2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-basic1_3.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-blue.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-canary.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-canary1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-canary2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-canary3.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-casdoor.test.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-catalog.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-catalog1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class10.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class11.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class12.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class13.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class14.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class17.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class18.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class19_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class20.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class21.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class2_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class5_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class6.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class8_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-class9.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-clusterip-with-tls.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-clusterip.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-cm.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-coit-frontend.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-config-cm.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-configmap.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-consul.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-consul_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-consul_2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-consul_3.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_10.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_11.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_12.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_13.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_14.yaml                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_15.yaml                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_16.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_17.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_3.yaml                      │ kubernetes │         3         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_4.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_5.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_6.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_7.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_8.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad10_9.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_10.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_11.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_12.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_13.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_14.yaml                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_15.yaml                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_16.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_17.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_3.yaml                      │ kubernetes │         3         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_4.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_5.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_6.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_7.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_8.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad11_9.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_10.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_11.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_12.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_13.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_14.yaml                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_15.yaml                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_16.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_17.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_3.yaml                      │ kubernetes │         3         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_4.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_5.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_6.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_7.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_8.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad12_9.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_10.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_11.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_12.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_13.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_14.yaml                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_15.yaml                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_16.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_17.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_3.yaml                       │ kubernetes │         3         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_4.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_5.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_6.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_7.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_8.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad1_9.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_10.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_11.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_12.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_13.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_14.yaml                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_15.yaml                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_16.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_17.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_3.yaml                       │ kubernetes │         3         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_4.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_5.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_6.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_7.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_8.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad2_9.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_10.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_11.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_12.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_13.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_14.yaml                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_15.yaml                      │ kubernetes │        13         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_16.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_17.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_3.yaml                       │ kubernetes │         3         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_4.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_5.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_6.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_7.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_8.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad3_9.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_10.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_11.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_12.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_13.yaml                      │ kubernetes │         0         │
└───────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


image_in_csi-plugin.yaml (kubernetes)
=====================================
Tests: 131 (SUCCESSES: 98, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'node-driver-registrar' of DaemonSet 'csi-nodeplugin-fluid' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'plugins' of DaemonSet 'csi-nodeplugin-fluid' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'node-driver-registrar' of DaemonSet 'csi-nodeplugin-fluid' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'plugins' of DaemonSet 'csi-nodeplugin-fluid' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'node-driver-registrar' of 'daemonset' 'csi-nodeplugin-fluid' in 'fluid-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'plugins' of 'daemonset' 'csi-nodeplugin-fluid' in 'fluid-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'node-driver-registrar' of DaemonSet 'csi-nodeplugin-fluid' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'plugins' of DaemonSet 'csi-nodeplugin-fluid' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'node-driver-registrar' of DaemonSet 'csi-nodeplugin-fluid' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'plugins' of DaemonSet 'csi-nodeplugin-fluid' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'node-driver-registrar' of DaemonSet 'csi-nodeplugin-fluid' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'plugins' of DaemonSet 'csi-nodeplugin-fluid' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'node-driver-registrar' of DaemonSet 'csi-nodeplugin-fluid' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'plugins' of DaemonSet 'csi-nodeplugin-fluid' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'node-driver-registrar' of DaemonSet 'csi-nodeplugin-fluid' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'plugins' of DaemonSet 'csi-nodeplugin-fluid' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'node-driver-registrar' of DaemonSet 'csi-nodeplugin-fluid' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'plugins' of DaemonSet 'csi-nodeplugin-fluid' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'node-driver-registrar' of DaemonSet 'csi-nodeplugin-fluid' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'plugins' of DaemonSet 'csi-nodeplugin-fluid' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'node-driver-registrar' of DaemonSet 'csi-nodeplugin-fluid' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'plugins' of DaemonSet 'csi-nodeplugin-fluid' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "node-driver-registrar" of daemonset "csi-nodeplugin-fluid" in "fluid-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "plugins" of daemonset "csi-nodeplugin-fluid" in "fluid-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container csi-nodeplugin-fluid in fluid-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container csi-nodeplugin-fluid in fluid-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset csi-nodeplugin-fluid in fluid-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 image_in_csi-plugin.yaml:9-14
────────────────────────────────────────
   9 ┌       containers:
  10 │         # change the following two images if necessary
  11 │         - name: node-driver-registrar
  12 │           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
  13 │         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container node-driver-registrar in daemonset csi-nodeplugin-fluid (namespace: fluid-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 image_in_csi-plugin.yaml:11-12
────────────────────────────────────────
  11 ┌         - name: node-driver-registrar
  12 └           image: registry.cn-hangzhou.aliyuncs.com/acs/csi-node-driver-registrar:v1.2.0
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container plugins in daemonset csi-nodeplugin-fluid (namespace: fluid-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 image_in_csi-plugin.yaml:13-14
────────────────────────────────────────
  13 ┌         - name: plugins
  14 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/fluid-csi:v0.1.0-b389ba2
────────────────────────────────────────



image_in_manager.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'manager' of Deployment 'controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'manager' of 'deployment' 'controller-manager' in 'fluid-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "manager" of deployment "controller-manager" in "fluid-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container controller-manager in fluid-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment controller-manager in fluid-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 image_in_manager.yaml:9-12
────────────────────────────────────────
   9 ┌       containers:
  10 │         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment controller-manager (namespace: fluid-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 image_in_manager.yaml:10-12
────────────────────────────────────────
  10 ┌         - name: manager
  11 │           # change the following image if necessary
  12 └           image: registry.cn-hangzhou.aliyuncs.com/fluid/runtime-controller:v0.1.0-b389ba2
────────────────────────────────────────



imgproxy.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'supabase-imgproxy' of Deployment 'supabase-imgproxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'supabase-imgproxy' of Deployment 'supabase-imgproxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'supabase-imgproxy' of 'deployment' 'supabase-imgproxy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'supabase-imgproxy' of Deployment 'supabase-imgproxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'supabase-imgproxy' of Deployment 'supabase-imgproxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'supabase-imgproxy' of Deployment 'supabase-imgproxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'supabase-imgproxy' of Deployment 'supabase-imgproxy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'supabase-imgproxy' of Deployment 'supabase-imgproxy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'supabase-imgproxy' of Deployment 'supabase-imgproxy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'supabase-imgproxy' of Deployment 'supabase-imgproxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'supabase-imgproxy' of Deployment 'supabase-imgproxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "supabase-imgproxy" of deployment "supabase-imgproxy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment supabase-imgproxy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 imgproxy.yaml:4
────────────────────────────────────────
   4 [   name: supabase-imgproxy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container supabase-imgproxy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment supabase-imgproxy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 imgproxy.yaml:15-35
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 └         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container supabase-imgproxy in deployment supabase-imgproxy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 imgproxy.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: supabase-imgproxy
  17 │         image: darthsim/imgproxy:v3.8.0
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: IMGPROXY_BIND
  22 │           value: :5001
  23 │         - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
  24 └           value: /
  ..   
────────────────────────────────────────



imgproxy1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'imageproxy' of Deployment 'imgproxy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'imageproxy' of Deployment 'imgproxy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'imageproxy' of 'deployment' 'imgproxy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'imageproxy' of Deployment 'imgproxy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'imageproxy' of Deployment 'imgproxy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'imageproxy' of Deployment 'imgproxy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'imageproxy' of Deployment 'imgproxy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'imageproxy' of Deployment 'imgproxy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'imageproxy' of Deployment 'imgproxy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "imageproxy" of deployment "imgproxy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment imgproxy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 imgproxy1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: imgproxy
   5 │   labels:
   6 └     app: imgproxy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container imgproxy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment imgproxy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 imgproxy1.yaml:17-31
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 └             value: '32'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container imageproxy in deployment imgproxy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 imgproxy1.yaml:18-31
────────────────────────────────────────
  18 ┌         - name: imageproxy
  19 │           image: darthsim/imgproxy
  20 │           ports:
  21 │             - containerPort: 8080
  22 │               protocol: TCP
  23 │           env:
  24 │           - name: IMGPROXY_MAX_SRC_RESOLUTION
  25 │             value: '32'
  26 └           resources:
  ..   
────────────────────────────────────────



immich8_1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'immich' in 'media' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



inaccel.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inaccel-vadd' of Pod 'inaccel-vadd' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inaccel-vadd' of Pod 'inaccel-vadd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inaccel-vadd' of 'pod' 'inaccel-vadd' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inaccel-vadd' of Pod 'inaccel-vadd' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inaccel-vadd' of Pod 'inaccel-vadd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'inaccel-vadd' of Pod 'inaccel-vadd' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inaccel-vadd' of Pod 'inaccel-vadd' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inaccel-vadd' of Pod 'inaccel-vadd' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inaccel-vadd' of Pod 'inaccel-vadd' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inaccel-vadd' of Pod 'inaccel-vadd' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inaccel-vadd' of Pod 'inaccel-vadd' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inaccel-vadd' of Pod 'inaccel-vadd' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inaccel-vadd" of pod "inaccel-vadd" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod inaccel-vadd in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 inaccel.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     inaccel/cli: |
   6 │       bitstream install https://store.inaccel.com/artifactory/bitstreams/xilinx/aws-vu9p-f1/dynamic-shell/aws/vector/1/1addition
   7 │   labels:
   8 │     inaccel/fpga: enabled
   9 └   name: inaccel-vadd
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container inaccel-vadd in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod inaccel-vadd in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inaccel.yaml:11-19
────────────────────────────────────────
  11 ┌   containers:
  12 │   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 │         xilinx/aws-vu9p-f1: 1
  17 │   nodeSelector:
  18 │     xilinx/aws-vu9p-f1: dynamic-shell
  19 └   restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container inaccel-vadd in pod inaccel-vadd (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 inaccel.yaml:12-16
────────────────────────────────────────
  12 ┌   - image: docker.io/inaccel/vadd
  13 │     name: inaccel-vadd
  14 │     resources:
  15 │       limits:
  16 └         xilinx/aws-vu9p-f1: 1
────────────────────────────────────────



incorrect-port-name-external-name-service-type.yaml (kubernetes)
================================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'nginx' in 'nginx-ns' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



incorrect-port-name-external-name-service-type_1.yaml (kubernetes)
==================================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'nginx-svc2' in 'nginx-ns2' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



incorrect-port-name-external-name-service-type_2.yaml (kubernetes)
==================================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'nginx-svc3' in 'nginx-ns3' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



increase_replicas_patch.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment my-nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 increase_replicas_patch.yaml:4
────────────────────────────────────────
   4 [   name: my-nginx
────────────────────────────────────────



increase_replicas_v1.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment hello-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 increase_replicas_v1.yaml:4
────────────────────────────────────────
   4 [   name: hello-v1
────────────────────────────────────────



increase_replicas_v11.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment hello-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 increase_replicas_v11.yaml:4
────────────────────────────────────────
   4 [   name: hello-v1
────────────────────────────────────────



index-gen-deploy.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'index-generator' of Deployment 'index-generator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'index-generator' of Deployment 'index-generator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'index-generator' of 'deployment' 'index-generator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'index-generator' of Deployment 'index-generator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'index-generator' of Deployment 'index-generator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'index-generator' of Deployment 'index-generator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'index-generator' of Deployment 'index-generator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'index-generator' of Deployment 'index-generator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'index-generator' of Deployment 'index-generator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'index-generator' of Deployment 'index-generator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'index-generator' of Deployment 'index-generator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "index-generator" of deployment "index-generator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment index-generator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 index-gen-deploy.yaml:4
────────────────────────────────────────
   4 [   name: index-generator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container index-generator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 index-gen-deploy.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment index-generator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 index-gen-deploy.yaml:15-36
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 └         - name: AWS_ACCESS_KEY_ID
  ..   
────────────────────────────────────────



index-gen-deploy1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'index-generator' of Deployment 'index-generator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'index-generator' of Deployment 'index-generator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'index-generator' of 'deployment' 'index-generator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'index-generator' of Deployment 'index-generator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'index-generator' of Deployment 'index-generator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'index-generator' of Deployment 'index-generator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'index-generator' of Deployment 'index-generator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'index-generator' of Deployment 'index-generator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'index-generator' of Deployment 'index-generator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'index-generator' of Deployment 'index-generator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'index-generator' of Deployment 'index-generator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "index-generator" of deployment "index-generator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment index-generator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 index-gen-deploy1.yaml:4
────────────────────────────────────────
   4 [   name: index-generator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container index-generator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 index-gen-deploy1.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 │         - name: AWS_ACCESS_KEY_ID
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment index-generator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 index-gen-deploy1.yaml:15-36
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: index-generator
  17 │         image: python:alpine
  18 │         command: ["sh", "-c", "apk add --no-cache py3-pip && pip install boto3 && python /scripts/index_generator.py"]
  19 │         volumeMounts:
  20 │         - name: script-volume
  21 │           mountPath: /scripts
  22 │         env:
  23 └         - name: AWS_ACCESS_KEY_ID
  ..   
────────────────────────────────────────



indexapi_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'indexapi' of Deployment 'indexapi-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexapi_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 │         - name: ELASTIC_USERNAME
  26 └           value: elastic
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'indexapi' of Deployment 'indexapi-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexapi_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 │         - name: ELASTIC_USERNAME
  26 └           value: elastic
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'indexapi' of 'deployment' 'indexapi-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexapi_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 │         - name: ELASTIC_USERNAME
  26 └           value: elastic
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'indexapi' of Deployment 'indexapi-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexapi_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 │         - name: ELASTIC_USERNAME
  26 └           value: elastic
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'indexapi' of Deployment 'indexapi-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexapi_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 │         - name: ELASTIC_USERNAME
  26 └           value: elastic
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'indexapi' of Deployment 'indexapi-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexapi_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 │         - name: ELASTIC_USERNAME
  26 └           value: elastic
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'indexapi' of Deployment 'indexapi-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexapi_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 │         - name: ELASTIC_USERNAME
  26 └           value: elastic
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'indexapi' of Deployment 'indexapi-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexapi_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 │         - name: ELASTIC_USERNAME
  26 └           value: elastic
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexapi_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 │         - name: ELASTIC_USERNAME
  26 └           value: elastic
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "indexapi" of deployment "indexapi-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexapi_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 │         - name: ELASTIC_USERNAME
  26 └           value: elastic
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexapi_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 │         - name: ELASTIC_USERNAME
  26 └           value: elastic
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment indexapi-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 indexapi_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: indexapi-deployment
   5 │   labels:
   6 └     app: indexapi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container indexapi-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexapi_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 │         - name: ELASTIC_USERNAME
  26 └           value: elastic
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment indexapi-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexapi_1.yaml:17-39
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 └         - name: ELASTIC_USERNAME
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container indexapi in deployment indexapi-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 indexapi_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: indexapi
  19 │         image: rasmuskibshede/indexelasticsearch:latest
  20 │         ports:
  21 │         - containerPort: 3001
  22 │         env:
  23 │         - name: ELASTIC_HOST
  24 │           value: http://elasticsearch:9200
  25 │         - name: ELASTIC_USERNAME
  26 └           value: elastic
  ..   
────────────────────────────────────────



indexed_job.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'worker' of Job 'echo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'worker' of Job 'echo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'worker' of 'job' 'echo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'worker' of Job 'echo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'worker' of Job 'echo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'worker' of Job 'echo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'worker' of Job 'echo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'worker' of Job 'echo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'worker' of Job 'echo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'worker' of Job 'echo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'worker' of Job 'echo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'worker' of Job 'echo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "worker" of job "echo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): job echo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 indexed_job.yaml:4
────────────────────────────────────────
   4 [   name: echo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container echo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job echo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexed_job.yaml:14-18
────────────────────────────────────────
  14 ┌       restartPolicy: Never
  15 │       containers:
  16 │       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container worker in job echo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 indexed_job.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: 'worker'
  17 │         image: 'docker.io/library/busybox'
  18 └         command: ["echo", "render frame: $(JOB_COMPLETION_INDEX)"]
────────────────────────────────────────



indexer-resources.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-resources.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-resources.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wazuh-indexer' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-resources.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-resources.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-resources.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-resources.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-resources.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-resources.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-resources.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wazuh-indexer" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-resources.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-resources.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wazuh-indexer in wazuh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset wazuh-indexer in wazuh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources.yaml:16-24
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────



indexer-resources1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-resources1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-resources1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wazuh-indexer' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-resources1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-resources1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-resources1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-resources1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-resources1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-resources1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-resources1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wazuh-indexer" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-resources1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-resources1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wazuh-indexer in wazuh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset wazuh-indexer in wazuh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources1.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────



indexer-resources2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-resources2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-resources2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wazuh-indexer' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-resources2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-resources2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-resources2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-resources2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-resources2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-resources2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-resources2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wazuh-indexer" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-resources2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-resources2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wazuh-indexer in wazuh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources2.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset wazuh-indexer in wazuh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources2.yaml:16-24
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────



indexer-resources3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-resources3.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-resources3.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wazuh-indexer' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-resources3.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-resources3.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-resources3.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-resources3.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-resources3.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-resources3.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-resources3.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wazuh-indexer" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-resources3.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-resources3.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wazuh-indexer in wazuh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources3.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset wazuh-indexer in wazuh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources3.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────



indexer-resources4.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-resources4.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-resources4.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wazuh-indexer' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-resources4.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-resources4.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-resources4.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-resources4.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-resources4.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-resources4.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-resources4.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wazuh-indexer" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-resources4.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-resources4.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wazuh-indexer in wazuh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources4.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset wazuh-indexer in wazuh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources4.yaml:16-24
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────



indexer-resources5.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-resources5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-resources5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wazuh-indexer' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-resources5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-resources5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-resources5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-resources5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-resources5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-resources5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-resources5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wazuh-indexer" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-resources5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-resources5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wazuh-indexer in wazuh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources5.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset wazuh-indexer in wazuh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources5.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────



indexer-resources6.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-resources6.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: fortishield-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-resources6.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: fortishield-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fortishield-indexer' of 'statefulset' 'fortishield-indexer' in 'fortishield' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-resources6.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: fortishield-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-resources6.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: fortishield-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-resources6.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: fortishield-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-resources6.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: fortishield-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-resources6.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: fortishield-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-resources6.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: fortishield-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-resources6.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: fortishield-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fortishield-indexer" of statefulset "fortishield-indexer" in "fortishield" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-resources6.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: fortishield-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-resources6.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: fortishield-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container fortishield-indexer in fortishield namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources6.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: fortishield-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset fortishield-indexer in fortishield namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources6.yaml:16-24
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: fortishield-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────



indexer-resources7.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-resources7.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: fortishield-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-resources7.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: fortishield-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fortishield-indexer' of 'statefulset' 'fortishield-indexer' in 'fortishield' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-resources7.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: fortishield-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-resources7.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: fortishield-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-resources7.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: fortishield-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-resources7.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: fortishield-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-resources7.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: fortishield-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-resources7.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: fortishield-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-resources7.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: fortishield-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fortishield-indexer" of statefulset "fortishield-indexer" in "fortishield" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-resources7.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: fortishield-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-resources7.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: fortishield-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container fortishield-indexer in fortishield namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources7.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: fortishield-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset fortishield-indexer in fortishield namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources7.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: fortishield-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────



indexer-resources8.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-resources8.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-resources8.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wazuh-indexer' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-resources8.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-resources8.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-resources8.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-resources8.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-resources8.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-resources8.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-resources8.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wazuh-indexer" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-resources8.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-resources8.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wazuh-indexer in wazuh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources8.yaml:17-24
────────────────────────────────────────
  17 ┌         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset wazuh-indexer in wazuh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources8.yaml:16-24
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: wazuh-indexer
  18 │           resources:
  19 │             requests:
  20 │               cpu: 500m
  21 │               memory: 1Gi
  22 │             limits:
  23 │               cpu: 1
  24 └               memory: 2Gi
────────────────────────────────────────



indexer-resources9.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-resources9.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-resources9.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wazuh-indexer' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-resources9.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-resources9.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-resources9.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-resources9.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-resources9.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-resources9.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-resources9.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wazuh-indexer" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-resources9.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-resources9.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wazuh-indexer in wazuh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources9.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset wazuh-indexer in wazuh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-resources9.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: wazuh-indexer
  19 │           resources:
  20 │             requests:
  21 │               cpu: 500m
  22 │               memory: 1Gi
  23 │             limits:
  24 │               cpu: 1
  25 └               memory: 2Gi
────────────────────────────────────────



indexer-sts.yaml (kubernetes)
=============================
Tests: 138 (SUCCESSES: 95, FAILURES: 43)
Failures: 43 (UNKNOWN: 0, LOW: 24, MEDIUM: 13, HIGH: 6, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'increase-the-vm-max-map-count' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-mount-hack' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wazuh-indexer' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-sts.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "increase-the-vm-max-map-count" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-mount-hack" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wazuh-indexer" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wazuh-indexer in wazuh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-sts.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset wazuh-indexer in wazuh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-sts.yaml:28-129
────────────────────────────────────────
  28 ┌       volumes:
  29 │         - name: indexer-certs
  30 │           secret:
  31 │             secretName: indexer-certs
  32 │         - name: indexer-conf
  33 │           configMap:
  34 │             name: indexer-conf
  35 │       initContainers:
  36 └         - name: volume-mount-hack
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wazuh-indexer in statefulset wazuh-indexer (namespace: wazuh) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 indexer-sts.yaml:61-129
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'vimalvenugopal/wazuhfiles:wazuh-indexer-4.6.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────



indexer-sts1.yaml (kubernetes)
==============================
Tests: 138 (SUCCESSES: 95, FAILURES: 43)
Failures: 43 (UNKNOWN: 0, LOW: 24, MEDIUM: 13, HIGH: 6, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts1.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts1.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'increase-the-vm-max-map-count' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-mount-hack' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts1.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wazuh-indexer' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts1.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-sts1.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts1.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts1.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts1.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts1.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "increase-the-vm-max-map-count" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-mount-hack" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts1.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wazuh-indexer" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts1.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts1.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wazuh-indexer in wazuh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-sts1.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset wazuh-indexer in wazuh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-sts1.yaml:28-124
────────────────────────────────────────
  28 ┌       volumes:
  29 │         - name: indexer-certs
  30 │           secret:
  31 │             secretName: indexer-certs
  32 │         - name: indexer-conf
  33 │           configMap:
  34 │             name: indexer-conf
  35 │       initContainers:
  36 └         - name: volume-mount-hack
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wazuh-indexer in statefulset wazuh-indexer (namespace: wazuh) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 indexer-sts1.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.2'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────



indexer-sts2.yaml (kubernetes)
==============================
Tests: 138 (SUCCESSES: 95, FAILURES: 43)
Failures: 43 (UNKNOWN: 0, LOW: 24, MEDIUM: 13, HIGH: 6, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts2.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts2.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'increase-the-vm-max-map-count' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-mount-hack' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts2.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wazuh-indexer' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts2.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-sts2.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts2.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts2.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts2.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts2.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "increase-the-vm-max-map-count" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-mount-hack" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts2.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wazuh-indexer" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts2.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts2.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wazuh-indexer in wazuh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-sts2.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset wazuh-indexer in wazuh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-sts2.yaml:28-124
────────────────────────────────────────
  28 ┌       volumes:
  29 │         - name: indexer-certs
  30 │           secret:
  31 │             secretName: indexer-certs
  32 │         - name: indexer-conf
  33 │           configMap:
  34 │             name: indexer-conf
  35 │       initContainers:
  36 └         - name: volume-mount-hack
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wazuh-indexer in statefulset wazuh-indexer (namespace: wazuh) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 indexer-sts2.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.4.4'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────



indexer-sts3.yaml (kubernetes)
==============================
Tests: 138 (SUCCESSES: 95, FAILURES: 43)
Failures: 43 (UNKNOWN: 0, LOW: 24, MEDIUM: 13, HIGH: 6, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'fortishield-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'fortishield-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts3.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'fortishield-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-mount-hack' of StatefulSet 'fortishield-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts3.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fortishield-indexer' of 'statefulset' 'fortishield-indexer' in 'fortishield' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'increase-the-vm-max-map-count' of 'statefulset' 'fortishield-indexer' in 'fortishield' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-mount-hack' of 'statefulset' 'fortishield-indexer' in 'fortishield' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts3.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'fortishield-indexer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts3.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'fortishield-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'fortishield-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-sts3.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'increase-the-vm-max-map-count' of StatefulSet 'fortishield-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-mount-hack' of StatefulSet 'fortishield-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts3.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'fortishield-indexer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'fortishield-indexer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'increase-the-vm-max-map-count' of StatefulSet 'fortishield-indexer' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'fortishield-indexer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-mount-hack' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts3.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-mount-hack' of StatefulSet 'fortishield-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts3.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'fortishield-indexer' of StatefulSet 'fortishield-indexer' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts3.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fortishield-indexer" of statefulset "fortishield-indexer" in "fortishield" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "increase-the-vm-max-map-count" of statefulset "fortishield-indexer" in "fortishield" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-mount-hack" of statefulset "fortishield-indexer" in "fortishield" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts3.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts3.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts3.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container fortishield-indexer in fortishield namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-sts3.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset fortishield-indexer in fortishield namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-sts3.yaml:28-124
────────────────────────────────────────
  28 ┌       volumes:
  29 │         - name: indexer-certs
  30 │           secret:
  31 │             secretName: indexer-certs
  32 │         - name: indexer-conf
  33 │           configMap:
  34 │             name: indexer-conf
  35 │       initContainers:
  36 └         - name: volume-mount-hack
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container fortishield-indexer in statefulset fortishield-indexer (namespace: fortishield) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 indexer-sts3.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: fortishield-indexer
  62 │           image: 'fortishield/fortishield-indexer:5.0.0'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────



indexer-sts4.yaml (kubernetes)
==============================
Tests: 138 (SUCCESSES: 95, FAILURES: 43)
Failures: 43 (UNKNOWN: 0, LOW: 24, MEDIUM: 13, HIGH: 6, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts4.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts4.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'increase-the-vm-max-map-count' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-mount-hack' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts4.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wazuh-indexer' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts4.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-sts4.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts4.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts4.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts4.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts4.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "increase-the-vm-max-map-count" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-mount-hack" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts4.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wazuh-indexer" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts4.yaml:52-59
────────────────────────────────────────
  52 ┌         - name: increase-the-vm-max-map-count
  53 │           image: busybox
  54 │           command:
  55 │             - sysctl
  56 │             - -w
  57 │             - vm.max_map_count=262144
  58 │           securityContext:
  59 └             privileged: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts4.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wazuh-indexer in wazuh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-sts4.yaml:36-51
────────────────────────────────────────
  36 ┌         - name: volume-mount-hack
  37 │           image: busybox
  38 │           resources:
  39 │             requests:
  40 │               cpu: 50m
  41 │               memory: 128Mi
  42 │             limits:
  43 │               cpu: 100m
  44 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset wazuh-indexer in wazuh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-sts4.yaml:28-124
────────────────────────────────────────
  28 ┌       volumes:
  29 │         - name: indexer-certs
  30 │           secret:
  31 │             secretName: indexer-certs
  32 │         - name: indexer-conf
  33 │           configMap:
  34 │             name: indexer-conf
  35 │       initContainers:
  36 └         - name: volume-mount-hack
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wazuh-indexer in statefulset wazuh-indexer (namespace: wazuh) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 indexer-sts4.yaml:61-124
────────────────────────────────────────
  61 ┌         - name: wazuh-indexer
  62 │           image: 'wazuh/wazuh-indexer:4.7.3'
  63 │           resources:
  64 │             limits:
  65 │               cpu: 500m
  66 │               memory: 1564Mi
  67 │           env:
  68 │             - name: OPENSEARCH_JAVA_OPTS
  69 └               value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
  ..   
────────────────────────────────────────



indexer-sts5.yaml (kubernetes)
==============================
Tests: 136 (SUCCESSES: 95, FAILURES: 41)
Failures: 41 (UNKNOWN: 0, LOW: 22, MEDIUM: 13, HIGH: 6, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts5.yaml:37-52
────────────────────────────────────────
  37 ┌         - name: volume-mount-hack
  38 │           image: busybox
  39 │           resources:
  40 │             requests:
  41 │               cpu: 50m
  42 │               memory: 128Mi
  43 │             limits:
  44 │               cpu: 100m
  45 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 indexer-sts5.yaml:62-128
────────────────────────────────────────
  62 ┌         - name: wazuh-indexer
  63 │           image: 'wazuh/wazuh-indexer:4.7.5'
  64 │           resources:
  65 │             requests:
  66 │               cpu: 500m
  67 │               memory: 500Mi
  68 │             limits:
  69 │               cpu: 3
  70 └               memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts5.yaml:37-52
────────────────────────────────────────
  37 ┌         - name: volume-mount-hack
  38 │           image: busybox
  39 │           resources:
  40 │             requests:
  41 │               cpu: 50m
  42 │               memory: 128Mi
  43 │             limits:
  44 │               cpu: 100m
  45 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 indexer-sts5.yaml:62-128
────────────────────────────────────────
  62 ┌         - name: wazuh-indexer
  63 │           image: 'wazuh/wazuh-indexer:4.7.5'
  64 │           resources:
  65 │             requests:
  66 │               cpu: 500m
  67 │               memory: 500Mi
  68 │             limits:
  69 │               cpu: 3
  70 └               memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'increase-the-vm-max-map-count' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-mount-hack' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts5.yaml:37-52
────────────────────────────────────────
  37 ┌         - name: volume-mount-hack
  38 │           image: busybox
  39 │           resources:
  40 │             requests:
  41 │               cpu: 50m
  42 │               memory: 128Mi
  43 │             limits:
  44 │               cpu: 100m
  45 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wazuh-indexer' of 'statefulset' 'wazuh-indexer' in 'wazuh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 indexer-sts5.yaml:62-128
────────────────────────────────────────
  62 ┌         - name: wazuh-indexer
  63 │           image: 'wazuh/wazuh-indexer:4.7.5'
  64 │           resources:
  65 │             requests:
  66 │               cpu: 500m
  67 │               memory: 500Mi
  68 │             limits:
  69 │               cpu: 3
  70 └               memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts5.yaml:37-52
────────────────────────────────────────
  37 ┌         - name: volume-mount-hack
  38 │           image: busybox
  39 │           resources:
  40 │             requests:
  41 │               cpu: 50m
  42 │               memory: 128Mi
  43 │             limits:
  44 │               cpu: 100m
  45 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 indexer-sts5.yaml:62-128
────────────────────────────────────────
  62 ┌         - name: wazuh-indexer
  63 │           image: 'wazuh/wazuh-indexer:4.7.5'
  64 │           resources:
  65 │             requests:
  66 │               cpu: 500m
  67 │               memory: 500Mi
  68 │             limits:
  69 │               cpu: 3
  70 └               memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer-sts5.yaml:37-52
────────────────────────────────────────
  37 ┌         - name: volume-mount-hack
  38 │           image: busybox
  39 │           resources:
  40 │             requests:
  41 │               cpu: 50m
  42 │               memory: 128Mi
  43 │             limits:
  44 │               cpu: 100m
  45 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts5.yaml:37-52
────────────────────────────────────────
  37 ┌         - name: volume-mount-hack
  38 │           image: busybox
  39 │           resources:
  40 │             requests:
  41 │               cpu: 50m
  42 │               memory: 128Mi
  43 │             limits:
  44 │               cpu: 100m
  45 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer-sts5.yaml:62-128
────────────────────────────────────────
  62 ┌         - name: wazuh-indexer
  63 │           image: 'wazuh/wazuh-indexer:4.7.5'
  64 │           resources:
  65 │             requests:
  66 │               cpu: 500m
  67 │               memory: 500Mi
  68 │             limits:
  69 │               cpu: 3
  70 └               memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts5.yaml:37-52
────────────────────────────────────────
  37 ┌         - name: volume-mount-hack
  38 │           image: busybox
  39 │           resources:
  40 │             requests:
  41 │               cpu: 50m
  42 │               memory: 128Mi
  43 │             limits:
  44 │               cpu: 100m
  45 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 indexer-sts5.yaml:62-128
────────────────────────────────────────
  62 ┌         - name: wazuh-indexer
  63 │           image: 'wazuh/wazuh-indexer:4.7.5'
  64 │           resources:
  65 │             requests:
  66 │               cpu: 500m
  67 │               memory: 500Mi
  68 │             limits:
  69 │               cpu: 3
  70 └               memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'increase-the-vm-max-map-count' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-mount-hack' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts5.yaml:37-52
────────────────────────────────────────
  37 ┌         - name: volume-mount-hack
  38 │           image: busybox
  39 │           resources:
  40 │             requests:
  41 │               cpu: 50m
  42 │               memory: 128Mi
  43 │             limits:
  44 │               cpu: 100m
  45 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer-sts5.yaml:62-128
────────────────────────────────────────
  62 ┌         - name: wazuh-indexer
  63 │           image: 'wazuh/wazuh-indexer:4.7.5'
  64 │           resources:
  65 │             requests:
  66 │               cpu: 500m
  67 │               memory: 500Mi
  68 │             limits:
  69 │               cpu: 3
  70 └               memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'wazuh-indexer' of StatefulSet 'wazuh-indexer' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 indexer-sts5.yaml:62-128
────────────────────────────────────────
  62 ┌         - name: wazuh-indexer
  63 │           image: 'wazuh/wazuh-indexer:4.7.5'
  64 │           resources:
  65 │             requests:
  66 │               cpu: 500m
  67 │               memory: 500Mi
  68 │             limits:
  69 │               cpu: 3
  70 └               memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts5.yaml:37-52
────────────────────────────────────────
  37 ┌         - name: volume-mount-hack
  38 │           image: busybox
  39 │           resources:
  40 │             requests:
  41 │               cpu: 50m
  42 │               memory: 128Mi
  43 │             limits:
  44 │               cpu: 100m
  45 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 indexer-sts5.yaml:62-128
────────────────────────────────────────
  62 ┌         - name: wazuh-indexer
  63 │           image: 'wazuh/wazuh-indexer:4.7.5'
  64 │           resources:
  65 │             requests:
  66 │               cpu: 500m
  67 │               memory: 500Mi
  68 │             limits:
  69 │               cpu: 3
  70 └               memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "increase-the-vm-max-map-count" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-mount-hack" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts5.yaml:37-52
────────────────────────────────────────
  37 ┌         - name: volume-mount-hack
  38 │           image: busybox
  39 │           resources:
  40 │             requests:
  41 │               cpu: 50m
  42 │               memory: 128Mi
  43 │             limits:
  44 │               cpu: 100m
  45 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wazuh-indexer" of statefulset "wazuh-indexer" in "wazuh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 indexer-sts5.yaml:62-128
────────────────────────────────────────
  62 ┌         - name: wazuh-indexer
  63 │           image: 'wazuh/wazuh-indexer:4.7.5'
  64 │           resources:
  65 │             requests:
  66 │               cpu: 500m
  67 │               memory: 500Mi
  68 │             limits:
  69 │               cpu: 3
  70 └               memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts5.yaml:62-128
────────────────────────────────────────
  62 ┌         - name: wazuh-indexer
  63 │           image: 'wazuh/wazuh-indexer:4.7.5'
  64 │           resources:
  65 │             requests:
  66 │               cpu: 500m
  67 │               memory: 500Mi
  68 │             limits:
  69 │               cpu: 3
  70 └               memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts5.yaml:53-60
────────────────────────────────────────
  53 ┌         - name: increase-the-vm-max-map-count
  54 │           image: busybox
  55 │           command:
  56 │             - sysctl
  57 │             - -w
  58 │             - vm.max_map_count=262144
  59 │           securityContext:
  60 └             privileged: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 indexer-sts5.yaml:37-52
────────────────────────────────────────
  37 ┌         - name: volume-mount-hack
  38 │           image: busybox
  39 │           resources:
  40 │             requests:
  41 │               cpu: 50m
  42 │               memory: 128Mi
  43 │             limits:
  44 │               cpu: 100m
  45 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wazuh-indexer in wazuh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-sts5.yaml:37-52
────────────────────────────────────────
  37 ┌         - name: volume-mount-hack
  38 │           image: busybox
  39 │           resources:
  40 │             requests:
  41 │               cpu: 50m
  42 │               memory: 128Mi
  43 │             limits:
  44 │               cpu: 100m
  45 └               memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset wazuh-indexer in wazuh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 indexer-sts5.yaml:27-128
────────────────────────────────────────
  27 ┌       nodeSelector: {}
  28 │       # Set the wazuh-indexer volume permissions so the wazuh-indexer user can use it
  29 │       volumes:
  30 │         - name: indexer-certs
  31 │           secret:
  32 │             secretName: indexer-certs
  33 │         - name: indexer-conf
  34 │           configMap:
  35 └             name: indexer-conf
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wazuh-indexer in statefulset wazuh-indexer (namespace: wazuh) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 indexer-sts5.yaml:62-128
────────────────────────────────────────
  62 ┌         - name: wazuh-indexer
  63 │           image: 'wazuh/wazuh-indexer:4.7.5'
  64 │           resources:
  65 │             requests:
  66 │               cpu: 500m
  67 │               memory: 500Mi
  68 │             limits:
  69 │               cpu: 3
  70 └               memory: 2Gi
  ..   
────────────────────────────────────────



indexer_deployment.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'indexer-server' of Deployment 'indexer-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 indexer_deployment.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'indexer-server' of Deployment 'indexer-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer_deployment.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'indexer-server' of Deployment 'indexer-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer_deployment.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'indexer-server' of Deployment 'indexer-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexer_deployment.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'indexer-server' of Deployment 'indexer-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexer_deployment.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'indexer-server' of Deployment 'indexer-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 indexer_deployment.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'indexer-server' of Deployment 'indexer-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer_deployment.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment indexer-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 indexer_deployment.yaml:5-7
────────────────────────────────────────
   5 ┌   name: indexer-server
   6 │   labels:
   7 └     db: pgsql
────────────────────────────────────────



indexer_deployment1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'indexer-server' of Deployment 'indexer-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 indexer_deployment1.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'indexer-server' of Deployment 'indexer-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 indexer_deployment1.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'indexer-server' of Deployment 'indexer-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 indexer_deployment1.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'indexer-server' of Deployment 'indexer-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 indexer_deployment1.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'indexer-server' of Deployment 'indexer-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 indexer_deployment1.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'indexer-server' of Deployment 'indexer-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 indexer_deployment1.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'indexer-server' of Deployment 'indexer-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 indexer_deployment1.yaml:23-84
────────────────────────────────────────
  23 ┌       - name: indexer-server
  24 │         imagePullPolicy: IfNotPresent
  25 │         image: cloud-indexer_server_image
  26 │         ports:
  27 │         - containerPort: 51800
  28 │           name: http2
  29 │         - containerPort: 51801
  30 │           name: metrics-http
  31 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment indexer-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 indexer_deployment1.yaml:5-7
────────────────────────────────────────
   5 ┌   name: indexer-server
   6 │   labels:
   7 └     db: pgsql
────────────────────────────────────────



infer-deployment.yaml (kubernetes)
==================================
Tests: 131 (SUCCESSES: 97, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 20, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ml-infer' of Deployment 'ml-infer-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'redis-cache' of Deployment 'ml-infer-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ml-infer' of Deployment 'ml-infer-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis-cache' of Deployment 'ml-infer-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ml-infer' of 'deployment' 'ml-infer-deployment' in 'prod' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis-cache' of 'deployment' 'ml-infer-deployment' in 'prod' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ml-infer' of Deployment 'ml-infer-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis-cache' of Deployment 'ml-infer-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ml-infer' of Deployment 'ml-infer-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis-cache' of Deployment 'ml-infer-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ml-infer' of Deployment 'ml-infer-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'redis-cache' of Deployment 'ml-infer-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ml-infer' of Deployment 'ml-infer-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis-cache' of Deployment 'ml-infer-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ml-infer' of Deployment 'ml-infer-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis-cache' of Deployment 'ml-infer-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ml-infer' of Deployment 'ml-infer-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis-cache' of Deployment 'ml-infer-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ml-infer' of Deployment 'ml-infer-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis-cache' of Deployment 'ml-infer-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ml-infer' of Deployment 'ml-infer-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis-cache' of Deployment 'ml-infer-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ml-infer' of Deployment 'ml-infer-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis-cache' of Deployment 'ml-infer-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ml-infer" of deployment "ml-infer-deployment" in "prod" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis-cache" of deployment "ml-infer-deployment" in "prod" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ml-infer-deployment in prod namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infer-deployment.yaml:42-46
────────────────────────────────────────
  42 ┌       - name: redis-cache
  43 │         image: redis
  44 │         ports:
  45 │         - containerPort: 6379
  46 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ml-infer-deployment in prod namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ml-infer-deployment in prod namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infer-deployment.yaml:18-47
────────────────────────────────────────
  18 ┌       runtimeClassName: nvidia
  19 │       containers:
  20 │       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 └         - name: NVIDIA_VISIBLE_DEVICES
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ml-infer in deployment ml-infer-deployment (namespace: prod) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 infer-deployment.yaml:20-41
────────────────────────────────────────
  20 ┌       - name: ml-infer
  21 │         image: localhost:32000/ml-infer:prod
  22 │         ports:
  23 │         - containerPort: 5000
  24 │           protocol: TCP
  25 │         env:
  26 │         - name: NVIDIA_VISIBLE_DEVICES
  27 │           value: all
  28 └         - name: NVIDIA_DRIVER_CAPABILITIES
  ..   
────────────────────────────────────────



infer.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inference-container' of Deployment 'mnist-inference-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inference-container' of Deployment 'mnist-inference-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inference-container' of 'deployment' 'mnist-inference-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inference-container' of Deployment 'mnist-inference-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inference-container' of Deployment 'mnist-inference-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'inference-container' of Deployment 'mnist-inference-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inference-container' of Deployment 'mnist-inference-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inference-container' of Deployment 'mnist-inference-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inference-container' of Deployment 'mnist-inference-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inference-container' of Deployment 'mnist-inference-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inference-container' of Deployment 'mnist-inference-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inference-container' of Deployment 'mnist-inference-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inference-container" of deployment "mnist-inference-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mnist-inference-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 infer.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mnist-inference-deployment
   5 │   labels:
   6 └     app: mnist-inference
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mnist-inference-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mnist-inference-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infer.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 │           name: model-volume
  25 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container inference-container in deployment mnist-inference-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 infer.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: inference-container
  19 │         image: srush98/infermnistrnnfinal:latest
  20 │         ports:
  21 │         - containerPort: 7860
  22 │         volumeMounts:
  23 │         - mountPath: "/model"
  24 └           name: model-volume
────────────────────────────────────────



infer1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mnist-inference' of Deployment 'mnist-inference' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mnist-inference' of Deployment 'mnist-inference' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mnist-inference' of 'deployment' 'mnist-inference' in 'kubeflow' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mnist-inference' of Deployment 'mnist-inference' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mnist-inference' of Deployment 'mnist-inference' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mnist-inference' of Deployment 'mnist-inference' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mnist-inference' of Deployment 'mnist-inference' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mnist-inference' of Deployment 'mnist-inference' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mnist-inference' of Deployment 'mnist-inference' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mnist-inference' of Deployment 'mnist-inference' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mnist-inference' of Deployment 'mnist-inference' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mnist-inference' of Deployment 'mnist-inference' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mnist-inference" of deployment "mnist-inference" in "kubeflow" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mnist-inference in kubeflow namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infer1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 └           mountPath: /model
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mnist-inference in kubeflow namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infer1.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: mnist-inference
  18 │         image: gcr.io/amlc-hw3/mnist-inference:latest
  19 │         ports:
  20 │         - containerPort: 5000
  21 │         volumeMounts:
  22 │         - name: model-volume
  23 │           mountPath: /model
  24 └       volumes:
  ..   
────────────────────────────────────────



infer2.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inference' of Deployment 'inferjob' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inference' of Deployment 'inferjob' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inference' of 'deployment' 'inferjob' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inference' of Deployment 'inferjob' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inference' of Deployment 'inferjob' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'inference' of Deployment 'inferjob' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inference' of Deployment 'inferjob' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inference' of Deployment 'inferjob' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inference' of Deployment 'inferjob' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inference' of Deployment 'inferjob' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inference' of Deployment 'inferjob' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inference' of Deployment 'inferjob' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inference" of deployment "inferjob" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment inferjob in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 infer2.yaml:4-7
────────────────────────────────────────
   4 ┌     name: inferjob
   5 │     labels:
   6 │         app: serviceapi
   7 └         tier: backend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container inferjob in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment inferjob in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infer2.yaml:19-30
────────────────────────────────────────
  19 ┌             containers:
  20 │                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 │                     mountPath: /models
  27 └             volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container inference in deployment inferjob (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 infer2.yaml:20-26
────────────────────────────────────────
  20 ┌                 - name: inference
  21 │                   image: akohd/mnist_inference_hhd2023
  22 │                   ports:
  23 │                       - containerPort: 8000
  24 │                   volumeMounts:
  25 │                   - name: mnistvolumehhd2023
  26 └                     mountPath: /models
────────────────────────────────────────



inference-cloud.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vllm-phi-2' of 'pod' 'vllm-phi-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vllm-phi-2" of pod "vllm-phi-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod vllm-phi-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 inference-cloud.yaml:4
────────────────────────────────────────
   4 [   name: vllm-phi-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vllm-phi-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod vllm-phi-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference-cloud.yaml:6-15
────────────────────────────────────────
   6 ┌   restartPolicy: OnFailure
   7 │   containers:
   8 │   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vllm-phi-2 in pod vllm-phi-2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 inference-cloud.yaml:8-15
────────────────────────────────────────
   8 ┌   - name: vllm-phi-2
   9 │     image: vllm/vllm-openai:latest
  10 │     args:
  11 │       - "--model"
  12 │       - "angelmmiguel/phi2-intro-finetuned-demo"
  13 │     resources:
  14 │       limits:
  15 └         nvidia.com/gpu: 1
────────────────────────────────────────



inference.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inference-app' of Deployment 'inference-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inference-app' of Deployment 'inference-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inference-app' of 'deployment' 'inference-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inference-app' of Deployment 'inference-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inference-app' of Deployment 'inference-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inference-app' of Deployment 'inference-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inference-app' of Deployment 'inference-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inference-app' of Deployment 'inference-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inference-app' of Deployment 'inference-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inference-app' of Deployment 'inference-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inference-app' of Deployment 'inference-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inference-app" of deployment "inference-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment inference-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 inference.yaml:4
────────────────────────────────────────
   4 [   name: inference-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container inference-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment inference-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 │           mountPath: /mounted_volume
  23 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container inference-app in deployment inference-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 inference.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────



inference1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inference' of Pod 'inference' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inference' of Pod 'inference' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inference' of 'pod' 'inference' in 'aiml' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inference' of Pod 'inference' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inference' of Pod 'inference' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'inference' of Pod 'inference' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inference' of Pod 'inference' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inference' of Pod 'inference' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inference' of Pod 'inference' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inference' of Pod 'inference' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inference' of Pod 'inference' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inference' of Pod 'inference' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inference" of pod "inference" in "aiml" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container inference in aiml namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference1.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod inference in aiml namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference1.yaml:9-20
────────────────────────────────────────
   9 ┌   containers:
  10 │   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 └       limits:
  ..   
────────────────────────────────────────



inference2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inference-app' of Deployment 'inference-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inference-app' of Deployment 'inference-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inference-app' of 'deployment' 'inference-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inference-app' of Deployment 'inference-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inference-app' of Deployment 'inference-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inference-app' of Deployment 'inference-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inference-app' of Deployment 'inference-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inference-app' of Deployment 'inference-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inference-app' of Deployment 'inference-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inference-app' of Deployment 'inference-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inference-app' of Deployment 'inference-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inference-app" of deployment "inference-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment inference-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 inference2.yaml:4
────────────────────────────────────────
   4 [   name: inference-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container inference-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment inference-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference2.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 │           mountPath: /mounted_volume
  23 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container inference-app in deployment inference-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 inference2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: inference-app
  17 │         image: lvb243/cml:inference-image
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         volumeMounts:
  21 │         - name: storage-volume
  22 └           mountPath: /mounted_volume
────────────────────────────────────────



inference3.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inference' of Pod 'inference' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inference' of Pod 'inference' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inference' of 'pod' 'inference' in 'aiml' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inference' of Pod 'inference' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inference' of Pod 'inference' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'inference' of Pod 'inference' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inference' of Pod 'inference' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inference' of Pod 'inference' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inference' of Pod 'inference' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inference' of Pod 'inference' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inference' of Pod 'inference' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inference' of Pod 'inference' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inference" of pod "inference" in "aiml" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container inference in aiml namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference3.yaml:10-19
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 │       limits:
  18 │       # HIGHLIGHT
  19 └         aws.amazon.com/neuron: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod inference in aiml namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference3.yaml:9-20
────────────────────────────────────────
   9 ┌   containers:
  10 │   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: inference
  16 │     resources:
  17 └       limits:
  ..   
────────────────────────────────────────



inference4.yaml (kubernetes)
============================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'oci-image-loader' of Pod 'vllm-phi-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'oci-image-loader' of Pod 'vllm-phi-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'oci-image-loader' of 'pod' 'vllm-phi-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vllm-phi-2' of 'pod' 'vllm-phi-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'oci-image-loader' of Pod 'vllm-phi-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'oci-image-loader' of Pod 'vllm-phi-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'oci-image-loader' of Pod 'vllm-phi-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'oci-image-loader' of Pod 'vllm-phi-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'oci-image-loader' of Pod 'vllm-phi-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'oci-image-loader' of Pod 'vllm-phi-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'oci-image-loader' of Pod 'vllm-phi-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'oci-image-loader' of Pod 'vllm-phi-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'oci-image-loader' of Pod 'vllm-phi-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vllm-phi-2' of Pod 'vllm-phi-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "oci-image-loader" of pod "vllm-phi-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vllm-phi-2" of pod "vllm-phi-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod vllm-phi-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 inference4.yaml:4
────────────────────────────────────────
   4 [   name: vllm-phi-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vllm-phi-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vllm-phi-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference4.yaml:11-15
────────────────────────────────────────
  11 ┌   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 │       - name: llm-volume
  15 └         mountPath: /llm
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod vllm-phi-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference4.yaml:6-27
────────────────────────────────────────
   6 ┌   restartPolicy: OnFailure
   7 │   volumes:
   8 │     - name: llm-volume
   9 │       emptyDir: {}
  10 │   initContainers:
  11 │   - name: oci-image-loader
  12 │     image: kubeconna23.azurecr.io/image-loader
  13 │     volumeMounts:
  14 └       - name: llm-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vllm-phi-2 in pod vllm-phi-2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 inference4.yaml:17-27
────────────────────────────────────────
  17 ┌   - name: vllm-phi-2
  18 │     image: vllm/vllm-openai:latest
  19 │     args:
  20 │       - "--model"
  21 │       - "/llm"
  22 │     volumeMounts:
  23 │       - name: llm-volume
  24 │         mountPath: /llm
  25 └     resources:
  ..   
────────────────────────────────────────



inference5.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inference-container' of Deployment 'inference-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inference-container' of Deployment 'inference-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inference-container' of 'deployment' 'inference-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inference-container' of Deployment 'inference-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inference-container' of Deployment 'inference-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'inference-container' of Deployment 'inference-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inference-container' of Deployment 'inference-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inference-container' of Deployment 'inference-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inference-container' of Deployment 'inference-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inference-container' of Deployment 'inference-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inference-container' of Deployment 'inference-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inference-container' of Deployment 'inference-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inference-container" of deployment "inference-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment inference-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 inference5.yaml:4
────────────────────────────────────────
   4 [   name: inference-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container inference-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment inference-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 inference5.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container inference-container in deployment inference-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 inference5.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: inference-container
  17 │         image: namanlalit/infer
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         volumeMounts:
  22 │         - name: model-per-volume
  23 └           mountPath: "/model"
────────────────────────────────────────



influxdb-cm.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'influxdb-config' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"  https-private-key "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'influxdb-config' in 'kube-system' namespace stores secrets in key(s) or value(s) '{"  shared-secret "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



influxdb-deployment.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'influxdb' of 'deployment' 'monitoring-influxdb' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb-deployment.yaml:7-26
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       task: monitoring
  11 │       k8s-app: influxdb
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         task: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "influxdb" of deployment "monitoring-influxdb" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container monitoring-influxdb in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment monitoring-influxdb in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-deployment.yaml:18-26
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 │           name: influxdb-storage
  24 │       volumes:
  25 │       - name: influxdb-storage
  26 └         emptyDir: {}
────────────────────────────────────────



influxdb-deployment1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'influxdb' of 'deployment' 'monitoring-influxdb' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb-deployment1.yaml:7-26
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       task: monitoring
  11 │       k8s-app: influxdb
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         task: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "influxdb" of deployment "monitoring-influxdb" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container monitoring-influxdb in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-deployment1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment monitoring-influxdb in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-deployment1.yaml:18-26
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: influxdb
  20 │         image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1
  21 │         volumeMounts:
  22 │         - mountPath: /data
  23 │           name: influxdb-storage
  24 │       volumes:
  25 │       - name: influxdb-storage
  26 └         emptyDir: {}
────────────────────────────────────────



influxdb-deployment3.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'influxdb' of Deployment 'influxdb-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'influxdb' of Deployment 'influxdb-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'influxdb' of 'deployment' 'influxdb-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'influxdb' of Deployment 'influxdb-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'influxdb' of Deployment 'influxdb-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'influxdb' of Deployment 'influxdb-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'influxdb' of Deployment 'influxdb-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'influxdb' of Deployment 'influxdb-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'influxdb' of Deployment 'influxdb-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'influxdb' of Deployment 'influxdb-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'influxdb' of Deployment 'influxdb-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "influxdb" of deployment "influxdb-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment influxdb-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 influxdb-deployment3.yaml:4
────────────────────────────────────────
   4 [   name: influxdb-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container influxdb-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-deployment3.yaml:16-36
────────────────────────────────────────
  16 ┌         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 │             cpu: 1000m
  24 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment influxdb-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-deployment3.yaml:15-44
────────────────────────────────────────
  15 ┌       containers:
  16 │         - image: influxdb:2.0-alpine
  17 │           name: influxdb
  18 │           resources:
  19 │           limits:
  20 │             cpu: 1000m
  21 │             memory: 128Mi
  22 │           requests:
  23 └             cpu: 1000m
  ..   
────────────────────────────────────────



influxdb-deployment4.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'scrutiny-influxdb' of StatefulSet 'scrutiny-influxdb-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'scrutiny-influxdb' of StatefulSet 'scrutiny-influxdb-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'scrutiny-influxdb' of 'statefulset' 'scrutiny-influxdb-deployment' in 'scrutiny' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'scrutiny-influxdb' of StatefulSet 'scrutiny-influxdb-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'scrutiny-influxdb' of StatefulSet 'scrutiny-influxdb-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'scrutiny-influxdb' of StatefulSet 'scrutiny-influxdb-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'scrutiny-influxdb' of StatefulSet 'scrutiny-influxdb-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'scrutiny-influxdb' of StatefulSet 'scrutiny-influxdb-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'scrutiny-influxdb' of StatefulSet 'scrutiny-influxdb-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'scrutiny-influxdb' of StatefulSet 'scrutiny-influxdb-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'scrutiny-influxdb' of StatefulSet 'scrutiny-influxdb-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "scrutiny-influxdb" of statefulset "scrutiny-influxdb-deployment" in "scrutiny" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container scrutiny-influxdb-deployment in scrutiny namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset scrutiny-influxdb-deployment in scrutiny namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-deployment4.yaml:17-40
────────────────────────────────────────
  17 ┌       nodeSelector:
  18 │         role: apps
  19 │       containers:
  20 │         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 └               command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container scrutiny-influxdb in statefulset scrutiny-influxdb-deployment (namespace: scrutiny) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 influxdb-deployment4.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: scrutiny-influxdb
  21 │           # registry-proxy image-prefix
  22 │           image: cr.nathanv.app/docker.io/library/influxdb:2.7
  23 │           livenessProbe:
  24 │             exec:
  25 │               command:
  26 │                 - curl
  27 │                 - -f
  28 └                 - http://localhost:8086/health
  ..   
────────────────────────────────────────



influxdb-grafana-controller.yaml (kubernetes)
=============================================
Tests: 125 (SUCCESSES: 102, FAILURES: 23)
Failures: 23 (UNKNOWN: 0, LOW: 11, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'grafana' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb-grafana-controller.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'influxdb' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb-grafana-controller.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'grafana' of Deployment 'monitoring-influxdb-grafana-v4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb-grafana-controller.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb-grafana-v4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb-grafana-controller.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'grafana' of 'deployment' 'monitoring-influxdb-grafana-v4' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb-grafana-controller.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'influxdb' of 'deployment' 'monitoring-influxdb-grafana-v4' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb-grafana-controller.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'grafana' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb-grafana-controller.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'influxdb' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb-grafana-controller.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'grafana' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb-grafana-controller.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'influxdb' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb-grafana-controller.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'grafana' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb-grafana-controller.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb-grafana-controller.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'grafana' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb-grafana-controller.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb-grafana-controller.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): seccomp.security.alpha.kubernetes.io/pod should be set to 'runtime/default'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb-grafana-controller.yaml:22
────────────────────────────────────────
  22 [         seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'monitoring-influxdb-grafana-v4' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb-grafana-controller.yaml:11-84
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       k8s-app: influxGrafana
  15 │       version: v4
  16 │   template:
  17 │     metadata:
  18 │       labels:
  19 └         k8s-app: influxGrafana
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "grafana" of deployment "monitoring-influxdb-grafana-v4" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb-grafana-controller.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "influxdb" of deployment "monitoring-influxdb-grafana-v4" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb-grafana-controller.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb-grafana-controller.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb-grafana-controller.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container monitoring-influxdb-grafana-v4 in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-grafana-controller.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container monitoring-influxdb-grafana-v4 in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-grafana-controller.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment monitoring-influxdb-grafana-v4 in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-grafana-controller.yaml:24-84
────────────────────────────────────────
  24 ┌       priorityClassName: system-cluster-critical
  25 │       tolerations:
  26 │       - key: node-role.kubernetes.io/master
  27 │         effect: NoSchedule
  28 │       - key: "CriticalAddonsOnly"
  29 │         operator: "Exists"
  30 │       containers:
  31 │         - name: influxdb
  32 └           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  ..   
────────────────────────────────────────



influxdb-grafana-controller1.yaml (kubernetes)
==============================================
Tests: 125 (SUCCESSES: 102, FAILURES: 23)
Failures: 23 (UNKNOWN: 0, LOW: 11, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'grafana' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'influxdb' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'grafana' of Deployment 'monitoring-influxdb-grafana-v4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb-grafana-v4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'grafana' of 'deployment' 'monitoring-influxdb-grafana-v4' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'influxdb' of 'deployment' 'monitoring-influxdb-grafana-v4' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'grafana' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'influxdb' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'grafana' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'influxdb' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'grafana' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'grafana' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb-grafana-v4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): seccomp.security.alpha.kubernetes.io/pod should be set to 'runtime/default'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:22
────────────────────────────────────────
  22 [         seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'monitoring-influxdb-grafana-v4' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:11-84
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       k8s-app: influxGrafana
  15 │       version: v4
  16 │   template:
  17 │     metadata:
  18 │       labels:
  19 └         k8s-app: influxGrafana
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "grafana" of deployment "monitoring-influxdb-grafana-v4" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "influxdb" of deployment "monitoring-influxdb-grafana-v4" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container monitoring-influxdb-grafana-v4 in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:48-79
────────────────────────────────────────
  48 ┌         - name: grafana
  49 │           image: k8s.gcr.io/heapster-grafana-amd64:v4.4.3
  50 │           resources:
  51 │             # keep request = limit to keep this container in guaranteed class
  52 │             limits:
  53 │               cpu: 100m
  54 │               memory: 100Mi
  55 │             requests:
  56 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container monitoring-influxdb-grafana-v4 in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:31-47
────────────────────────────────────────
  31 ┌         - name: influxdb
  32 │           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  33 │           resources:
  34 │             limits:
  35 │               cpu: 100m
  36 │               memory: 500Mi
  37 │             requests:
  38 │               cpu: 100m
  39 └               memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment monitoring-influxdb-grafana-v4 in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-grafana-controller1.yaml:24-84
────────────────────────────────────────
  24 ┌       priorityClassName: system-cluster-critical
  25 │       tolerations:
  26 │       - key: node-role.kubernetes.io/master
  27 │         effect: NoSchedule
  28 │       - key: "CriticalAddonsOnly"
  29 │         operator: "Exists"
  30 │       containers:
  31 │         - name: influxdb
  32 └           image: k8s.gcr.io/heapster-influxdb-amd64:v1.3.3
  ..   
────────────────────────────────────────



influxdb-service.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb-service.yaml:11-19
────────────────────────────────────────
  11 ┌   ports:
  12 │     - name: http
  13 │       port: 8083
  14 │       targetPort: 8083
  15 │     - name: api
  16 │       port: 8086
  17 │       targetPort: 8086
  18 │   selector:
  19 └     k8s-app: influxGrafana
────────────────────────────────────────



influxdb-service1.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb-service1.yaml:13-17
────────────────────────────────────────
  13 ┌   ports:
  14 │   - port: 8086
  15 │     targetPort: 8086
  16 │   selector:
  17 └     k8s-app: influxdb
────────────────────────────────────────



influxdb-service2.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb-service2.yaml:13-17
────────────────────────────────────────
  13 ┌   ports:
  14 │   - port: 8086
  15 │     targetPort: 8086
  16 │   selector:
  17 └     k8s-app: influxdb
────────────────────────────────────────



influxdb-service3.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb-service3.yaml:13-22
────────────────────────────────────────
  13 ┌   type: NodePort
  14 │   ports:
  15 │   - port: 8086
  16 │     targetPort: 8086
  17 │     name: http
  18 │   - port: 8083
  19 │     targetPort: 8083
  20 │     name: admin
  21 │   selector:
  22 └     k8s-app: influxdb
────────────────────────────────────────



influxdb-service5.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb-service5.yaml:11-19
────────────────────────────────────────
  11 ┌   ports:
  12 │     - name: http
  13 │       port: 8083
  14 │       targetPort: 8083
  15 │     - name: api
  16 │       port: 8086
  17 │       targetPort: 8086
  18 │   selector:
  19 └     k8s-app: influxGrafana
────────────────────────────────────────



influxdb-service7.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb-service7.yaml:11-19
────────────────────────────────────────
  11 ┌   ports:
  12 │     - name: http
  13 │       port: 8083
  14 │       targetPort: 8083
  15 │     - name: api
  16 │       port: 8086
  17 │       targetPort: 8086
  18 │   selector:
  19 └     k8s-app: influxGrafana
────────────────────────────────────────



influxdb-setup.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bash-job' of 'job' 'bash-influx-setup-job' in 'cerebral' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'bash-job' of Job 'bash-influx-setup-job' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bash-job" of job "bash-influx-setup-job" in "cerebral" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container bash-influx-setup-job in cerebral namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-setup.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job bash-influx-setup-job in cerebral namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-setup.yaml:9-35
────────────────────────────────────────
   9 ┌       containers:
  10 │       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 │         - |
  15 │           #!/bin/bash
  16 │ 
  17 └           # Run the influx setup command and capture any output and error
  ..   
────────────────────────────────────────



influxdb-setup1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bash-job' of 'job' 'bash-influx-setup-job' in 'cerebral' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'bash-job' of Job 'bash-influx-setup-job' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bash-job' of Job 'bash-influx-setup-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bash-job" of job "bash-influx-setup-job" in "cerebral" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container bash-influx-setup-job in cerebral namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-setup1.yaml:10-14
────────────────────────────────────────
  10 ┌       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 └         - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job bash-influx-setup-job in cerebral namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb-setup1.yaml:9-35
────────────────────────────────────────
   9 ┌       containers:
  10 │       - name: bash-job
  11 │         image: influxdb:latest
  12 │         command: ["/bin/bash", "-c"]
  13 │         args:
  14 │         - |
  15 │           #!/bin/bash
  16 │ 
  17 └           # Run the influx setup command and capture any output and error
  ..   
────────────────────────────────────────



influxdb10_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'influxdb' of 'statefulset' 'influxdb' in 'influxdb' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "influxdb" of statefulset "influxdb" in "influxdb" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container influxdb in influxdb namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb10_1.yaml:20-27
────────────────────────────────────────
  20 ┌       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset influxdb in influxdb namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb10_1.yaml:19-27
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: influxdb:2.7.9
  21 │         name: influxdb
  22 │         ports:
  23 │         - containerPort: 8086
  24 │           name: influxdb
  25 │         volumeMounts:
  26 │         - mountPath: /data/influxdb
  27 └           name: data
────────────────────────────────────────



influxdb1_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'contosoba-clusterrole' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 influxdb1_1.yaml:4
────────────────────────────────────────
   4 [   name: contosoba-clusterrole
────────────────────────────────────────



influxdb1_2.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): RoleBinding 'contosoba-role' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 influxdb1_2.yaml:4-5
────────────────────────────────────────
   4 ┌   name: contosoba-role
   5 └   namespace: cerebral
────────────────────────────────────────



influxdb1_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'influxdb' of 'statefulset' 'influxdb' in 'cerebral' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'influxdb' of StatefulSet 'influxdb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "influxdb" of statefulset "influxdb" in "cerebral" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container influxdb in cerebral namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb1_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset influxdb in cerebral namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb1_6.yaml:16-35
────────────────────────────────────────
  16 ┌       serviceAccount: contosoba
  17 │       containers:
  18 │       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 └         ports:
  ..   
────────────────────────────────────────



influxdb3.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'influx' of Deployment 'influx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'influx' of Deployment 'influx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'influx' of 'deployment' 'influx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'influx' of Deployment 'influx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'influx' of Deployment 'influx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'influx' of Deployment 'influx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'influx' of Deployment 'influx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'influx' of Deployment 'influx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'influx' of Deployment 'influx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'influx' of Deployment 'influx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'influx' of Deployment 'influx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'influx' of Deployment 'influx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "influx" of deployment "influx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment influx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 influxdb3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: influx-deployment
   5 │   labels:
   6 └     app: influx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container influx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment influx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb3.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: influx
  19 │         image: influxdb:latest
  20 │         ports:
  21 └         - containerPort: 8086
────────────────────────────────────────



influxdb4.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'influxdb' of 'deployment' 'monitoring-influxdb' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb4.yaml:7-29
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       task: monitoring
  11 │       k8s-app: influxdb
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         task: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "influxdb" of deployment "monitoring-influxdb" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container monitoring-influxdb in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb4.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment monitoring-influxdb in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb4.yaml:18-29
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
  ..   
────────────────────────────────────────



influxdb4_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb4_1.yaml:11-15
────────────────────────────────────────
  11 ┌   ports:
  12 │   - port: 8086
  13 │     targetPort: 8086
  14 │   selector:
  15 └     k8s-app: influxdb
────────────────────────────────────────



influxdb6.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'influxdb' of 'deployment' 'monitoring-influxdb' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'influxdb' of Deployment 'monitoring-influxdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb6.yaml:7-29
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       task: monitoring
  11 │       k8s-app: influxdb
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 └         task: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "influxdb" of deployment "monitoring-influxdb" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container monitoring-influxdb in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb6.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment monitoring-influxdb in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb6.yaml:18-29
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: influxdb
  20 │         image: k8s.gcr.io/heapster-influxdb-amd64:v1.5.2
  21 │         env:
  22 │         - name: INFLUXDB_BIND_ADDRESS
  23 │           value: 127.0.0.1:8088
  24 │         volumeMounts:
  25 │         - mountPath: /data
  26 └           name: influxdb-storage
  ..   
────────────────────────────────────────



influxdb6_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb6_1.yaml:11-15
────────────────────────────────────────
  11 ┌   ports:
  12 │   - port: 8086
  13 │     targetPort: 8086
  14 │   selector:
  15 └     k8s-app: influxdb
────────────────────────────────────────



influxdb8_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb8_1.yaml:11-15
────────────────────────────────────────
  11 ┌   ports:
  12 │   - port: 8086
  13 │     targetPort: 8086
  14 │   selector:
  15 └     k8s-app: influxdb
────────────────────────────────────────



influxdb9_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'monitoring-influxdb' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 influxdb9_1.yaml:11-15
────────────────────────────────────────
  11 ┌   ports:
  12 │   - port: 8086
  13 │     targetPort: 8086
  14 │   selector:
  15 └     k8s-app: influxdb
────────────────────────────────────────



influxdb_1.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'contosoba-clusterrole' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 influxdb_1.yaml:4
────────────────────────────────────────
   4 [   name: contosoba-clusterrole
────────────────────────────────────────



influxdb_2.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): RoleBinding 'contosoba-role' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 influxdb_2.yaml:4-5
────────────────────────────────────────
   4 ┌   name: contosoba-role
   5 └   namespace: cerebral
────────────────────────────────────────



influxdb_6.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'influxdb' of 'statefulset' 'influxdb' in 'cerebral' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'influxdb' of StatefulSet 'influxdb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'influxdb' of StatefulSet 'influxdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "influxdb" of statefulset "influxdb" in "cerebral" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container influxdb in cerebral namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb_6.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 │         ports:
  25 │         - name: api
  26 └           containerPort: 9999
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset influxdb in cerebral namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb_6.yaml:16-35
────────────────────────────────────────
  16 ┌       serviceAccount: contosoba
  17 │       containers:
  18 │       - name: influxdb
  19 │         image: influxdb:latest
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: 1
  24 └         ports:
  ..   
────────────────────────────────────────



influxdb_deployment_all_3.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'influxdb' of Deployment 'influxdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'influxdb' of Deployment 'influxdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'influxdb' of 'deployment' 'influxdb' in 'influxdb-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'influxdb' of Deployment 'influxdb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'influxdb' of Deployment 'influxdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'influxdb' of Deployment 'influxdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'influxdb' of Deployment 'influxdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'influxdb' of Deployment 'influxdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'influxdb' of Deployment 'influxdb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'influxdb' of Deployment 'influxdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'influxdb' of Deployment 'influxdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "influxdb" of deployment "influxdb" in "influxdb-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container influxdb in influxdb-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:30-38
────────────────────────────────────────
  30 ┌       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 │         - mountPath: /var/lib/influxdb
  38 └           name: var-lib-influxdb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment influxdb in influxdb-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 influxdb_deployment_all_3.yaml:29-47
────────────────────────────────────────
  29 ┌       containers:
  30 │       - image: influxdb:2.3.0-alpine
  31 │         imagePullPolicy: Always
  32 │         name: influxdb
  33 │         resources: {}
  34 │         terminationMessagePath: /dev/termination-log
  35 │         terminationMessagePolicy: File
  36 │         volumeMounts:
  37 └         - mountPath: /var/lib/influxdb
  ..   
────────────────────────────────────────



info-service-v1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container-apache' of Pod 'info-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container-apache' of Pod 'info-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container-apache' of 'pod' 'info-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container-apache' of Pod 'info-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container-apache' of Pod 'info-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container-apache' of Pod 'info-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container-apache' of Pod 'info-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container-apache' of Pod 'info-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container-apache' of Pod 'info-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container-apache' of Pod 'info-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container-apache' of Pod 'info-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container-apache' of Pod 'info-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container-apache" of pod "info-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod info-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 info-service-v1.yaml:4
────────────────────────────────────────
   4 [   name: info-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container info-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod info-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 info-service-v1.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container-apache in pod info-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 info-service-v1.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────



info-service-v11.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container-apache' of Pod 'info-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container-apache' of Pod 'info-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container-apache' of 'pod' 'info-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container-apache' of Pod 'info-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container-apache' of Pod 'info-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container-apache' of Pod 'info-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container-apache' of Pod 'info-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container-apache' of Pod 'info-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container-apache' of Pod 'info-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container-apache' of Pod 'info-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container-apache' of Pod 'info-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container-apache' of Pod 'info-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container-apache" of pod "info-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod info-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 info-service-v11.yaml:4
────────────────────────────────────────
   4 [   name: info-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container info-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod info-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 info-service-v11.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container-apache in pod info-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 info-service-v11.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: container-apache
   8 │       image: bothunter/info-service:latest
   9 │       ports:
  10 └         - containerPort: 8080
────────────────────────────────────────



infra-deploy.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'infra-deploy' of Deployment 'infrastructure-service-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 infra-deploy.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: resilientsixregistry.azurecr.io/infra-service:v2.0.3
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'infra-deploy' of Deployment 'infrastructure-service-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 infra-deploy.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: resilientsixregistry.azurecr.io/infra-service:v2.0.3
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'infra-deploy' of 'deployment' 'infrastructure-service-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 infra-deploy.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: resilientsixregistry.azurecr.io/infra-service:v2.0.3
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'infra-deploy' of Deployment 'infrastructure-service-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 infra-deploy.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: resilientsixregistry.azurecr.io/infra-service:v2.0.3
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'infra-deploy' of Deployment 'infrastructure-service-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 infra-deploy.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: resilientsixregistry.azurecr.io/infra-service:v2.0.3
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'infra-deploy' of Deployment 'infrastructure-service-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 infra-deploy.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: resilientsixregistry.azurecr.io/infra-service:v2.0.3
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'infra-deploy' of Deployment 'infrastructure-service-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 infra-deploy.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: resilientsixregistry.azurecr.io/infra-service:v2.0.3
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 infra-deploy.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: resilientsixregistry.azurecr.io/infra-service:v2.0.3
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "infra-deploy" of deployment "infrastructure-service-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 infra-deploy.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: resilientsixregistry.azurecr.io/infra-service:v2.0.3
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 infra-deploy.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: resilientsixregistry.azurecr.io/infra-service:v2.0.3
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment infrastructure-service-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 infra-deploy.yaml:4-6
────────────────────────────────────────
   4 ┌   name: infrastructure-service-deployment
   5 │   labels:
   6 └     app: infra-deploy
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment infrastructure-service-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container infrastructure-service-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infra-deploy.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: resilientsixregistry.azurecr.io/infra-service:v2.0.3
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment infrastructure-service-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infra-deploy.yaml:17-31
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: infra-deploy
  19 │         image: resilientsixregistry.azurecr.io/infra-service:v2.0.3
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 └         resources:
  ..   
────────────────────────────────────────



infra-deploy1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'infra-deploy' of Deployment 'infrastructure-service-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 infra-deploy1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: marcinziolkowski/infra-service:v1.0.1
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'infra-deploy' of Deployment 'infrastructure-service-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 infra-deploy1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: marcinziolkowski/infra-service:v1.0.1
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'infra-deploy' of 'deployment' 'infrastructure-service-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 infra-deploy1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: marcinziolkowski/infra-service:v1.0.1
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'infra-deploy' of Deployment 'infrastructure-service-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 infra-deploy1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: marcinziolkowski/infra-service:v1.0.1
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'infra-deploy' of Deployment 'infrastructure-service-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 infra-deploy1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: marcinziolkowski/infra-service:v1.0.1
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'infra-deploy' of Deployment 'infrastructure-service-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 infra-deploy1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: marcinziolkowski/infra-service:v1.0.1
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'infra-deploy' of Deployment 'infrastructure-service-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 infra-deploy1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: marcinziolkowski/infra-service:v1.0.1
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 infra-deploy1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: marcinziolkowski/infra-service:v1.0.1
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "infra-deploy" of deployment "infrastructure-service-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 infra-deploy1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: marcinziolkowski/infra-service:v1.0.1
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 infra-deploy1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: marcinziolkowski/infra-service:v1.0.1
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment infrastructure-service-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 infra-deploy1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: infrastructure-service-deployment
   5 │   labels:
   6 └     app: infra-deploy
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment infrastructure-service-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container infrastructure-service-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infra-deploy1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: marcinziolkowski/infra-service:v1.0.1
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment infrastructure-service-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infra-deploy1.yaml:17-31
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: infra-deploy
  19 │         image: marcinziolkowski/infra-service:v1.0.1
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container infra-deploy in deployment infrastructure-service-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 infra-deploy1.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: infra-deploy
  19 │         image: marcinziolkowski/infra-service:v1.0.1
  20 │         ports:
  21 │         - containerPort: 80
  22 │         env:
  23 │         - name: FLASK_RUN_PORT
  24 │           value: '3000'
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────



infra-develop1_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pokemagrib' of Deployment 'flask-magrib' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 infra-develop1_2.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pokemagrib' of Deployment 'flask-magrib' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 infra-develop1_2.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pokemagrib' of 'deployment' 'flask-magrib' in 'maulanabn-miniproject' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 infra-develop1_2.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pokemagrib' of Deployment 'flask-magrib' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 infra-develop1_2.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pokemagrib' of Deployment 'flask-magrib' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 infra-develop1_2.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pokemagrib' of Deployment 'flask-magrib' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 infra-develop1_2.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pokemagrib' of Deployment 'flask-magrib' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 infra-develop1_2.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pokemagrib' of Deployment 'flask-magrib' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 infra-develop1_2.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 infra-develop1_2.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pokemagrib" of deployment "flask-magrib" in "maulanabn-miniproject" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 infra-develop1_2.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 infra-develop1_2.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container flask-magrib in maulanabn-miniproject namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infra-develop1_2.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment flask-magrib in maulanabn-miniproject namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infra-develop1_2.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pokemagrib in deployment flask-magrib (namespace: maulanabn-miniproject) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 infra-develop1_2.yaml:16-27
────────────────────────────────────────
  16 ┌       - image: maulanabn/miniproject:latest
  17 │         imagePullPolicy: Always
  18 │         name: pokemagrib
  19 │         ports:
  20 │         - containerPort: 5001
  21 │         resources:
  22 │           limits:
  23 │             cpu: 500m
  24 └             memory: 500Mi
  ..   
────────────────────────────────────────



infrastructure11.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myservice' of Deployment 'myservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myservice' of Deployment 'myservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myservice' of 'deployment' 'myservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myservice' of Deployment 'myservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myservice' of Deployment 'myservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myservice' of Deployment 'myservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myservice' of Deployment 'myservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myservice' of Deployment 'myservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myservice' of Deployment 'myservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myservice' of Deployment 'myservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myservice' of Deployment 'myservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myservice" of deployment "myservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 infrastructure11.yaml:4
────────────────────────────────────────
   4 [   name: myservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infrastructure11.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: myservice
  19 └       restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myservice in deployment myservice (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 infrastructure11.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: ferialebouchikhi/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────



infrastructure12_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myservice' of Deployment 'myservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myservice' of Deployment 'myservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myservice' of 'deployment' 'myservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myservice' of Deployment 'myservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myservice' of Deployment 'myservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myservice' of Deployment 'myservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myservice' of Deployment 'myservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myservice' of Deployment 'myservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myservice' of Deployment 'myservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myservice' of Deployment 'myservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myservice' of Deployment 'myservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myservice" of deployment "myservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment myservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 infrastructure12_1.yaml:4
────────────────────────────────────────
   4 [   name: myservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment myservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 infrastructure12_1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: myservice
  19 └       restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myservice in deployment myservice (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 infrastructure12_1.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: moussa923/myservice:1
  17 │         imagePullPolicy: IfNotPresent
  18 └         name: myservice
────────────────────────────────────────



ing-dep1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'my-deployment1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'my-deployment1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'my-deployment1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'my-deployment1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'my-deployment1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'my-deployment1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'my-deployment1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'my-deployment1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'my-deployment1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'my-deployment1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'my-deployment1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'my-deployment1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "my-deployment1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ing-dep1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-deployment1
   5 │   labels:
   6 └     app: nginx-home
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-deployment1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ing-dep1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in deployment my-deployment1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ing-dep1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/home-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



ing-dep2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'my-deployment2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'my-deployment2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'my-deployment2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'my-deployment2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'my-deployment2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'my-deployment2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'my-deployment2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'my-deployment2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'my-deployment2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'my-deployment2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'my-deployment2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'my-deployment2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "my-deployment2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ing-dep2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-deployment2
   5 │   labels:
   6 └     app: nginx-mobile
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-deployment2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ing-dep2.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in deployment my-deployment2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ing-dep2.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/mobile-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



ing-dep3.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'my-deployment3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'my-deployment3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'my-deployment3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'my-deployment3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'my-deployment3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'my-deployment3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'my-deployment3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'my-deployment3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'my-deployment3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'my-deployment3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'my-deployment3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'my-deployment3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "my-deployment3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ing-dep3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-deployment3
   5 │   labels:
   6 └     app: nginx-desk
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-deployment3 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ing-dep3.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in deployment my-deployment3 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ing-dep3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: deepakumre/desktop-page
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



ingress-apache_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 3, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-apache-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-apache_13.yaml:33-104
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-apache-controller
  36 │         - --election-id=ingress-apache-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-apache-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-apache-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-apache_13.yaml:33-104
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-apache-controller
  36 │         - --election-id=ingress-apache-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-apache-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-apache-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-apache_13.yaml:33-104
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-apache-controller
  36 │         - --election-id=ingress-apache-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-apache-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-apache-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-apache_13.yaml:33-104
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-apache-controller
  36 │         - --election-id=ingress-apache-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-apache-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-apache-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-apache_13.yaml:33-104
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-apache-controller
  36 │         - --election-id=ingress-apache-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-apache-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-apache_13.yaml:33-104
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-apache-controller
  36 │         - --election-id=ingress-apache-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-apache-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-apache-controller" in "ingress-apache" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-apache_13.yaml:33-104
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-apache-controller
  36 │         - --election-id=ingress-apache-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-apache-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-apache-controller in ingress-apache namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────



ingress-apache_3.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-apache' shouldn't have access to manage secrets in namespace 'ingress-apache'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-apache_3.yaml:18-28
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - configmaps
  22 │   - pods
  23 │   - secrets
  24 │   - endpoints
  25 │   verbs:
  26 └   - get
  ..   
────────────────────────────────────────



ingress-apache_4.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-apache-admission' shouldn't have access to manage secrets in namespace 'ingress-apache'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-apache_4.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - secrets
  16 │   verbs:
  17 │   - get
  18 └   - create
────────────────────────────────────────



ingress-apache_5.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-apache' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-apache_5.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   - endpoints
  15 │   - nodes
  16 │   - pods
  17 │   - secrets
  18 └   - namespaces
  ..   
────────────────────────────────────────



ingress-apache_6.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-apache-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-apache_6.yaml:11-17
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - admissionregistration.k8s.io
  13 │   resources:
  14 │   - validatingwebhookconfigurations
  15 │   verbs:
  16 │   - get
  17 └   - update
────────────────────────────────────────



ingress-app1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-one' of 'deployment' 'aks-helloworld-one' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-one" of deployment "aks-helloworld-one" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-one in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-app1.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-one
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-one in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-one in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-one in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-app1.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-one in deployment aks-helloworld-one (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-app1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────



ingress-app11.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-one' of 'deployment' 'aks-helloworld-one' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-one" of deployment "aks-helloworld-one" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-one in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-app11.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-one
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-one in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-one in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-one in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-app11.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-one in deployment aks-helloworld-one (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-app11.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────



ingress-app2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-two' of 'deployment' 'aks-helloworld-two' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-two" of deployment "aks-helloworld-two" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-two in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-app2.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-two
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-two in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-two in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-two in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-app2.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-two in deployment aks-helloworld-two (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-app2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────



ingress-app21.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-two' of 'deployment' 'aks-helloworld-two' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-two" of deployment "aks-helloworld-two" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-two in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-app21.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-two
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-two in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-two in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-two in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-app21.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-two in deployment aks-helloworld-two (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-app21.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: neilpeterson/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────



ingress-application-ckad10_1.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-wear' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-wear" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-wear in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-wear in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-wear (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad10_3.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad10_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad10_5.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'default-backend' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "default-backend" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-backend in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment default-backend in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment default-backend (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad10_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad11_1.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-wear' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-wear" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-wear in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-wear in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-wear (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad11_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad11_3.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad11_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad11_5.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'default-backend' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "default-backend" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-backend in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment default-backend in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment default-backend (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad11_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad12_1.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-wear' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-wear" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-wear in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-wear in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-wear (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad12_3.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad12_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad12_5.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'default-backend' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "default-backend" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-backend in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment default-backend in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment default-backend (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad12_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad1_1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-wear' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-wear" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-wear in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-wear in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-wear (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad1_3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad1_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad1_5.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'default-backend' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "default-backend" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-backend in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment default-backend in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment default-backend (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad1_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad2_1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-wear' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-wear" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-wear in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-wear in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-wear (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad2_3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad2_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad2_5.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'default-backend' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "default-backend" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-backend in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment default-backend in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment default-backend (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad2_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad3_1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-wear' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-wear" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-wear in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-wear in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-wear (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad3_3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad3_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad3_5.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'default-backend' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "default-backend" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-backend in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment default-backend in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment default-backend (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad3_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad4_1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-wear' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-wear" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-wear in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-wear in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-wear (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad4_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad4_3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad4_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad4_5.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'default-backend' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "default-backend" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-backend in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment default-backend in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment default-backend (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad4_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad5_1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-wear' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-wear" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-wear in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-wear in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-wear (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad5_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad5_3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad5_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad5_5.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'default-backend' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "default-backend" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-backend in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment default-backend in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment default-backend (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad5_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad6_1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-wear' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-wear" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-wear in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-wear in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-wear (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad6_3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad6_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad6_5.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'default-backend' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "default-backend" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-backend in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment default-backend in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment default-backend (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad6_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad7_1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-wear' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-wear" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-wear in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-wear in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-wear (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad7_3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad7_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad7_5.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'default-backend' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "default-backend" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-backend in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment default-backend in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment default-backend (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad7_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad8_1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-wear' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-wear" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-wear in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-wear in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-wear (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad8_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad8_3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad8_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad8_5.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'default-backend' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "default-backend" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-backend in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment default-backend in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment default-backend (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad8_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad9_1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-wear' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-wear" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-wear in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-wear in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-wear (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad9_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad9_3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad9_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad9_5.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'default-backend' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "default-backend" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-backend in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment default-backend in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment default-backend (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad9_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad_1.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-wear' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-wear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-wear" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-wear in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-wear in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-wear (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:apparels
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad_3.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad_3.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad_3.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         image: kodekloud/ecommerce:video
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-application-ckad_5.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'deployment' 'default-backend' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Deployment 'default-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of deployment "default-backend" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-backend in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment default-backend in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-application-ckad_5.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in deployment default-backend (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-application-ckad_5.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: simple-webapp
  18 │         imagePullPolicy: Always
  19 │         image: kodekloud/ecommerce:404
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



ingress-basic1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-basic1.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-basic1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in replicaset nginx (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-basic1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: ashryramadhan10/nginx-curl
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



ingress-config-cm.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'ingress-config' in 'jx' namespace stores sensitive contents in key(s) or value(s) '{"email"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



ingress-controller-ckad10_14.yaml (kubernetes)
==============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad10_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad10_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad10_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad10_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad10_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad10_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad10_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad10_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad10_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad10_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad10_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad10_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad10_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller-ckad10_15.yaml (kubernetes)
==============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad10_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad10_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad10_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad10_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad10_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad10_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad10_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad10_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad10_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad10_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad10_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad10_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad10_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller-ckad10_3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad10_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad10_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad10_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller-ckad10_4.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad10_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller-ckad10_5.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller-ckad10_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller-ckad10_6.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller-ckad10_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller-ckad11_14.yaml (kubernetes)
==============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad11_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad11_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad11_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad11_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad11_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad11_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad11_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad11_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad11_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad11_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad11_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad11_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad11_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller-ckad11_15.yaml (kubernetes)
==============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad11_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad11_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad11_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad11_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad11_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad11_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad11_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad11_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad11_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad11_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad11_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad11_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad11_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller-ckad11_3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad11_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad11_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad11_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller-ckad11_4.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad11_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller-ckad11_5.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller-ckad11_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller-ckad11_6.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller-ckad11_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller-ckad12_14.yaml (kubernetes)
==============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad12_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad12_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad12_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad12_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad12_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad12_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad12_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad12_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad12_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad12_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad12_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad12_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad12_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller-ckad12_15.yaml (kubernetes)
==============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad12_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad12_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad12_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad12_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad12_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad12_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad12_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad12_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad12_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad12_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad12_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad12_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad12_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller-ckad12_3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad12_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad12_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad12_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller-ckad12_4.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad12_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller-ckad12_5.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller-ckad12_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller-ckad12_6.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller-ckad12_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller-ckad1_14.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad1_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad1_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad1_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad1_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad1_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad1_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad1_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad1_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad1_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad1_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad1_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad1_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad1_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller-ckad1_15.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad1_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad1_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad1_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad1_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad1_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad1_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad1_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad1_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad1_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad1_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad1_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad1_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad1_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller-ckad1_3.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad1_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad1_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad1_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller-ckad1_4.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad1_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller-ckad1_5.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller-ckad1_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller-ckad1_6.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller-ckad1_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller-ckad2_14.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad2_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad2_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad2_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad2_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad2_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad2_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad2_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad2_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad2_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad2_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad2_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad2_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad2_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller-ckad2_15.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad2_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad2_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad2_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad2_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad2_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad2_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad2_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad2_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad2_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad2_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad2_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad2_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad2_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller-ckad2_3.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad2_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad2_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad2_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller-ckad2_4.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad2_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller-ckad2_5.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller-ckad2_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller-ckad2_6.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller-ckad2_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller-ckad3_14.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad3_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad3_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad3_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad3_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad3_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad3_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad3_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad3_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad3_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad3_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad3_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad3_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad3_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller-ckad3_15.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad3_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad3_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad3_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad3_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad3_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad3_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad3_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad3_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad3_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad3_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad3_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad3_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad3_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller-ckad3_3.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad3_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad3_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad3_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller-ckad3_4.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad3_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller-ckad3_5.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller-ckad3_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller-ckad3_6.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller-ckad3_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────


