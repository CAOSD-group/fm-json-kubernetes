
Report Summary

┌───────────────────────────────────────────────────┬────────────┬───────────────────┐
│                      Target                       │    Type    │ Misconfigurations │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress-miniflux.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress-shiori.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-LB.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good15_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good15_2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good16.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good16_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good16_2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good16_3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good16_4.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good16_5.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good16_6.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good17.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good17_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good18.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good18_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good19.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good19_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good1_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good20.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good20_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good21.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good21_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good22.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good22_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good22_2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good23.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good23_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good23_2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good24.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good24_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good24_2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good24_3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good24_4.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good24_5.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good24_6.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good25.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good25_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good26.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good26_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good27.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good27_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good28.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good28_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good29.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good29_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good2_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good3.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good30.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good30_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good30_2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good31.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good31_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good31_2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good32.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good32_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good32_2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good32_3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good32_4.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good32_5.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good32_6.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good33.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good33_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good34.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good34_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good35.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good35_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good36.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good36_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good37.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good37_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good38.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good38_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good38_2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good39.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good39_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good39_2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good3_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good4.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good4_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good5.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good5_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good6.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good6_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good6_2.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good7.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good7_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good7_2.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good8.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good8_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good8_2.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good8_3.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good8_4.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good8_5.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good8_6.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good9.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good9_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good_1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good_2.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good_3.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good_4.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good_5.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good_6.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grafana-resource.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grafana-resource1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grafana-resource1_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grafana-resource2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grafana-resource2_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grafana-resource3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grafana-resource3_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grafana-resource_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grafana.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grafana1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grpc.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grpc1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grpc13.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grpc4.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-grpc5.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-hash.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-hash1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-heating.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-heating1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-helpdesk.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-host-definition.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-host2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-http.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-http1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-http2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-http3.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-http5.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-http6.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-https2.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-https2_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-https2_2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-internal.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-internal1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-internal2.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-istio-kiali.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-istio-kiali1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-istio-kiali2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-istio-kiali3.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-itframe.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-jaeger.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-jaeger1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-k8s.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-kuard.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-lb1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-lights.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-lights1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-limit-rate.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-loadbalancer.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-local1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-mailhog.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-mailhog1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-mss-app.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-mtls-secret-crl.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-mtls-secret.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-mtls-secret1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-multi.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-multipath.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-multiple-hosts.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-myserver.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-mysql8.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-namebased.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-namebased1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nats.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nats1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-netset.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-network-policy.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-network-policy1.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-network-policy2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-network-policy3.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nextjs-staging.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nextjs.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-cluster-rolebinding.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-cluster-rolebinding1.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-cluster-rolebinding2.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-cluster-rolebinding3.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-clusterrole.yaml          │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-clusterrole1.yaml         │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-clusterrole2.yaml         │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-clusterrole3.yaml         │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-create-job.yaml           │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-create-job1.yaml          │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-create-job2.yaml          │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-create-job3.yaml          │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-patch-job.yaml            │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-patch-job1.yaml           │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-patch-job2.yaml           │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-patch-job3.yaml           │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-role.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-role1.yaml                │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-role2.yaml                │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-role3.yaml                │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-rolebinding.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-rolebinding1.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-rolebinding2.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-rolebinding3.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-sa.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-sa1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-sa2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-sa3.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-validation.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-validation1.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-validation2.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-admission-validation3.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_10.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_11.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_12.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_13.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_14.yaml                   │ kubernetes │         9         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_15.yaml                   │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_16.yaml                   │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_17.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_18.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_3.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_4.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_5.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_6.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_7.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_8.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-baremetal_9.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-cluster-rolebinding.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-cluster-rolebinding1.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-cluster-rolebinding2.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-cluster-rolebinding3.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-clusterrole.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-clusterrole1.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-clusterrole2.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-clusterrole3.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-admission-svc.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-admission-svc1.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-admission-svc2.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-admission-svc3.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-cm.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-cm1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-cm2.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-cm3.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-deploy.yaml              │ kubernetes │         9         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-deploy1.yaml             │ kubernetes │         9         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-deploy2.yaml             │ kubernetes │         9         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-deploy3.yaml             │ kubernetes │         9         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-loadbalancer.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-svc1.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-svc2.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-svc3.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-svc4.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-svc5.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-svc6.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_10.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_11.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_12.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_13.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_14.yaml           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_15.yaml           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_16.yaml           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_17.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_18.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_3.yaml            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_4.yaml            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_5.yaml            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_6.yaml            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_8.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller-v1.7.1_9.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller_10.yaml                  │ kubernetes │        16         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-controller_9.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_10.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_11.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_12.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_13.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_14.yaml                  │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_15.yaml                  │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_16.yaml                  │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_17.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_18.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_3.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_4.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_5.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_6.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_7.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_8.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-deployment_9.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-helm1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-role.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-role1.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-role2.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-role3.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-rolebinding.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-rolebinding1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-rolebinding2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-rolebinding3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-sa.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-sa1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-sa2.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-sa3.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-service.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-srv.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-srv1.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-svc.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-test-linux-albums.yaml              │ kubernetes │        17         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-test-linux-albums1.yaml             │ kubernetes │        17         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-test-linux-albums1_1.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-test-linux-albums1_2.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-test-linux-albums_1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-test-linux-albums_2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-test-namespace.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx-test-namespace1.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_10.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_11.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_12.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_13.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_14.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_15.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_16.yaml                      │ kubernetes │         8         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_17.yaml                      │ kubernetes │         8         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_2.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_3.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_4.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_5.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_6.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_7.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_8.yaml                       │ kubernetes │        10         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx.1.10.0_9.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_10.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_11.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_12.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_13.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_14.yaml                          │ kubernetes │        14         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_15.yaml                          │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_16.yaml                          │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_17.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_18.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_2.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_3.yaml                           │ kubernetes │         3         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_4.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_5.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_6.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_7.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_8.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx105_9.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx106.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_11.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_12.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_13.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_14.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_15.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_16.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_17.yaml                          │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_18.yaml                          │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_2.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_3.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_4.yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_5.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_6.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_7.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_8.yaml                           │ kubernetes │         9         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx109_9.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_10.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_11.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_12.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_13.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_14.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_15.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_16.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_17.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_18.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_2.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_3.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_4.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_5.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_6.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_7.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_8.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx10_9.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx12.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx16.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx17.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_10.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_11.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_12.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_13.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_14.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_15.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_16.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_17.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_2.yaml                            │ kubernetes │         3         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_3.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_4.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_5.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_6.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_7.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_8.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx19_9.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_10.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_11.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_12.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_13.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_14.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_15.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_16.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_17.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_18.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_2.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_3.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_4.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_5.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_6.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_7.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_8.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx23_9.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx25.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx28.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx3.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx31.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx35.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx36.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_10.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_11.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_12.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_13.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_14.yaml                           │ kubernetes │         9         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_15.yaml                           │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_16.yaml                           │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_17.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_18.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_2.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_3.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_4.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_5.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_6.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_7.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_8.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx39_9.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx4.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx47.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx48.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx52.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx60.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx61.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_10.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_11.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_12.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_13.yaml                            │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_14.yaml                            │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_15.yaml                            │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_16.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_17.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_2.yaml                             │ kubernetes │         3         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_3.yaml                             │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_4.yaml                             │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_5.yaml                             │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_6.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_7.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_8.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx6_9.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx78.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_10.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_11.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_12.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_13.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_14.yaml                           │ kubernetes │        14         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_15.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_16.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_17.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_18.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_19.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_2.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_3.yaml                            │ kubernetes │         3         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_4.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_5.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_6.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_7.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_8.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx79_9.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx82.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx83.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_10.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_11.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_12.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_13.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_14.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_15.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_16.yaml                           │ kubernetes │        13         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_17.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_18.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_2.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_3.yaml                            │ kubernetes │         3         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_4.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_5.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_6.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_7.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_8.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx86_9.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_10.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_11.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_12.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_13.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_14.yaml                           │ kubernetes │        10         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_15.yaml                           │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_16.yaml                           │ kubernetes │         7         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_17.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_18.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_2.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_3.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_4.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_5.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_6.yaml                            │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_7.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_8.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx89_9.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx90.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nginx99.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nodeport-service.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nodeport-service1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nodeport-service2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nodeport-service3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nodeport-service4.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-nodeport-service5.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-np.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-oauth.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-patch.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-path-rules-definition-file.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-path.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-php.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-policy.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-policy1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-policy2.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-policy3.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-policy4.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-policy5.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-policy6.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-policy7.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-policy8.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-polybot.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-prod.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-prod1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-production.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-prometheus.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-prometheus1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-proxy.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-pt.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-pt1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-pt2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-pt3.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-pvc.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-pvc_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-pvc_2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-pvc_3.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-pvc_4.yaml                                │ kubernetes │         4         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-questverse.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-queue.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-queue1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-queue2.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-queue3.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-ratelimit.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-rbac.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-rbac1.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-rbac1_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-rbac2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-rbac_1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-red.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-11.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-12.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-2.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-21.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-33.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-34.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-ckad.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-ckad1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-ckad10.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-ckad11.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-ckad12.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-ckad2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-ckad3.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-ckad4.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-ckad5.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-ckad6.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-ckad7.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-ckad8.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-ckad9.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-simple.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource-simple1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource10.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource11.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource11_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource11_2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource12.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource14.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource15.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource16.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource17.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource17_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource17_2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource18.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource19.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource1_1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource1_2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource2.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource20.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource21.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource3.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource3_1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource3_2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource4.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource5.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource6.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource7.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource8.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resource9.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-resources1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-route.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-route1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-routes.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-routes1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-rps.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-rps1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-rules1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-rules2.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-rules4.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-rules5.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-rules6.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-sa.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-samesite.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-samesite1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-samesite1_1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-samesite_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-sentimentAnalysis.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-serv.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-serv1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-serv2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service-account.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service-account1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service-account1_1.yaml                   │ kubernetes │         3         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service-account1_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service-account1_3.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service-account1_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service-account_1.yaml                    │ kubernetes │         3         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service-account_2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service-account_3.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service-account_4.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service-gw.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service10.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service11.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service12.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service13.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service14.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service15.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service16.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service17.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service18.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service19.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service20.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service21.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service22.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service23.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service24.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service25.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service27.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service28.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service29.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service30.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service31.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service32.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service33.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service34.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service35.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service36.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service37.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service38.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service39.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service4.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service40.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service41.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service42.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service43.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service44.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service45.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service46.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service47.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service48.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service49.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service5.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service50.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service6.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service8.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-service9.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-share-pod.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-shkeeper.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-single-host.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv.k8s.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv10.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv11.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv12.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv13.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv14.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv15.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv16.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv17.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv18.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv19.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv20.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv21.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv22.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv23.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv24.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv25.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv26.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv27.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv28.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv29.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv3.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv30.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv31.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv32.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv33.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv34.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv35.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv36.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv37.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv38.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv39.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv4.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv40.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv41.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv42.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv43.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv44.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv45.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv46.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv47.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv48.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv5.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv50_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv51.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv52.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv52_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv53.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv54.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv55.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv56.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv57.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv58.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv59.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv6.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv60.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv61.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv62.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv63.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv64.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv65.yaml                                │ kubernetes │         0         │
└───────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


ingress-network-policy1.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): NetworkPolicy 'monitoring-network-nginx-policy' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 ingress-network-policy1.yaml:7-20
────────────────────────────────────────
   7 ┌   ingress:
   8 │   - ports:
   9 │     - port: 10254
  10 │       protocol: TCP
  11 │     from:
  12 │       - namespaceSelector:
  13 │           matchLabels:
  14 │             kubernetes.io/metadata.name: cattle-monitoring-system
  15 └   podSelector:
  ..   
────────────────────────────────────────



ingress-network-policy3.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): NetworkPolicy 'monitoring-network-nginx-policy' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 ingress-network-policy3.yaml:7-20
────────────────────────────────────────
   7 ┌   ingress:
   8 │   - ports:
   9 │     - port: 10254
  10 │       protocol: TCP
  11 │     from:
  12 │       - namespaceSelector:
  13 │           matchLabels:
  14 │             kubernetes.io/metadata.name: cattle-monitoring-system
  15 └   podSelector:
  ..   
────────────────────────────────────────



ingress-nginx-admission-clusterrole.yaml (kubernetes)
=====================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx-admission-clusterrole.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx-admission-clusterrole1.yaml (kubernetes)
======================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx-admission-clusterrole1.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx-admission-clusterrole2.yaml (kubernetes)
======================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx-admission-clusterrole2.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx-admission-clusterrole3.yaml (kubernetes)
======================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx-admission-clusterrole3.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx-admission-create-job.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-admission-create-job.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-admission-create-job.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-admission-create-job.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-admission-create-job.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-admission-create-job.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-admission-create-job.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-admission-create-job.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx-admission-create-job1.yaml (kubernetes)
=====================================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-admission-create-job1.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-admission-create-job1.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-admission-create-job1.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-admission-create-job1.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-admission-create-job1.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-admission-create-job1.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-admission-create-job1.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx-admission-create-job2.yaml (kubernetes)
=====================================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-admission-create-job2.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-admission-create-job2.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-admission-create-job2.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-admission-create-job2.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-admission-create-job2.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-admission-create-job2.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-admission-create-job2.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx-admission-create-job3.yaml (kubernetes)
=====================================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-admission-create-job3.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-admission-create-job3.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-admission-create-job3.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-admission-create-job3.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-admission-create-job3.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-admission-create-job3.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-admission-create-job3.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx-admission-patch-job.yaml (kubernetes)
===================================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-admission-patch-job.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-admission-patch-job.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-admission-patch-job.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-admission-patch-job.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-admission-patch-job.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-admission-patch-job.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-admission-patch-job.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx-admission-patch-job1.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-admission-patch-job1.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-admission-patch-job1.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-admission-patch-job1.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-admission-patch-job1.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-admission-patch-job1.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-admission-patch-job1.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-admission-patch-job1.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx-admission-patch-job2.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-admission-patch-job2.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-admission-patch-job2.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-admission-patch-job2.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-admission-patch-job2.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-admission-patch-job2.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-admission-patch-job2.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-admission-patch-job2.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx-admission-patch-job3.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-admission-patch-job3.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-admission-patch-job3.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-admission-patch-job3.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-admission-patch-job3.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-admission-patch-job3.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-admission-patch-job3.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-admission-patch-job3.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx-admission-role.yaml (kubernetes)
==============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-admission-role.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ""
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx-admission-role1.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-admission-role1.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ""
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx-admission-role2.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-admission-role2.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ""
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx-admission-role3.yaml (kubernetes)
===============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-admission-role3.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ""
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx-baremetal_14.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-baremetal_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-baremetal_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-baremetal_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-baremetal_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-baremetal_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx-baremetal_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-baremetal_14.yaml:33-121
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-baremetal_14.yaml:34-112
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



ingress-nginx-baremetal_15.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-baremetal_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-baremetal_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-baremetal_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-baremetal_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-baremetal_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-baremetal_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-baremetal_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx-baremetal_16.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-baremetal_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-baremetal_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-baremetal_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-baremetal_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-baremetal_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-baremetal_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-baremetal_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx-baremetal_3.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-baremetal_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx-baremetal_4.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-baremetal_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx-baremetal_5.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx-baremetal_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx-baremetal_6.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx-baremetal_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx-clusterrole.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx-clusterrole.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx-clusterrole1.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx-clusterrole1.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx-clusterrole2.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx-clusterrole2.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx-clusterrole3.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx-clusterrole3.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ""
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx-controller-deploy.yaml (kubernetes)
=================================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-controller-deploy.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-controller-deploy.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-controller-deploy.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-controller-deploy.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-controller-deploy.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx-controller-deploy.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-controller-deploy.yaml:33-122
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-controller-deploy.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-nginx-controller-deploy1.yaml (kubernetes)
==================================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-controller-deploy1.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-controller-deploy1.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-controller-deploy1.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-controller-deploy1.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-controller-deploy1.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx-controller-deploy1.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-controller-deploy1.yaml:33-122
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-controller-deploy1.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-nginx-controller-deploy2.yaml (kubernetes)
==================================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-controller-deploy2.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-controller-deploy2.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-controller-deploy2.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-controller-deploy2.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-controller-deploy2.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx-controller-deploy2.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-controller-deploy2.yaml:33-122
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-controller-deploy2.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-nginx-controller-deploy3.yaml (kubernetes)
==================================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-controller-deploy3.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-controller-deploy3.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-controller-deploy3.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-controller-deploy3.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-controller-deploy3.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx-controller-deploy3.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-controller-deploy3.yaml:33-122
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-controller-deploy3.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-nginx-controller-v1.7.1_14.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_14.yaml:29-112
────────────────────────────────────────
  29 ┌       containers:
  30 │       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



ingress-nginx-controller-v1.7.1_15.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx-controller-v1.7.1_16.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx-controller-v1.7.1_3.yaml (kubernetes)
===================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx-controller-v1.7.1_4.yaml (kubernetes)
===================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx-controller-v1.7.1_5.yaml (kubernetes)
===================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx-controller-v1.7.1_6.yaml (kubernetes)
===================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx-controller-v1.7.1_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx-controller_10.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 98, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 7, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:28-82
────────────────────────────────────────
  28 ┌       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  33 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  34 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  36 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'nginx-ingress-controller' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:10-82
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: ingress-nginx
  14 │       app.kubernetes.io/part-of: ingress-nginx
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/name: ingress-nginx
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:28-82
────────────────────────────────────────
  28 ┌       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  33 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  34 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  36 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:28-82
────────────────────────────────────────
  28 ┌       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  33 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  34 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  36 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:28-82
────────────────────────────────────────
  28 ┌       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  33 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  34 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  36 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:28-82
────────────────────────────────────────
  28 ┌       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  33 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  34 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  36 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:28-82
────────────────────────────────────────
  28 ┌       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  33 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  34 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  36 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:28-82
────────────────────────────────────────
  28 ┌       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  33 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  34 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  36 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:28-82
────────────────────────────────────────
  28 ┌       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  33 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  34 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  36 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:28-82
────────────────────────────────────────
  28 ┌       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  33 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  34 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  36 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:28-82
────────────────────────────────────────
  28 ┌       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  33 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  34 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  36 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:28-82
────────────────────────────────────────
  28 ┌       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  33 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  34 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  36 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-ingress-controller" of deployment "nginx-ingress-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:28-82
────────────────────────────────────────
  28 ┌       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  33 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  34 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  36 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-ingress-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-ingress-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:24-82
────────────────────────────────────────
  24 ┌       terminationGracePeriodSeconds: 300
  25 │       serviceAccountName: nginx-ingress-serviceaccount
  26 │       hostNetwork: true
  27 │       containers:
  28 │       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 └         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx-ingress-controller in deployment nginx-ingress-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-controller_10.yaml:28-82
────────────────────────────────────────
  28 ┌       - name: nginx-ingress-controller
  29 │         image: registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.26.1
  30 │         args:
  31 │         - /nginx-ingress-controller
  32 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  33 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  34 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  35 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  36 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────



ingress-nginx-deployment_14.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-nginx-deployment_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-deployment_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-nginx-deployment_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-deployment_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-deployment_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-deployment_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-deployment_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx-deployment_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx-deployment_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx-deployment_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-deployment_14.yaml:27-111
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-deployment_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-nginx-deployment_15.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx-deployment_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx-deployment_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-deployment_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-deployment_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-deployment_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-deployment_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-deployment_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-deployment_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-deployment_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx-deployment_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx-deployment_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx-deployment_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-deployment_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx-deployment_16.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx-deployment_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx-deployment_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-deployment_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-deployment_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-deployment_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-deployment_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-deployment_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-deployment_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-deployment_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx-deployment_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx-deployment_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx-deployment_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx-deployment_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx-deployment_3.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-deployment_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx-deployment_4.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-deployment_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx-deployment_5.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx-deployment_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx-deployment_6.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx-deployment_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx-role.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-role.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ""
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx-role1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-role1.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ""
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx-role2.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-role2.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ""
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx-role3.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx-role3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ""
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx-srv.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'ingress-nginx-srv' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



ingress-nginx-srv1.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'ingress-nginx-srv' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



ingress-nginx-test-linux-albums.yaml (kubernetes)
=================================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'albums-linux1' of 'deployment' 'albums-linux1' in 'ingress-nginx-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "albums-linux1" of deployment "albums-linux1" in "ingress-nginx-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment albums-linux1 in ingress-nginx-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container albums-linux1 in ingress-nginx-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment albums-linux1 in ingress-nginx-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-test-linux-albums.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 └         - name: RESOURCE
  ..   
────────────────────────────────────────



ingress-nginx-test-linux-albums1.yaml (kubernetes)
==================================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'albums-linux1' of 'deployment' 'albums-linux1' in 'ingress-nginx-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "albums-linux1" of deployment "albums-linux1" in "ingress-nginx-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment albums-linux1 in ingress-nginx-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container albums-linux1 in ingress-nginx-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment albums-linux1 in ingress-nginx-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx-test-linux-albums1.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 └         - name: RESOURCE
  ..   
────────────────────────────────────────



ingress-nginx.1.10.0_12.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx.1.10.0_12.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - admissionregistration.k8s.io
  19 │   resources:
  20 │   - validatingwebhookconfigurations
  21 │   verbs:
  22 │   - get
  23 └   - update
────────────────────────────────────────



ingress-nginx.1.10.0_14.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx.1.10.0_14.yaml:18-24
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - secrets
  22 │   verbs:
  23 │   - get
  24 └   - create
────────────────────────────────────────



ingress-nginx.1.10.0_16.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx.1.10.0_16.yaml:31-53
────────────────────────────────────────
  31 ┌       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --secret-name=ingress-nginx-admission
  39 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx.1.10.0_16.yaml:31-53
────────────────────────────────────────
  31 ┌       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --secret-name=ingress-nginx-admission
  39 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx.1.10.0_16.yaml:31-53
────────────────────────────────────────
  31 ┌       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --secret-name=ingress-nginx-admission
  39 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx.1.10.0_16.yaml:31-53
────────────────────────────────────────
  31 ┌       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --secret-name=ingress-nginx-admission
  39 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx.1.10.0_16.yaml:31-53
────────────────────────────────────────
  31 ┌       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --secret-name=ingress-nginx-admission
  39 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job ingress-nginx-admission-create in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-nginx.1.10.0_16.yaml:4-16
────────────────────────────────────────
   4 ┌   name: ingress-nginx-admission-create
   5 │   namespace: default
   6 │   annotations:
   7 │     helm.sh/hook: pre-install,pre-upgrade
   8 │     helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
   9 │   labels:
  10 │     helm.sh/chart: ingress-nginx-4.10.0
  11 │     app.kubernetes.io/name: ingress-nginx
  12 └     app.kubernetes.io/instance: ingress-nginx
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx.1.10.0_16.yaml:30-57
────────────────────────────────────────
  30 ┌       containers:
  31 │       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx.1.10.0_16.yaml:31-53
────────────────────────────────────────
  31 ┌       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --secret-name=ingress-nginx-admission
  39 └         env:
  ..   
────────────────────────────────────────



ingress-nginx.1.10.0_17.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx.1.10.0_17.yaml:31-55
────────────────────────────────────────
  31 ┌       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --patch-mutating=false
  39 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx.1.10.0_17.yaml:31-55
────────────────────────────────────────
  31 ┌       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --patch-mutating=false
  39 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx.1.10.0_17.yaml:31-55
────────────────────────────────────────
  31 ┌       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --patch-mutating=false
  39 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx.1.10.0_17.yaml:31-55
────────────────────────────────────────
  31 ┌       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --patch-mutating=false
  39 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx.1.10.0_17.yaml:31-55
────────────────────────────────────────
  31 ┌       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --patch-mutating=false
  39 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job ingress-nginx-admission-patch in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-nginx.1.10.0_17.yaml:4-16
────────────────────────────────────────
   4 ┌   name: ingress-nginx-admission-patch
   5 │   namespace: default
   6 │   annotations:
   7 │     helm.sh/hook: post-install,post-upgrade
   8 │     helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
   9 │   labels:
  10 │     helm.sh/chart: ingress-nginx-4.10.0
  11 │     app.kubernetes.io/name: ingress-nginx
  12 └     app.kubernetes.io/instance: ingress-nginx
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx.1.10.0_17.yaml:30-59
────────────────────────────────────────
  30 ┌       containers:
  31 │       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 └         - --patch-mutating=false
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx.1.10.0_17.yaml:31-55
────────────────────────────────────────
  31 ┌       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.0@sha256:44d1d0e9f19c63f58b380c5fddaca7cf22c7cee564adeff365225a5df5ef3334
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --patch-mutating=false
  39 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-nginx.1.10.0_2.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx.1.10.0_2.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   - endpoints
  18 │   - nodes
  19 │   - pods
  20 │   - secrets
  21 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx.1.10.0_4.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx.1.10.0_4.yaml:21-31
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - pods
  26 │   - secrets
  27 │   - endpoints
  28 │   verbs:
  29 └   - get
  ..   
────────────────────────────────────────



ingress-nginx.1.10.0_8.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx.1.10.0_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx.1.10.0_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx.1.10.0_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx.1.10.0_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx.1.10.0_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx.1.10.0_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ingress-nginx-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-nginx.1.10.0_8.yaml:4-13
────────────────────────────────────────
   4 ┌   labels:
   5 │     helm.sh/chart: ingress-nginx-4.10.0
   6 │     app.kubernetes.io/name: ingress-nginx
   7 │     app.kubernetes.io/instance: ingress-nginx
   8 │     app.kubernetes.io/version: 1.10.0
   9 │     app.kubernetes.io/part-of: ingress-nginx
  10 │     app.kubernetes.io/managed-by: Helm
  11 │     app.kubernetes.io/component: controller
  12 │   name: ingress-nginx-controller
  13 └   namespace: default
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx.1.10.0_8.yaml:34-123
────────────────────────────────────────
  34 ┌       dnsPolicy: ClusterFirst
  35 │       containers:
  36 │       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 └               command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx.1.10.0_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.0@sha256:42b3f0e5d0846876b1791cd3afeb5f1cbbe4259d6f35651dcc1b5c980925379c
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────



ingress-nginx105_14.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-nginx105_14.yaml:32-109
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx105_14.yaml:32-109
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-nginx105_14.yaml:32-109
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx105_14.yaml:32-109
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx105_14.yaml:32-109
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx105_14.yaml:32-109
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx105_14.yaml:32-109
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx105_14.yaml:32-109
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 ingress-nginx105_14.yaml:32-109
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx105_14.yaml:32-109
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx105_14.yaml:32-109
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx105_14.yaml:31-126
────────────────────────────────────────
  31 ┌       containers:
  32 │       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx105_14.yaml:32-109
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



ingress-nginx105_15.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx105_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx105_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx105_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx105_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx105_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx105_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx105_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx105_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx105_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx105_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx105_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx105_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx105_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx105_16.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx105_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx105_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx105_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx105_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx105_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx105_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx105_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx105_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx105_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx105_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx105_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx105_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx105_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx105_3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-nginx105_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-nginx105_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx105_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx105_4.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx105_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx105_5.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx105_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx105_6.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx105_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx109_13.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'my-ingress-ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx109_13.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - admissionregistration.k8s.io
  19 │   resources:
  20 │   - validatingwebhookconfigurations
  21 │   verbs:
  22 │   - get
  23 └   - update
────────────────────────────────────────



ingress-nginx109_15.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'my-ingress-ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx109_15.yaml:18-24
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - secrets
  22 │   verbs:
  23 │   - get
  24 └   - create
────────────────────────────────────────



ingress-nginx109_17.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'my-ingress-ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx109_17.yaml:31-53
────────────────────────────────────────
  31 ┌       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=my-ingress-ingress-nginx-controller-admission,my-ingress-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --secret-name=my-ingress-ingress-nginx-admission
  39 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'my-ingress-ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx109_17.yaml:31-53
────────────────────────────────────────
  31 ┌       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=my-ingress-ingress-nginx-controller-admission,my-ingress-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --secret-name=my-ingress-ingress-nginx-admission
  39 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'my-ingress-ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx109_17.yaml:31-53
────────────────────────────────────────
  31 ┌       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=my-ingress-ingress-nginx-controller-admission,my-ingress-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --secret-name=my-ingress-ingress-nginx-admission
  39 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'my-ingress-ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx109_17.yaml:31-53
────────────────────────────────────────
  31 ┌       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=my-ingress-ingress-nginx-controller-admission,my-ingress-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --secret-name=my-ingress-ingress-nginx-admission
  39 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'my-ingress-ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx109_17.yaml:31-53
────────────────────────────────────────
  31 ┌       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=my-ingress-ingress-nginx-controller-admission,my-ingress-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --secret-name=my-ingress-ingress-nginx-admission
  39 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job my-ingress-ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx109_17.yaml:30-57
────────────────────────────────────────
  30 ┌       containers:
  31 │       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=my-ingress-ingress-nginx-controller-admission,my-ingress-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 └         - --secret-name=my-ingress-ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job my-ingress-ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx109_17.yaml:31-53
────────────────────────────────────────
  31 ┌       - name: create
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - create
  36 │         - --host=my-ingress-ingress-nginx-controller-admission,my-ingress-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --secret-name=my-ingress-ingress-nginx-admission
  39 └         env:
  ..   
────────────────────────────────────────



ingress-nginx109_18.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'my-ingress-ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx109_18.yaml:31-55
────────────────────────────────────────
  31 ┌       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=my-ingress-ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --patch-mutating=false
  39 └         - --secret-name=my-ingress-ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'my-ingress-ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx109_18.yaml:31-55
────────────────────────────────────────
  31 ┌       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=my-ingress-ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --patch-mutating=false
  39 └         - --secret-name=my-ingress-ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'my-ingress-ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx109_18.yaml:31-55
────────────────────────────────────────
  31 ┌       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=my-ingress-ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --patch-mutating=false
  39 └         - --secret-name=my-ingress-ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'my-ingress-ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx109_18.yaml:31-55
────────────────────────────────────────
  31 ┌       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=my-ingress-ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --patch-mutating=false
  39 └         - --secret-name=my-ingress-ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'my-ingress-ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx109_18.yaml:31-55
────────────────────────────────────────
  31 ┌       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=my-ingress-ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --patch-mutating=false
  39 └         - --secret-name=my-ingress-ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job my-ingress-ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx109_18.yaml:30-59
────────────────────────────────────────
  30 ┌       containers:
  31 │       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=my-ingress-ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 └         - --patch-mutating=false
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job my-ingress-ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx109_18.yaml:31-55
────────────────────────────────────────
  31 ┌       - name: patch
  32 │         image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.1@sha256:36d05b4077fb8e3d13663702fa337f124675ba8667cbd949c03a8e8ea6fa4366
  33 │         imagePullPolicy: IfNotPresent
  34 │         args:
  35 │         - patch
  36 │         - --webhook-name=my-ingress-ingress-nginx-admission
  37 │         - --namespace=$(POD_NAMESPACE)
  38 │         - --patch-mutating=false
  39 └         - --secret-name=my-ingress-ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-nginx109_2.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'my-ingress-ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx109_2.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - configmaps
  17 │   - endpoints
  18 │   - nodes
  19 │   - pods
  20 │   - secrets
  21 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx109_4.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'my-ingress-ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx109_4.yaml:21-31
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - pods
  26 │   - secrets
  27 │   - endpoints
  28 │   verbs:
  29 └   - get
  ..   
────────────────────────────────────────



ingress-nginx109_8.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'my-ingress-ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx109_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.1@sha256:e24f39d3eed6bcc239a56f20098878845f62baa34b9f2be2fd2c38ce9fb0f29e
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'my-ingress-ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx109_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.1@sha256:e24f39d3eed6bcc239a56f20098878845f62baa34b9f2be2fd2c38ce9fb0f29e
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'my-ingress-ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx109_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.1@sha256:e24f39d3eed6bcc239a56f20098878845f62baa34b9f2be2fd2c38ce9fb0f29e
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'my-ingress-ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx109_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.1@sha256:e24f39d3eed6bcc239a56f20098878845f62baa34b9f2be2fd2c38ce9fb0f29e
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'my-ingress-ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx109_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.1@sha256:e24f39d3eed6bcc239a56f20098878845f62baa34b9f2be2fd2c38ce9fb0f29e
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'my-ingress-ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx109_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.1@sha256:e24f39d3eed6bcc239a56f20098878845f62baa34b9f2be2fd2c38ce9fb0f29e
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-ingress-ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-ingress-ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx109_8.yaml:34-123
────────────────────────────────────────
  34 ┌       dnsPolicy: ClusterFirst
  35 │       containers:
  36 │       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.1@sha256:e24f39d3eed6bcc239a56f20098878845f62baa34b9f2be2fd2c38ce9fb0f29e
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 └               command:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment my-ingress-ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx109_8.yaml:36-115
────────────────────────────────────────
  36 ┌       - name: controller
  37 │         image: registry.k8s.io/ingress-nginx/controller:v1.10.1@sha256:e24f39d3eed6bcc239a56f20098878845f62baa34b9f2be2fd2c38ce9fb0f29e
  38 │         imagePullPolicy: IfNotPresent
  39 │         lifecycle:
  40 │           preStop:
  41 │             exec:
  42 │               command:
  43 │               - /wait-shutdown
  44 └         args:
  ..   
────────────────────────────────────────



ingress-nginx10_14.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-nginx10_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx10_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-nginx10_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx10_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx10_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx10_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx10_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx10_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx10_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx10_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx10_14.yaml:33-117
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx10_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-nginx10_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx10_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx10_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx10_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx10_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx10_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx10_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx10_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx10_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx10_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx10_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx10_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx10_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx10_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx10_16.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx10_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx10_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx10_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx10_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx10_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx10_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx10_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx10_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx10_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx10_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx10_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx10_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx10_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx10_3.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx10_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx10_4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx10_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx10_5.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx10_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx10_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx10_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx19_13.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-nginx19_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx19_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-nginx19_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx19_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx19_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx19_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx19_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx19_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx19_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx19_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx19_13.yaml:27-110
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx19_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



ingress-nginx19_14.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx19_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx19_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx19_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx19_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx19_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx19_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx19_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx19_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx19_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx19_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx19_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx19_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx19_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx19_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx19_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx19_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx19_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx19_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx19_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx19_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx19_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx19_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx19_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx19_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx19_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx19_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx19_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx19_2.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-nginx19_2.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-nginx-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-nginx19_2.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx19_2.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx19_3.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx19_3.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx19_4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx19_4.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx19_5.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx19_5.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx23_14.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-nginx23_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx23_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-nginx23_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx23_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx23_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx23_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx23_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx23_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx23_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx23_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx23_14.yaml:33-117
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx23_14.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-nginx23_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx23_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx23_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx23_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx23_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx23_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx23_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx23_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx23_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx23_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx23_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx23_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx23_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx23_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx23_16.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx23_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx23_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx23_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx23_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx23_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx23_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx23_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx23_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx23_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx23_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx23_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx23_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx23_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx23_3.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx23_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx23_4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx23_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx23_5.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx23_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx23_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx23_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx39_14.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx39_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx39_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx39_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx39_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx39_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx39_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx39_14.yaml:33-120
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx39_14.yaml:34-111
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --election-id=ingress-nginx-leader
  37 │         - --controller-class=k8s.io/ingress-nginx
  38 │         - --ingress-class=nginx
  39 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  40 │         - --validating-webhook=:8443
  41 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  42 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



ingress-nginx39_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx39_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx39_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx39_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx39_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx39_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx39_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx39_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx39_16.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx39_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx39_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx39_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx39_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx39_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx39_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx39_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx39_3.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx39_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx39_4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx39_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx39_5.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx39_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx39_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx39_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx6_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-nginx6_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx6_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-nginx6_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx6_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx6_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx6_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx6_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx6_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx6_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx6_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx6_13.yaml:27-110
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx6_13.yaml:28-101
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --election-id=ingress-nginx-leader
  31 │         - --controller-class=k8s.io/ingress-nginx
  32 │         - --ingress-class=nginx
  33 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  34 │         - --validating-webhook=:8443
  35 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  36 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



ingress-nginx6_14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx6_15.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx6_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-nginx6_2.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-nginx-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-nginx6_2.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx6_2.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx6_3.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx6_3.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx6_4.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx6_4.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx6_5.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx6_5.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx79_14.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-nginx79_14.yaml:32-122
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx79_14.yaml:32-122
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-nginx79_14.yaml:32-122
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx79_14.yaml:32-122
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx79_14.yaml:32-122
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx79_14.yaml:32-122
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx79_14.yaml:32-122
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx79_14.yaml:32-122
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 ingress-nginx79_14.yaml:32-122
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx79_14.yaml:32-122
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx79_14.yaml:32-122
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx79_14.yaml:31-139
────────────────────────────────────────
  31 ┌       containers:
  32 │       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx79_14.yaml:32-122
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



ingress-nginx79_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx79_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx79_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx79_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx79_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx79_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx79_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx79_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx79_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx79_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx79_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx79_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx79_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx79_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx79_16.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx79_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx79_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx79_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx79_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx79_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx79_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx79_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx79_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx79_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx79_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx79_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx79_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx79_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx79_3.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-nginx79_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-nginx79_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx79_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx79_4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx79_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx79_5.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx79_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx79_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx79_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx86_14.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-nginx86_14.yaml:29-103
────────────────────────────────────────
  29 ┌       - args:
  30 │         - /nginx-ingress-controller
  31 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  32 │         - --election-id=ingress-controller-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx86_14.yaml:29-103
────────────────────────────────────────
  29 ┌       - args:
  30 │         - /nginx-ingress-controller
  31 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  32 │         - --election-id=ingress-controller-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-nginx86_14.yaml:29-103
────────────────────────────────────────
  29 ┌       - args:
  30 │         - /nginx-ingress-controller
  31 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  32 │         - --election-id=ingress-controller-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx86_14.yaml:29-103
────────────────────────────────────────
  29 ┌       - args:
  30 │         - /nginx-ingress-controller
  31 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  32 │         - --election-id=ingress-controller-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx86_14.yaml:29-103
────────────────────────────────────────
  29 ┌       - args:
  30 │         - /nginx-ingress-controller
  31 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  32 │         - --election-id=ingress-controller-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx86_14.yaml:29-103
────────────────────────────────────────
  29 ┌       - args:
  30 │         - /nginx-ingress-controller
  31 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  32 │         - --election-id=ingress-controller-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx86_14.yaml:29-103
────────────────────────────────────────
  29 ┌       - args:
  30 │         - /nginx-ingress-controller
  31 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  32 │         - --election-id=ingress-controller-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx86_14.yaml:29-103
────────────────────────────────────────
  29 ┌       - args:
  30 │         - /nginx-ingress-controller
  31 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  32 │         - --election-id=ingress-controller-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx86_14.yaml:29-103
────────────────────────────────────────
  29 ┌       - args:
  30 │         - /nginx-ingress-controller
  31 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  32 │         - --election-id=ingress-controller-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx86_14.yaml:29-103
────────────────────────────────────────
  29 ┌       - args:
  30 │         - /nginx-ingress-controller
  31 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  32 │         - --election-id=ingress-controller-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx86_14.yaml:28-110
────────────────────────────────────────
  28 ┌       containers:
  29 │       - args:
  30 │         - /nginx-ingress-controller
  31 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  32 │         - --election-id=ingress-controller-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx86_14.yaml:29-103
────────────────────────────────────────
  29 ┌       - args:
  30 │         - /nginx-ingress-controller
  31 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  32 │         - --election-id=ingress-controller-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-nginx86_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx86_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx86_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx86_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx86_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx86_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx86_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx86_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx86_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx86_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx86_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx86_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx86_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx86_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx86_16.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 10, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-nginx86_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-nginx86_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx86_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx86_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx86_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx86_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx86_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx86_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx86_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-nginx86_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-nginx86_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-nginx86_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx86_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx86_3.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-nginx86_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-nginx86_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx86_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx86_4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx86_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx86_5.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx86_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx86_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx86_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-nginx89_14.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx89_14.yaml:36-117
────────────────────────────────────────
  36 ┌       - args:
  37 │         - /nginx-ingress-controller
  38 │         - --election-id=ingress-nginx-leader
  39 │         - --controller-class=k8s.io/ingress-nginx
  40 │         - --ingress-class=nginx
  41 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  42 │         - --validating-webhook=:8443
  43 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  44 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-nginx89_14.yaml:36-117
────────────────────────────────────────
  36 ┌       - args:
  37 │         - /nginx-ingress-controller
  38 │         - --election-id=ingress-nginx-leader
  39 │         - --controller-class=k8s.io/ingress-nginx
  40 │         - --ingress-class=nginx
  41 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  42 │         - --validating-webhook=:8443
  43 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  44 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx89_14.yaml:36-117
────────────────────────────────────────
  36 ┌       - args:
  37 │         - /nginx-ingress-controller
  38 │         - --election-id=ingress-nginx-leader
  39 │         - --controller-class=k8s.io/ingress-nginx
  40 │         - --ingress-class=nginx
  41 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  42 │         - --validating-webhook=:8443
  43 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  44 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-nginx89_14.yaml:36-117
────────────────────────────────────────
  36 ┌       - args:
  37 │         - /nginx-ingress-controller
  38 │         - --election-id=ingress-nginx-leader
  39 │         - --controller-class=k8s.io/ingress-nginx
  40 │         - --ingress-class=nginx
  41 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  42 │         - --validating-webhook=:8443
  43 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  44 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx89_14.yaml:36-117
────────────────────────────────────────
  36 ┌       - args:
  37 │         - /nginx-ingress-controller
  38 │         - --election-id=ingress-nginx-leader
  39 │         - --controller-class=k8s.io/ingress-nginx
  40 │         - --ingress-class=nginx
  41 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  42 │         - --validating-webhook=:8443
  43 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  44 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-nginx89_14.yaml:36-117
────────────────────────────────────────
  36 ┌       - args:
  37 │         - /nginx-ingress-controller
  38 │         - --election-id=ingress-nginx-leader
  39 │         - --controller-class=k8s.io/ingress-nginx
  40 │         - --ingress-class=nginx
  41 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  42 │         - --validating-webhook=:8443
  43 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  44 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 ingress-nginx89_14.yaml:36-117
────────────────────────────────────────
  36 ┌       - args:
  37 │         - /nginx-ingress-controller
  38 │         - --election-id=ingress-nginx-leader
  39 │         - --controller-class=k8s.io/ingress-nginx
  40 │         - --ingress-class=nginx
  41 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  42 │         - --validating-webhook=:8443
  43 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  44 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx89_14.yaml:34-133
────────────────────────────────────────
  34 ┌       nodeName: llmops-worker
  35 │       containers:
  36 │       - args:
  37 │         - /nginx-ingress-controller
  38 │         - --election-id=ingress-nginx-leader
  39 │         - --controller-class=k8s.io/ingress-nginx
  40 │         - --ingress-class=nginx
  41 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  42 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx89_14.yaml:36-117
────────────────────────────────────────
  36 ┌       - args:
  37 │         - /nginx-ingress-controller
  38 │         - --election-id=ingress-nginx-leader
  39 │         - --controller-class=k8s.io/ingress-nginx
  40 │         - --ingress-class=nginx
  41 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  42 │         - --validating-webhook=:8443
  43 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  44 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



ingress-nginx89_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx89_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx89_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx89_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx89_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx89_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx89_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx89_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-nginx89_16.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-nginx89_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-nginx89_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-nginx89_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-nginx89_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-nginx89_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-nginx89_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-nginx89_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-nginx89_3.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx89_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-nginx89_4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-nginx89_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-nginx89_5.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-nginx89_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-nginx89_6.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-nginx89_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-pvc_4.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0014 (HIGH): Container 'keycloak' of Deployment 'keycloak' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-pvc_4.yaml:23-95
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-pvc_4.yaml:23-95
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-pvc_4.yaml:23-95
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container keycloak in deployment keycloak (namespace: test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-pvc_4.yaml:23-95
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────



ingress-rbac.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'traefik-ingress-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-rbac.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - services
  10 │   - endpoints
  11 │   - secrets
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
────────────────────────────────────────



ingress-rbac1.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'traefik-ingress-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-rbac1.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - services
  10 │   - endpoints
  11 │   - secrets
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
────────────────────────────────────────



ingress-service-account1_1.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-service-account1_1.yaml:58-66
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resourceNames:
  61 │   - ingress-controller-leader
  62 │   resources:
  63 │   - configmaps
  64 │   verbs:
  65 │   - get
  66 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-service-account1_1.yaml:67-72
────────────────────────────────────────
  67 ┌ - apiGroups:
  68 │   - ''
  69 │   resources:
  70 │   - configmaps
  71 │   verbs:
  72 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-service-account1_1.yaml:17-27
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - configmaps
  21 │   - pods
  22 │   - secrets
  23 │   - endpoints
  24 │   verbs:
  25 └   - get
  ..   
────────────────────────────────────────



ingress-service-account1_3.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-service-account1_3.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   - endpoints
  15 │   - nodes
  16 │   - pods
  17 │   - secrets
  18 └   - namespaces
  ..   
────────────────────────────────────────



ingress-service-account_1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-service-account_1.yaml:58-66
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resourceNames:
  61 │   - ingress-controller-leader
  62 │   resources:
  63 │   - configmaps
  64 │   verbs:
  65 │   - get
  66 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-service-account_1.yaml:67-72
────────────────────────────────────────
  67 ┌ - apiGroups:
  68 │   - ''
  69 │   resources:
  70 │   - configmaps
  71 │   verbs:
  72 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-service-account_1.yaml:17-27
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - configmaps
  21 │   - pods
  22 │   - secrets
  23 │   - endpoints
  24 │   verbs:
  25 └   - get
  ..   
────────────────────────────────────────



ingress-service-account_3.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-service-account_3.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   - endpoints
  15 │   - nodes
  16 │   - pods
  17 │   - secrets
  18 └   - namespaces
  ..   
────────────────────────────────────────


