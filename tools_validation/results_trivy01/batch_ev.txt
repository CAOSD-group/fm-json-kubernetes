
Report Summary

┌──────────────────────────────────────┬────────────┬───────────────────┐
│                Target                │    Type    │ Misconfigurations │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pv-volume_3.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pv-volume_4.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pv-volume_5.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pv-volume_6.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pv-volume_7.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pv-volume_8.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pv.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pv1.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pv2.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pv2_1.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pv2_2.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pv3.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc10.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc11.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc12.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc13.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc14.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc14_1.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc14_2.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc15.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc16.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc17.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc18.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc2.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc3.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc4.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc5.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc6.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc7.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc8.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc8_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc8_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-pvc9.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-registry-deployment.yaml       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-registry-deployment_1.yaml     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-registry-deployment_10.yaml    │ kubernetes │        30         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-registry-deployment_11.yaml    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-registry-deployment_2.yaml     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-registry-deployment_3.yaml     │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-registry-deployment_4.yaml     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-registry-deployment_5.yaml     │ kubernetes │        28         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-registry-deployment_6.yaml     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-registry-deployment_7.yaml     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-registry-deployment_8.yaml     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-registry-deployment_9.yaml     │ kubernetes │         2         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-secret.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-service.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-statefulset.yaml               │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage-class.yaml             │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage-class1.yaml            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage-class2.yaml            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage-class3.yaml            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage-csi-controller.yaml    │ kubernetes │        98         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage-csi-controller1.yaml   │ kubernetes │        98         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage1.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage2.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage9.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage9_1.yaml                │ kubernetes │         3         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage9_2.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage9_3.yaml                │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage9_4.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storage9_5.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storageclass.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-storageclass1.yaml             │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner.yaml        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner1.yaml       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner1_1.yaml     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner1_2.yaml     │ kubernetes │        15         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner1_3.yaml     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner1_4.yaml     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner1_5.yaml     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner1_6.yaml     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner_1.yaml      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner_2.yaml      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner_3.yaml      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner_4.yaml      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner_5.yaml      │ kubernetes │        15         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner_6.yaml      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner_7.yaml      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner_8.yaml      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume-provisioner_9.yaml      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume1.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume2.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume_1.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume_2.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume_3.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume_4.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume_5.yaml                  │ kubernetes │         2         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume_6.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume_7.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volume_8.yaml                  │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volumes.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volumes1.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volumes1_1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volumes2.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volumes2_1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volumes3.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volumes3_1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volumes4.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volumes5.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volumes5_1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-volumes_1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local-web.yaml                       │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local1_1.yaml                        │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local2.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local3.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_operator.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_operator_1.yaml                │ kubernetes │         2         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_operator_2.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_operator_3.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_operator_4.yaml                │ kubernetes │        53         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_storage.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_storage1.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_storage2.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_storage2_1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_storage3.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_storage3_1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_storage4.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_storage4_1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ local_storage_1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localdev.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localdev_1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localhost-storage-class.yaml         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localhost3.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_10.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_11.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_12.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_13.yaml                   │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_16.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_17.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_2.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_3.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_4.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_5.yaml                    │ kubernetes │         9         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_6.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_7.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_8.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized2_9.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3_10.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3_11.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3_12.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3_13.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3_14.yaml                   │ kubernetes │        26         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3_17.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3_18.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3_4.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3_5.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3_6.yaml                    │ kubernetes │         6         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3_7.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3_8.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized3_9.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_10.yaml                    │ kubernetes │         2         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_11.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_12.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_13.yaml                    │ kubernetes │         2         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_14.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_15.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_16.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_17.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_18.yaml                    │ kubernetes │         5         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_19.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_20.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_21.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_22.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_23.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_24.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_25.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_26.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_27.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_28.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_29.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_30.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_31.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_32.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_33.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_34.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_35.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_36.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_37.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_38.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_39.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_40.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_41.yaml                    │ kubernetes │         7         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_42.yaml                    │ kubernetes │         7         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_43.yaml                    │ kubernetes │         7         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_44.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_45.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_7.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_8.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localized_9.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localpv.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localpv1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localpv1_1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localpv1_2.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localpv_1.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localpv_2.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localstack.yaml                      │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localstack_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localstorage.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localstorage1.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localstorage_pod.yaml                │ kubernetes │        16         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localstorage_pvc.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ localvolume.yaml                     │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ lock1.yaml                           │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-config-map.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-configmap.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-configmap1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-configmap2.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-configmap3.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-configmap4.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-deployment.yaml               │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-deployment1.yaml              │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-deployment2.yaml              │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-ingress.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-ingress1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-ingress2.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-master-controller.yaml        │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-master-controller1.yaml       │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-master-service.yaml           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-master-service1.yaml          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-service.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-service1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-service2.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-service3.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-service4.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-svc.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-worker-controller.yaml        │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust-worker-controller1.yaml       │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust1.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust2.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust2_1.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust2_2.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust2_3.yaml                       │ kubernetes │        16         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust3.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust4.yaml                         │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust5.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust5_1.yaml                       │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust5_2.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ locust5_3.yaml                       │ kubernetes │        15         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment.yaml                  │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment1.yaml                 │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment1_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment2.yaml                 │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment2_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment3.yaml                 │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment3_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment4.yaml                 │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment4_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment5.yaml                 │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment5_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment6.yaml                 │ kubernetes │        15         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment6_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-deployment_1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-gatherer.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-gatherer_1.yaml                  │ kubernetes │        21         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-message-processor.yaml           │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-message-processor_1.yaml         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-output-deployment.yaml           │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-output-deployment1.yaml          │ kubernetes │        14         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-output-deployment2.yaml          │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-output-service.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-output-service1.yaml             │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-output-service2.yaml             │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-pv-claim.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log-reader-service.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log10.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log10_1.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log11.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log11_1.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log12.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log12_1.yaml                         │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log13.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log13_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log14.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log14_1.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log15.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log15_1.yaml                         │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log16.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log16_1.yaml                         │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log17.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log17_1.yaml                         │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log18.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log18_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log19.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log19_1.yaml                         │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log1_1.yaml                          │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log2.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log20.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log20_1.yaml                         │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log21.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log21_1.yaml                         │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log22.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log22_1.yaml                         │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log23.yaml                           │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log2_1.yaml                          │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log3.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log3_1.yaml                          │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log4.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log4_1.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log4net_config.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log4net_config1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log5.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log5_1.yaml                          │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log6.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log6_1.yaml                          │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log7.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log7_1.yaml                          │ kubernetes │        20         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log8.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log8_1.yaml                          │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log9.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log9_1.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log_1.yaml                           │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log_storage_claim.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ log_storage_claim1.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loga-config.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loga-config1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loga-config2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loga-config3.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logback-config.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logback-config1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loggen-ansi.yaml                     │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loggen.yaml                          │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logger-deploy.yaml                   │ kubernetes │        14         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logger.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-ingress-nginx.yaml           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-ingress-nginx1.yaml          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-ingress-traefik.yaml         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-ingress-traefik1.yaml        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-loki-namespace.yaml          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-ns.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-promtail.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-promtail_1.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-promtail_2.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-promtail_3.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-promtail_4.yaml              │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-stack.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-stack_1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-stack_2.yaml                 │ kubernetes │        15         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-stack_3.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-stack_4.yaml                 │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-stack_5.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-stack_6.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging-stack_7.yaml                 │ kubernetes │        15         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logging5.yaml                        │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loggingservice.-dpl.yaml             │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loggingservice.-dpl_1.yaml           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logicvolume_editor_role.yaml         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logicvolume_viewer_role.yaml         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ login-deployment3.yaml               │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ login-service2.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ login-service3.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ login.yaml                           │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ login_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logreader.yaml                       │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logs-deployment.yaml                 │ kubernetes │        16         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logs-deployment1.yaml                │ kubernetes │        16         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logs-ns.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logs-pv1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logs-pvc.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logs-pvc2.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logs-pvc3.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logs.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logs_1.yaml                          │ kubernetes │        12         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logs_3.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logs_dags_pvc.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logs_dags_pvc_1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logserver_deployment.yaml            │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logserver_deployment1.yaml           │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logserver_service.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logserver_service1.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logserver_storage.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logserver_storage1.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-config.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-config1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-configmap.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-configmap1.yaml             │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-configmap2.yaml             │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment.yaml             │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment1.yaml            │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment2.yaml            │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment3.yaml            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment3_1.yaml          │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment3_2.yaml          │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment4.yaml            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment4_1.yaml          │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment4_2.yaml          │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment5.yaml            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment5_1.yaml          │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment5_2.yaml          │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment6.yaml            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment6_1.yaml          │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment6_2.yaml          │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment7.yaml            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment7_1.yaml          │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment7_2.yaml          │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment8.yaml            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment8_1.yaml          │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-deployment8_2.yaml          │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-http-svc.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-ingress2.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-service.yaml                │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-svc.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-svc1.yaml                   │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-test1_1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash-test_1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash.cm.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash.yaml                        │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash1.yaml                       │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash15.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash15_1.yaml                    │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash15_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash16.yaml                      │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash16_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash17.yaml                      │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash17_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash19.yaml                      │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash19_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash1_1.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash3.yaml                       │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash3_1.yaml                     │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash3_2.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash4.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash4_1.yaml                     │ kubernetes │        14         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash4_2.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logstash_1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logviewer-rbac.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logviewer-rbac_1.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ logviewer-rbac_2.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-config8.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-configmap14.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-datasource.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-deployment.yaml                 │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-deployment1.yaml                │ kubernetes │        49         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-deployment_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-istio-ingress.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-pvc.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-role.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-rolebinding.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-secret.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-service-headless.yaml           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-service-memberlist.yaml         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-service-nodeport.yaml           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-service1.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-service2.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-serviceaccount.yaml             │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-stack2.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki-statefulset.yaml                │ kubernetes │        11         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki12.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki12_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki12_2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki12_3.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki12_4.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki12_5.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki12_6.yaml                        │ kubernetes │         8         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki13.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki13_1.yaml                        │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki14.yaml                          │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki14_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki16.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki16_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki16_2.yaml                        │ kubernetes │        19         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki16_3.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki17.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki17_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki17_2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki17_3.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki17_4.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki17_5.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki17_6.yaml                        │ kubernetes │         8         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki18.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki18_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki18_2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki18_3.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki18_4.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki18_5.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki18_6.yaml                        │ kubernetes │         8         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki20.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki20_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki20_2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki20_3.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki20_4.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki20_5.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki20_6.yaml                        │ kubernetes │         8         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki21.yaml                          │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki21_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki22.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki22_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki22_2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki22_3.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki22_4.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki22_5.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki22_6.yaml                        │ kubernetes │         8         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki23.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki23_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki23_2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki23_3.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki23_4.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki23_5.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki23_6.yaml                        │ kubernetes │         8         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki26.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki26_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki26_2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki26_3.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki26_4.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki26_5.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki26_6.yaml                        │ kubernetes │         7         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki27.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki27_1.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki27_2.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki27_3.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki27_4.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki27_5.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki27_6.yaml                        │ kubernetes │         8         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki7.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki7_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki7_2.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki7_3.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki7_4.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki7_5.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ loki7_6.yaml                         │ kubernetes │         8         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ long-lived-bearer-token.yaml         │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ long-lived-token.yaml                │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ long-log-pod.yaml                    │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ long-log-pod1.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-front-lb.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-frontend-np.yaml            │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-gen3-pvc.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-ha-storageclass.yaml        │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-ingress1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-loadbalancer.yaml           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-namespace.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-nixos-path.yaml             │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-patch.yaml                  │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-patch2.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-s3-secret.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-storageclass-configmap.yaml │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-storageclass.yaml           │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_2.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_26.yaml              │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_27.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_28.yaml              │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_29.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_3.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_30.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_31.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_32.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_33.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_34.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_35.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_36.yaml              │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_37.yaml              │ kubernetes │        32         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_38.yaml              │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.1_4.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_2.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_26.yaml              │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_27.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_28.yaml              │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_29.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_3.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_30.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_31.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_32.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_33.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_34.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_35.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_36.yaml              │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_37.yaml              │ kubernetes │        32         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_38.yaml              │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.2_4.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3.yaml                 │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_1.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_2.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_26.yaml              │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_27.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_28.yaml              │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_29.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_3.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_30.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_31.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_32.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_33.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_34.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_35.yaml              │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_36.yaml              │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_37.yaml              │ kubernetes │        32         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_38.yaml              │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn-v1.5.3_4.yaml               │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_26.yaml                   │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_27.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_28.yaml                   │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_29.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_3.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_30.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_31.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_32.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_33.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_34.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_35.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_36.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_37.yaml                   │ kubernetes │        32         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_38.yaml                   │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn10_4.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn17.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_29.yaml                   │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_3.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_30.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_31.yaml                   │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_32.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_33.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_34.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_35.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_36.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_37.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_38.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_39.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_4.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_40.yaml                   │ kubernetes │        32         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_41.yaml                   │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_5.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn18_6.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_26.yaml                   │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_27.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_28.yaml                   │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_29.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_3.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_30.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_31.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_32.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_33.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_34.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_35.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_36.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_37.yaml                   │ kubernetes │        32         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_38.yaml                   │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn19_4.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_29.yaml                   │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_3.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_30.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_31.yaml                   │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_32.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_33.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_34.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_35.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_36.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_37.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_38.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_39.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_4.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_40.yaml                   │ kubernetes │        32         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_41.yaml                   │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_5.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn21_6.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_26.yaml                   │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_27.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_28.yaml                   │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_29.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_3.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_30.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_31.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_32.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_33.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_34.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_35.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_36.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_37.yaml                   │ kubernetes │        32         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_38.yaml                   │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn23_4.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_26.yaml                   │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_27.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_28.yaml                   │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_29.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_3.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_30.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_31.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_32.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_33.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_34.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_35.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_36.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_37.yaml                   │ kubernetes │        32         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_38.yaml                   │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn25_4.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_1.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_2.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_26.yaml                    │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_27.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_28.yaml                    │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_29.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_3.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_30.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_31.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_32.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_33.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_34.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_35.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_36.yaml                    │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_37.yaml                    │ kubernetes │        32         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_38.yaml                    │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn3_4.yaml                     │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_26.yaml                   │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_27.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_28.yaml                   │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_29.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_3.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_30.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_31.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_32.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_33.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_34.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_35.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_36.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_37.yaml                   │ kubernetes │        32         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_38.yaml                   │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn40_4.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_29.yaml                   │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_3.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_30.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_31.yaml                   │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_32.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_33.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_34.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_35.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_36.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_37.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_38.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_39.yaml                   │ kubernetes │        18         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_4.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_40.yaml                   │ kubernetes │        32         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_41.yaml                   │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_5.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn45_6.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_25.yaml                   │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_26.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_27.yaml                   │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_28.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_29.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_3.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_30.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_31.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_32.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_33.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_34.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_35.yaml                   │ kubernetes │        34         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_36.yaml                   │ kubernetes │        32         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_37.yaml                   │ kubernetes │        16         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_38.yaml                   │ kubernetes │        17         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_39.yaml                   │ kubernetes │        16         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_4.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn49_40.yaml                   │ kubernetes │        31         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn51.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn51_1.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn51_2.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn51_26.yaml                   │ kubernetes │        13         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn51_27.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn51_28.yaml                   │ kubernetes │         1         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn51_29.yaml                   │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn51_3.yaml                    │ kubernetes │         0         │
├──────────────────────────────────────┼────────────┼───────────────────┤
│ longhorn51_30.yaml                   │ kubernetes │         0         │
└──────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


local-registry-deployment_10.yaml (kubernetes)
==============================================
Tests: 126 (SUCCESSES: 96, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 17, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'httpwd-generator' of Deployment 'registry-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'registry' of Deployment 'registry-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-registry-deployment_10.yaml:34-54
────────────────────────────────────────
  34 ┌       - name: registry
  35 │         image: registry:2
  36 │         ports:
  37 │         - name: registry
  38 │           containerPort: 5000
  39 │         resources:
  40 │           limits:
  41 │             memory: 256Mi
  42 └             cpu: 2000m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'httpwd-generator' of Deployment 'registry-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'registry' of Deployment 'registry-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-registry-deployment_10.yaml:34-54
────────────────────────────────────────
  34 ┌       - name: registry
  35 │         image: registry:2
  36 │         ports:
  37 │         - name: registry
  38 │           containerPort: 5000
  39 │         resources:
  40 │           limits:
  41 │             memory: 256Mi
  42 └             cpu: 2000m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'httpwd-generator' of 'deployment' 'registry-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'registry' of 'deployment' 'registry-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-registry-deployment_10.yaml:34-54
────────────────────────────────────────
  34 ┌       - name: registry
  35 │         image: registry:2
  36 │         ports:
  37 │         - name: registry
  38 │           containerPort: 5000
  39 │         resources:
  40 │           limits:
  41 │             memory: 256Mi
  42 └             cpu: 2000m
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'httpwd-generator' of Deployment 'registry-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'httpwd-generator' of Deployment 'registry-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'registry' of Deployment 'registry-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-registry-deployment_10.yaml:34-54
────────────────────────────────────────
  34 ┌       - name: registry
  35 │         image: registry:2
  36 │         ports:
  37 │         - name: registry
  38 │           containerPort: 5000
  39 │         resources:
  40 │           limits:
  41 │             memory: 256Mi
  42 └             cpu: 2000m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'httpwd-generator' of Deployment 'registry-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'httpwd-generator' of Deployment 'registry-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'registry' of Deployment 'registry-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-registry-deployment_10.yaml:34-54
────────────────────────────────────────
  34 ┌       - name: registry
  35 │         image: registry:2
  36 │         ports:
  37 │         - name: registry
  38 │           containerPort: 5000
  39 │         resources:
  40 │           limits:
  41 │             memory: 256Mi
  42 └             cpu: 2000m
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'httpwd-generator' of Deployment 'registry-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'httpwd-generator' of Deployment 'registry-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'httpwd-generator' of Deployment 'registry-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'httpwd-generator' of Deployment 'registry-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'registry' of Deployment 'registry-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-registry-deployment_10.yaml:34-54
────────────────────────────────────────
  34 ┌       - name: registry
  35 │         image: registry:2
  36 │         ports:
  37 │         - name: registry
  38 │           containerPort: 5000
  39 │         resources:
  40 │           limits:
  41 │             memory: 256Mi
  42 └             cpu: 2000m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'httpwd-generator' of Deployment 'registry-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'registry' of Deployment 'registry-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-registry-deployment_10.yaml:34-54
────────────────────────────────────────
  34 ┌       - name: registry
  35 │         image: registry:2
  36 │         ports:
  37 │         - name: registry
  38 │           containerPort: 5000
  39 │         resources:
  40 │           limits:
  41 │             memory: 256Mi
  42 └             cpu: 2000m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-registry-deployment_10.yaml:34-54
────────────────────────────────────────
  34 ┌       - name: registry
  35 │         image: registry:2
  36 │         ports:
  37 │         - name: registry
  38 │           containerPort: 5000
  39 │         resources:
  40 │           limits:
  41 │             memory: 256Mi
  42 └             cpu: 2000m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "httpwd-generator" of deployment "registry-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "registry" of deployment "registry-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-registry-deployment_10.yaml:34-54
────────────────────────────────────────
  34 ┌       - name: registry
  35 │         image: registry:2
  36 │         ports:
  37 │         - name: registry
  38 │           containerPort: 5000
  39 │         resources:
  40 │           limits:
  41 │             memory: 256Mi
  42 └             cpu: 2000m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-registry-deployment_10.yaml:34-54
────────────────────────────────────────
  34 ┌       - name: registry
  35 │         image: registry:2
  36 │         ports:
  37 │         - name: registry
  38 │           containerPort: 5000
  39 │         resources:
  40 │           limits:
  41 │             memory: 256Mi
  42 └             cpu: 2000m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment registry-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 local-registry-deployment_10.yaml:4-6
────────────────────────────────────────
   4 ┌   name: registry-deployment
   5 │   labels:
   6 └     app: registry
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container registry-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-registry-deployment_10.yaml:34-54
────────────────────────────────────────
  34 ┌       - name: registry
  35 │         image: registry:2
  36 │         ports:
  37 │         - name: registry
  38 │           containerPort: 5000
  39 │         resources:
  40 │           limits:
  41 │             memory: 256Mi
  42 └             cpu: 2000m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container registry-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment registry-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-registry-deployment_10.yaml:17-66
────────────────────────────────────────
  17 ┌       initContainers:
  18 │       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 └ 
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container httpwd-generator in deployment registry-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-registry-deployment_10.yaml:18-32
────────────────────────────────────────
  18 ┌       - name: httpwd-generator
  19 │         image: xmartlabs/htpasswd:latest
  20 │         command:
  21 │         - /bin/sh
  22 │         - -c
  23 │         args:
  24 │         - 'htpasswd -Bbc /generated/htpasswd "$username" "$password"
  25 │ 
  26 └           '
  ..   
────────────────────────────────────────



local-registry-deployment_3.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'registry-tls' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 local-registry-deployment_3.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - create
  13 │   - update
  14 │   - patch
  15 └   - delete
────────────────────────────────────────



local-registry-deployment_5.yaml (kubernetes)
=============================================
Tests: 124 (SUCCESSES: 96, FAILURES: 28)
Failures: 28 (UNKNOWN: 0, LOW: 18, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gen-self-signed-cert' of Job 'registry-tls' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'registry-tls' of Job 'registry-tls' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-registry-deployment_5.yaml:36-54
────────────────────────────────────────
  36 ┌       - name: registry-tls
  37 │         image: rancher/kubectl:v1.28.5
  38 │         args:
  39 │         - create
  40 │         - secret
  41 │         - tls
  42 │         - docker-registry-tls
  43 │         - --cert=/certs/domain.crt
  44 └         - --key=/certs/domain.key
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gen-self-signed-cert' of Job 'registry-tls' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'registry-tls' of Job 'registry-tls' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-registry-deployment_5.yaml:36-54
────────────────────────────────────────
  36 ┌       - name: registry-tls
  37 │         image: rancher/kubectl:v1.28.5
  38 │         args:
  39 │         - create
  40 │         - secret
  41 │         - tls
  42 │         - docker-registry-tls
  43 │         - --cert=/certs/domain.crt
  44 └         - --key=/certs/domain.key
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gen-self-signed-cert' of 'job' 'registry-tls' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'registry-tls' of 'job' 'registry-tls' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-registry-deployment_5.yaml:36-54
────────────────────────────────────────
  36 ┌       - name: registry-tls
  37 │         image: rancher/kubectl:v1.28.5
  38 │         args:
  39 │         - create
  40 │         - secret
  41 │         - tls
  42 │         - docker-registry-tls
  43 │         - --cert=/certs/domain.crt
  44 └         - --key=/certs/domain.key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gen-self-signed-cert' of Job 'registry-tls' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gen-self-signed-cert' of Job 'registry-tls' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'registry-tls' of Job 'registry-tls' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-registry-deployment_5.yaml:36-54
────────────────────────────────────────
  36 ┌       - name: registry-tls
  37 │         image: rancher/kubectl:v1.28.5
  38 │         args:
  39 │         - create
  40 │         - secret
  41 │         - tls
  42 │         - docker-registry-tls
  43 │         - --cert=/certs/domain.crt
  44 └         - --key=/certs/domain.key
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'gen-self-signed-cert' of Job 'registry-tls' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gen-self-signed-cert' of Job 'registry-tls' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'registry-tls' of Job 'registry-tls' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-registry-deployment_5.yaml:36-54
────────────────────────────────────────
  36 ┌       - name: registry-tls
  37 │         image: rancher/kubectl:v1.28.5
  38 │         args:
  39 │         - create
  40 │         - secret
  41 │         - tls
  42 │         - docker-registry-tls
  43 │         - --cert=/certs/domain.crt
  44 └         - --key=/certs/domain.key
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gen-self-signed-cert' of Job 'registry-tls' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gen-self-signed-cert' of Job 'registry-tls' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gen-self-signed-cert' of Job 'registry-tls' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gen-self-signed-cert' of Job 'registry-tls' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'registry-tls' of Job 'registry-tls' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-registry-deployment_5.yaml:36-54
────────────────────────────────────────
  36 ┌       - name: registry-tls
  37 │         image: rancher/kubectl:v1.28.5
  38 │         args:
  39 │         - create
  40 │         - secret
  41 │         - tls
  42 │         - docker-registry-tls
  43 │         - --cert=/certs/domain.crt
  44 └         - --key=/certs/domain.key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gen-self-signed-cert' of Job 'registry-tls' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'registry-tls' of Job 'registry-tls' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-registry-deployment_5.yaml:36-54
────────────────────────────────────────
  36 ┌       - name: registry-tls
  37 │         image: rancher/kubectl:v1.28.5
  38 │         args:
  39 │         - create
  40 │         - secret
  41 │         - tls
  42 │         - docker-registry-tls
  43 │         - --cert=/certs/domain.crt
  44 └         - --key=/certs/domain.key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-registry-deployment_5.yaml:36-54
────────────────────────────────────────
  36 ┌       - name: registry-tls
  37 │         image: rancher/kubectl:v1.28.5
  38 │         args:
  39 │         - create
  40 │         - secret
  41 │         - tls
  42 │         - docker-registry-tls
  43 │         - --cert=/certs/domain.crt
  44 └         - --key=/certs/domain.key
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gen-self-signed-cert" of job "registry-tls" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "registry-tls" of job "registry-tls" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-registry-deployment_5.yaml:36-54
────────────────────────────────────────
  36 ┌       - name: registry-tls
  37 │         image: rancher/kubectl:v1.28.5
  38 │         args:
  39 │         - create
  40 │         - secret
  41 │         - tls
  42 │         - docker-registry-tls
  43 │         - --cert=/certs/domain.crt
  44 └         - --key=/certs/domain.key
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 local-registry-deployment_5.yaml:18
────────────────────────────────────────
  18 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-registry-deployment_5.yaml:12-34
────────────────────────────────────────
  12 ┌       - name: gen-self-signed-cert
  13 │         image: alpine:latest
  14 │         command:
  15 │         - /bin/sh
  16 │         - -c
  17 │         securityContext:
  18 │           runAsUser: 0
  19 │         args:
  20 └         - 'apk add openssl
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-registry-deployment_5.yaml:36-54
────────────────────────────────────────
  36 ┌       - name: registry-tls
  37 │         image: rancher/kubectl:v1.28.5
  38 │         args:
  39 │         - create
  40 │         - secret
  41 │         - tls
  42 │         - docker-registry-tls
  43 │         - --cert=/certs/domain.crt
  44 └         - --key=/certs/domain.key
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job registry-tls in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 local-registry-deployment_5.yaml:4
────────────────────────────────────────
   4 [   name: registry-tls
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container registry-tls in job registry-tls (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-registry-deployment_5.yaml:36-54
────────────────────────────────────────
  36 ┌       - name: registry-tls
  37 │         image: rancher/kubectl:v1.28.5
  38 │         args:
  39 │         - create
  40 │         - secret
  41 │         - tls
  42 │         - docker-registry-tls
  43 │         - --cert=/certs/domain.crt
  44 └         - --key=/certs/domain.key
  ..   
────────────────────────────────────────



local-registry-deployment_9.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'registry-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"    key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'registry-config' in 'default' namespace stores secrets in key(s) or value(s) '{"  htpasswd"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



local-statefulset.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mssql-container' of StatefulSet 'mssql-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-statefulset.yaml:29-68
────────────────────────────────────────
  29 ┌         - name: mssql-container
  30 │           image: mcr.microsoft.com/mssql/server:2022-CU11-ubuntu-20.04
  31 │           ports:
  32 │             - containerPort: 1433
  33 │               name: mssql-port
  34 │           env:
  35 │             - name: MSSQL_PID
  36 │               value: "Developer"
  37 └             - name: ACCEPT_EULA
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mssql-container' of StatefulSet 'mssql-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-statefulset.yaml:29-68
────────────────────────────────────────
  29 ┌         - name: mssql-container
  30 │           image: mcr.microsoft.com/mssql/server:2022-CU11-ubuntu-20.04
  31 │           ports:
  32 │             - containerPort: 1433
  33 │               name: mssql-port
  34 │           env:
  35 │             - name: MSSQL_PID
  36 │               value: "Developer"
  37 └             - name: ACCEPT_EULA
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mssql-container' of 'statefulset' 'mssql-statefulset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-statefulset.yaml:29-68
────────────────────────────────────────
  29 ┌         - name: mssql-container
  30 │           image: mcr.microsoft.com/mssql/server:2022-CU11-ubuntu-20.04
  31 │           ports:
  32 │             - containerPort: 1433
  33 │               name: mssql-port
  34 │           env:
  35 │             - name: MSSQL_PID
  36 │               value: "Developer"
  37 └             - name: ACCEPT_EULA
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mssql-container' of StatefulSet 'mssql-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-statefulset.yaml:29-68
────────────────────────────────────────
  29 ┌         - name: mssql-container
  30 │           image: mcr.microsoft.com/mssql/server:2022-CU11-ubuntu-20.04
  31 │           ports:
  32 │             - containerPort: 1433
  33 │               name: mssql-port
  34 │           env:
  35 │             - name: MSSQL_PID
  36 │               value: "Developer"
  37 └             - name: ACCEPT_EULA
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mssql-container' of StatefulSet 'mssql-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-statefulset.yaml:29-68
────────────────────────────────────────
  29 ┌         - name: mssql-container
  30 │           image: mcr.microsoft.com/mssql/server:2022-CU11-ubuntu-20.04
  31 │           ports:
  32 │             - containerPort: 1433
  33 │               name: mssql-port
  34 │           env:
  35 │             - name: MSSQL_PID
  36 │               value: "Developer"
  37 └             - name: ACCEPT_EULA
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mssql-container' of StatefulSet 'mssql-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-statefulset.yaml:29-68
────────────────────────────────────────
  29 ┌         - name: mssql-container
  30 │           image: mcr.microsoft.com/mssql/server:2022-CU11-ubuntu-20.04
  31 │           ports:
  32 │             - containerPort: 1433
  33 │               name: mssql-port
  34 │           env:
  35 │             - name: MSSQL_PID
  36 │               value: "Developer"
  37 └             - name: ACCEPT_EULA
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mssql-container' of StatefulSet 'mssql-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-statefulset.yaml:29-68
────────────────────────────────────────
  29 ┌         - name: mssql-container
  30 │           image: mcr.microsoft.com/mssql/server:2022-CU11-ubuntu-20.04
  31 │           ports:
  32 │             - containerPort: 1433
  33 │               name: mssql-port
  34 │           env:
  35 │             - name: MSSQL_PID
  36 │               value: "Developer"
  37 └             - name: ACCEPT_EULA
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-statefulset.yaml:29-68
────────────────────────────────────────
  29 ┌         - name: mssql-container
  30 │           image: mcr.microsoft.com/mssql/server:2022-CU11-ubuntu-20.04
  31 │           ports:
  32 │             - containerPort: 1433
  33 │               name: mssql-port
  34 │           env:
  35 │             - name: MSSQL_PID
  36 │               value: "Developer"
  37 └             - name: ACCEPT_EULA
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mssql-container" of statefulset "mssql-statefulset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-statefulset.yaml:29-68
────────────────────────────────────────
  29 ┌         - name: mssql-container
  30 │           image: mcr.microsoft.com/mssql/server:2022-CU11-ubuntu-20.04
  31 │           ports:
  32 │             - containerPort: 1433
  33 │               name: mssql-port
  34 │           env:
  35 │             - name: MSSQL_PID
  36 │               value: "Developer"
  37 └             - name: ACCEPT_EULA
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-statefulset.yaml:29-68
────────────────────────────────────────
  29 ┌         - name: mssql-container
  30 │           image: mcr.microsoft.com/mssql/server:2022-CU11-ubuntu-20.04
  31 │           ports:
  32 │             - containerPort: 1433
  33 │               name: mssql-port
  34 │           env:
  35 │             - name: MSSQL_PID
  36 │               value: "Developer"
  37 └             - name: ACCEPT_EULA
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mssql-statefulset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 local-statefulset.yaml:4
────────────────────────────────────────
   4 [   name: mssql-statefulset
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mssql-statefulset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-statefulset.yaml:29-68
────────────────────────────────────────
  29 ┌         - name: mssql-container
  30 │           image: mcr.microsoft.com/mssql/server:2022-CU11-ubuntu-20.04
  31 │           ports:
  32 │             - containerPort: 1433
  33 │               name: mssql-port
  34 │           env:
  35 │             - name: MSSQL_PID
  36 │               value: "Developer"
  37 └             - name: ACCEPT_EULA
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mssql-container in statefulset mssql-statefulset (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-statefulset.yaml:29-68
────────────────────────────────────────
  29 ┌         - name: mssql-container
  30 │           image: mcr.microsoft.com/mssql/server:2022-CU11-ubuntu-20.04
  31 │           ports:
  32 │             - containerPort: 1433
  33 │               name: mssql-port
  34 │           env:
  35 │             - name: MSSQL_PID
  36 │               value: "Developer"
  37 └             - name: ACCEPT_EULA
  ..   
────────────────────────────────────────



local-storage-csi-controller.yaml (kubernetes)
==============================================
Tests: 195 (SUCCESSES: 97, FAILURES: 98)
Failures: 98 (UNKNOWN: 0, LOW: 60, MEDIUM: 25, HIGH: 13, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'attacher' of 'deployment' 'hwameistor-local-storage-csi-controller' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'csi-snapshotter' of 'deployment' 'hwameistor-local-storage-csi-controller' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'monitor' of 'deployment' 'hwameistor-local-storage-csi-controller' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'provisioner' of 'deployment' 'hwameistor-local-storage-csi-controller' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'resizer' of 'deployment' 'hwameistor-local-storage-csi-controller' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'snapshot-controller' of 'deployment' 'hwameistor-local-storage-csi-controller' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'hwameistor-local-storage-csi-controller' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 local-storage-csi-controller.yaml:8-160
────────────────────────────────────────
   8 ┌   replicas: dynamic_parameters
   9 │   selector:
  10 │     matchLabels:
  11 │       app: hwameistor-local-storage-csi-controller
  12 │   strategy:
  13 │     type: Recreate
  14 │   template:
  15 │     metadata:
  16 └       creationTimestamp: null
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "attacher" of deployment "hwameistor-local-storage-csi-controller" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "csi-snapshotter" of deployment "hwameistor-local-storage-csi-controller" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "monitor" of deployment "hwameistor-local-storage-csi-controller" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "provisioner" of deployment "hwameistor-local-storage-csi-controller" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "resizer" of deployment "hwameistor-local-storage-csi-controller" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "snapshot-controller" of deployment "hwameistor-local-storage-csi-controller" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller.yaml:20-160
────────────────────────────────────────
  20 ┌       affinity:
  21 │         podAffinity:
  22 │           requiredDuringSchedulingIgnoredDuringExecution:
  23 │           - labelSelector:
  24 │               matchExpressions:
  25 │               - key: app
  26 │                 operator: In
  27 │                 values:
  28 └                 - hwameistor-local-storage
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container attacher in deployment hwameistor-local-storage-csi-controller (namespace: dynamic_parameters) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-storage-csi-controller.yaml:50-66
────────────────────────────────────────
  50 ┌       - args:
  51 │         - --v=5
  52 │         - --csi-address=$(CSI_ADDRESS)
  53 │         - --leader-election=true
  54 │         - --timeout=120s
  55 │         env:
  56 │         - name: CSI_ADDRESS
  57 │           value: /csi/csi.sock
  58 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container csi-snapshotter in deployment hwameistor-local-storage-csi-controller (namespace: dynamic_parameters) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-storage-csi-controller.yaml:118-134
────────────────────────────────────────
 118 ┌       - args:
 119 │           - --v=5
 120 │           - --leader-election=true
 121 │           - --csi-address=$(CSI_ADDRESS)
 122 │           - --leader-election
 123 │         env:
 124 │           - name: CSI_ADDRESS
 125 │             value: /csi/csi.sock
 126 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container monitor in deployment hwameistor-local-storage-csi-controller (namespace: dynamic_parameters) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-storage-csi-controller.yaml:67-92
────────────────────────────────────────
  67 ┌       - args:
  68 │           - "--v=5"
  69 │           - "--csi-address=$(CSI_ADDRESS)"
  70 │           - "--leader-election"
  71 │           - "--http-endpoint=:8080"
  72 │         env:
  73 │           - name: CSI_ADDRESS
  74 │             value: /csi/csi.sock
  75 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container provisioner in deployment hwameistor-local-storage-csi-controller (namespace: dynamic_parameters) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-storage-csi-controller.yaml:31-49
────────────────────────────────────────
  31 ┌       - args:
  32 │         - --v=5
  33 │         - --csi-address=$(CSI_ADDRESS)
  34 │         - --leader-election=true
  35 │         - --feature-gates=Topology=true
  36 │         - --strict-topology
  37 │         - --extra-create-metadata=true
  38 │         env:
  39 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container resizer in deployment hwameistor-local-storage-csi-controller (namespace: dynamic_parameters) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-storage-csi-controller.yaml:93-108
────────────────────────────────────────
  93 ┌       - args:
  94 │         - --v=5
  95 │         - --csi-address=$(CSI_ADDRESS)
  96 │         - --leader-election=true
  97 │         env:
  98 │         - name: CSI_ADDRESS
  99 │           value: /csi/csi.sock
 100 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 101 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container snapshot-controller in deployment hwameistor-local-storage-csi-controller (namespace: dynamic_parameters) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-storage-csi-controller.yaml:109-117
────────────────────────────────────────
 109 ┌       - args:
 110 │         - --v=5
 111 │         - --leader-election=true
 112 │         name: snapshot-controller
 113 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 114 │         imagePullPolicy: IfNotPresent
 115 │         resources:
 116 │         terminationMessagePath: /dev/termination-log
 117 └         terminationMessagePolicy: File
────────────────────────────────────────



local-storage-csi-controller1.yaml (kubernetes)
===============================================
Tests: 195 (SUCCESSES: 97, FAILURES: 98)
Failures: 98 (UNKNOWN: 0, LOW: 60, MEDIUM: 25, HIGH: 13, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'attacher' of 'deployment' 'hwameistor-local-storage-csi-controller' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'csi-snapshotter' of 'deployment' 'hwameistor-local-storage-csi-controller' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'monitor' of 'deployment' 'hwameistor-local-storage-csi-controller' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'provisioner' of 'deployment' 'hwameistor-local-storage-csi-controller' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'resizer' of 'deployment' 'hwameistor-local-storage-csi-controller' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'snapshot-controller' of 'deployment' 'hwameistor-local-storage-csi-controller' in 'dynamic_parameters' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'attacher' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'csi-snapshotter' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'monitor' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'provisioner' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'resizer' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'snapshot-controller' of Deployment 'hwameistor-local-storage-csi-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'hwameistor-local-storage-csi-controller' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 local-storage-csi-controller1.yaml:7-159
────────────────────────────────────────
   7 ┌   replicas: dynamic_parameters
   8 │   selector:
   9 │     matchLabels:
  10 │       app: hwameistor-local-storage-csi-controller
  11 │   strategy:
  12 │     type: Recreate
  13 │   template:
  14 │     metadata:
  15 └       creationTimestamp: null
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "attacher" of deployment "hwameistor-local-storage-csi-controller" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "csi-snapshotter" of deployment "hwameistor-local-storage-csi-controller" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "monitor" of deployment "hwameistor-local-storage-csi-controller" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "provisioner" of deployment "hwameistor-local-storage-csi-controller" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "resizer" of deployment "hwameistor-local-storage-csi-controller" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "snapshot-controller" of deployment "hwameistor-local-storage-csi-controller" in "dynamic_parameters" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hwameistor-local-storage-csi-controller in dynamic_parameters namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage-csi-controller1.yaml:19-159
────────────────────────────────────────
  19 ┌       affinity:
  20 │         podAffinity:
  21 │           requiredDuringSchedulingIgnoredDuringExecution:
  22 │           - labelSelector:
  23 │               matchExpressions:
  24 │               - key: app
  25 │                 operator: In
  26 │                 values:
  27 └                 - hwameistor-local-storage
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container attacher in deployment hwameistor-local-storage-csi-controller (namespace: dynamic_parameters) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-storage-csi-controller1.yaml:49-65
────────────────────────────────────────
  49 ┌       - args:
  50 │         - --v=5
  51 │         - --csi-address=$(CSI_ADDRESS)
  52 │         - --leader-election=true
  53 │         - --timeout=120s
  54 │         env:
  55 │         - name: CSI_ADDRESS
  56 │           value: /csi/csi.sock
  57 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container csi-snapshotter in deployment hwameistor-local-storage-csi-controller (namespace: dynamic_parameters) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-storage-csi-controller1.yaml:117-133
────────────────────────────────────────
 117 ┌       - args:
 118 │         - --v=5
 119 │         - --leader-election=true
 120 │         - --csi-address=$(CSI_ADDRESS)
 121 │         - --leader-election
 122 │         env:
 123 │         - name: CSI_ADDRESS
 124 │           value: /csi/csi.sock
 125 └         volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container monitor in deployment hwameistor-local-storage-csi-controller (namespace: dynamic_parameters) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-storage-csi-controller1.yaml:66-91
────────────────────────────────────────
  66 ┌       - args:
  67 │         - --v=5
  68 │         - --csi-address=$(CSI_ADDRESS)
  69 │         - --leader-election
  70 │         - --http-endpoint=:8080
  71 │         env:
  72 │         - name: CSI_ADDRESS
  73 │           value: /csi/csi.sock
  74 └         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container provisioner in deployment hwameistor-local-storage-csi-controller (namespace: dynamic_parameters) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-storage-csi-controller1.yaml:30-48
────────────────────────────────────────
  30 ┌       - args:
  31 │         - --v=5
  32 │         - --csi-address=$(CSI_ADDRESS)
  33 │         - --leader-election=true
  34 │         - --feature-gates=Topology=true
  35 │         - --strict-topology
  36 │         - --extra-create-metadata=true
  37 │         env:
  38 └         - name: CSI_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container resizer in deployment hwameistor-local-storage-csi-controller (namespace: dynamic_parameters) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-storage-csi-controller1.yaml:92-107
────────────────────────────────────────
  92 ┌       - args:
  93 │         - --v=5
  94 │         - --csi-address=$(CSI_ADDRESS)
  95 │         - --leader-election=true
  96 │         env:
  97 │         - name: CSI_ADDRESS
  98 │           value: /csi/csi.sock
  99 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 100 └         imagePullPolicy: IfNotPresent
 ...   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container snapshot-controller in deployment hwameistor-local-storage-csi-controller (namespace: dynamic_parameters) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-storage-csi-controller1.yaml:108-116
────────────────────────────────────────
 108 ┌       - args:
 109 │         - --v=5
 110 │         - --leader-election=true
 111 │         name: snapshot-controller
 112 │         image: dynamic_parameters/dynamic_parameters:dynamic_parameters
 113 │         imagePullPolicy: IfNotPresent
 114 │         resources: null
 115 │         terminationMessagePath: /dev/termination-log
 116 └         terminationMessagePolicy: File
────────────────────────────────────────



local-storage9_1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 1)

AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 local-storage9_1.yaml:16-23
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - endpoints
  20 │   - persistentvolumes
  21 │   - pods
  22 │   verbs:
  23 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'local-path-provisioner-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 local-storage9_1.yaml:16-23
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - endpoints
  20 │   - persistentvolumes
  21 │   - pods
  22 │   verbs:
  23 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'local-path-provisioner-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 local-storage9_1.yaml:16-23
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - endpoints
  20 │   - persistentvolumes
  21 │   - pods
  22 │   verbs:
  23 └   - '*'
────────────────────────────────────────



local-storage9_3.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'local-path-provisioner' of 'deployment' 'local-path-provisioner' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'local-path-provisioner' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 local-storage9_3.yaml:7-50
────────────────────────────────────────
   7 ┌   revisionHistoryLimit: 0
   8 │   strategy:
   9 │     type: RollingUpdate
  10 │     rollingUpdate:
  11 │       maxUnavailable: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       app: local-path-provisioner
  15 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "local-path-provisioner" of deployment "local-path-provisioner" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container local-path-provisioner in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage9_3.yaml:32-46
────────────────────────────────────────
  32 ┌       - name: local-path-provisioner
  33 │         imagePullPolicy: IfNotPresent
  34 │         command:
  35 │         - local-path-provisioner
  36 │         - start
  37 │         - --config
  38 │         - /etc/config/config.json
  39 │         volumeMounts:
  40 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment local-path-provisioner in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-storage9_3.yaml:20-50
────────────────────────────────────────
  20 ┌       priorityClassName: system-node-critical
  21 │       serviceAccountName: local-path-provisioner-service-account
  22 │       tolerations:
  23 │       - key: CriticalAddonsOnly
  24 │         operator: Exists
  25 │       - key: node-role.kubernetes.io/control-plane
  26 │         operator: Exists
  27 │         effect: NoSchedule
  28 └       - key: node-role.kubernetes.io/master
  ..   
────────────────────────────────────────



local-volume-provisioner1_2.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 99, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:19-47
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.2
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:19-47
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.2
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'provisioner' of 'daemonset' 'local-volume-provisioner' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:19-47
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.2
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:19-47
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.2
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:19-47
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.2
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:19-47
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.2
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:19-47
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.2
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:19-47
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.2
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'local-volume-provisioner' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:9-54
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: local-volume-provisioner
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: local-volume-provisioner
  16 │     spec:
  17 └       serviceAccountName: local-storage-admin
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:19-47
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.2
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): DaemonSet 'local-volume-provisioner' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:9-54
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: local-volume-provisioner
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: local-volume-provisioner
  16 │     spec:
  17 └       serviceAccountName: local-storage-admin
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "provisioner" of daemonset "local-volume-provisioner" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:19-47
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.2
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:19-47
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.2
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset local-volume-provisioner in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:17-54
────────────────────────────────────────
  17 ┌       serviceAccountName: local-storage-admin
  18 │       containers:
  19 │       - image: quay.io/external_storage/local-volume-provisioner:v2.3.2
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container provisioner in daemonset local-volume-provisioner (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-volume-provisioner1_2.yaml:19-47
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.2
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────



local-volume-provisioner_5.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 99, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-volume-provisioner_5.yaml:19-56
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.5.0
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-volume-provisioner_5.yaml:19-56
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.5.0
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'provisioner' of 'daemonset' 'local-volume-provisioner' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-volume-provisioner_5.yaml:19-56
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.5.0
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-volume-provisioner_5.yaml:19-56
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.5.0
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-volume-provisioner_5.yaml:19-56
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.5.0
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 local-volume-provisioner_5.yaml:19-56
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.5.0
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-volume-provisioner_5.yaml:19-56
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.5.0
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-volume-provisioner_5.yaml:19-56
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.5.0
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'local-volume-provisioner' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 local-volume-provisioner_5.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: local-volume-provisioner
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: local-volume-provisioner
  16 │     spec:
  17 └       serviceAccountName: local-storage-admin
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-volume-provisioner_5.yaml:19-56
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.5.0
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): DaemonSet 'local-volume-provisioner' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 local-volume-provisioner_5.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: local-volume-provisioner
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: local-volume-provisioner
  16 │     spec:
  17 └       serviceAccountName: local-storage-admin
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "provisioner" of daemonset "local-volume-provisioner" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-volume-provisioner_5.yaml:19-56
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.5.0
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-volume-provisioner_5.yaml:19-56
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.5.0
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset local-volume-provisioner in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-volume-provisioner_5.yaml:17-72
────────────────────────────────────────
  17 ┌       serviceAccountName: local-storage-admin
  18 │       containers:
  19 │       - image: quay.io/external_storage/local-volume-provisioner:v2.5.0
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container provisioner in daemonset local-volume-provisioner (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-volume-provisioner_5.yaml:19-56
────────────────────────────────────────
  19 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.5.0
  20 │         name: provisioner
  21 │         securityContext:
  22 │           privileged: true
  23 │         env:
  24 │         - name: MY_NODE_NAME
  25 │           valueFrom:
  26 │             fieldRef:
  27 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────



local-volume_5.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 local-volume_5.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - batch
   8 │   resources:
   9 │   - jobs
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'local-storage-provisioner-jobs-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 local-volume_5.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - batch
   8 │   resources:
   9 │   - jobs
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



local-volume_8.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'provisioner' of 'daemonset' 'local-volume-provisioner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'provisioner' of DaemonSet 'local-volume-provisioner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'local-volume-provisioner' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 local-volume_8.yaml:8-46
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: local-volume-provisioner
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: local-volume-provisioner
  15 │     spec:
  16 └       serviceAccountName: local-storage-admin
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "provisioner" of daemonset "local-volume-provisioner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset local-volume-provisioner in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 local-volume_8.yaml:4-6
────────────────────────────────────────
   4 ┌   name: local-volume-provisioner
   5 │   labels:
   6 └     app: local-volume-provisioner
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset local-volume-provisioner in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-volume_8.yaml:16-46
────────────────────────────────────────
  16 ┌       serviceAccountName: local-storage-admin
  17 │       containers:
  18 │       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container provisioner in daemonset local-volume-provisioner (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local-volume_8.yaml:18-39
────────────────────────────────────────
  18 ┌       - image: quay.io/external_storage/local-volume-provisioner:v2.3.4
  19 │         name: provisioner
  20 │         securityContext:
  21 │           privileged: true
  22 │         env:
  23 │         - name: MY_NODE_NAME
  24 │           valueFrom:
  25 │             fieldRef:
  26 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────



local-web.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'local-web' of Deployment 'local-web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'local-web' of Deployment 'local-web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'local-web' of 'deployment' 'local-web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'local-web' of Deployment 'local-web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'local-web' of Deployment 'local-web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'local-web' of Deployment 'local-web' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'local-web' of Deployment 'local-web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'local-web' of Deployment 'local-web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'local-web' of Deployment 'local-web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'local-web' of Deployment 'local-web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'local-web' of Deployment 'local-web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'local-web' of Deployment 'local-web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'local-web' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 local-web.yaml:6-27
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels: 
   9 │       app: local-web
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: local-web
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "local-web" of deployment "local-web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment local-web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 local-web.yaml:4
────────────────────────────────────────
   4 [   name: local-web
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment local-web in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container local-web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-web.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment local-web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local-web.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: local-web
  17 │         image: nginx
  18 │         ports:
  19 │           - name: web
  20 │             containerPort: 80
  21 │         volumeMounts:
  22 │           - name: local
  23 └             mountPath: /usr/share/nginx/html
  ..   
────────────────────────────────────────



local1_1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'toctx' of Deployment 'local-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'toctx' of Deployment 'local-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'toctx' of 'deployment' 'local-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'toctx' of Deployment 'local-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'toctx' of Deployment 'local-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'toctx' of Deployment 'local-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'toctx' of Deployment 'local-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'toctx' of Deployment 'local-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'toctx' of Deployment 'local-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'toctx' of Deployment 'local-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'toctx' of Deployment 'local-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "toctx" of deployment "local-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment local-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 local1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: local-depl
   5 │   labels:
   6 └     app: local
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container local-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local1_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment local-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: toctx
  19 │         image: todocontext:1.0
  20 │         ports:
  21 └         - containerPort: 5173
────────────────────────────────────────



local_operator_1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'tenant-cluster-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 local_operator_1.yaml:30-45
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - ''
  32 │   resources:
  33 │   - nodes
  34 │   - namespaces
  35 │   - pods
  36 │   - configmaps
  37 │   - events
  38 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'tenant-cluster-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 local_operator_1.yaml:30-45
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - ''
  32 │   resources:
  33 │   - nodes
  34 │   - namespaces
  35 │   - pods
  36 │   - configmaps
  37 │   - events
  38 └   verbs:
  ..   
────────────────────────────────────────



local_operator_4.yaml (kubernetes)
==================================
Tests: 146 (SUCCESSES: 93, FAILURES: 53)
Failures: 53 (UNKNOWN: 0, LOW: 31, MEDIUM: 14, HIGH: 8, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'install-cni' of DaemonSet 'tenantcni-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'install-cni-plugin' of DaemonSet 'tenantcni-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'tenantcnid' of DaemonSet 'tenantcni-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'install-cni' of DaemonSet 'tenantcni-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'install-cni-plugin' of DaemonSet 'tenantcni-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tenantcnid' of DaemonSet 'tenantcni-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'install-cni' of 'daemonset' 'tenantcni-operator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'install-cni-plugin' of 'daemonset' 'tenantcni-operator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tenantcnid' of 'daemonset' 'tenantcni-operator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'tenantcni-operator' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 local_operator_4.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: tenantcni
  13 │   template:
  14 │     metadata:
  15 │       creationTimestamp: null
  16 │       labels:
  17 │         app: tenantcni
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'install-cni' of DaemonSet 'tenantcni-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'install-cni-plugin' of DaemonSet 'tenantcni-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'tenantcnid' of DaemonSet 'tenantcni-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'install-cni' of DaemonSet 'tenantcni-operator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'install-cni-plugin' of DaemonSet 'tenantcni-operator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tenantcnid' of DaemonSet 'tenantcni-operator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'install-cni' of DaemonSet 'tenantcni-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'install-cni-plugin' of DaemonSet 'tenantcni-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tenantcnid' of DaemonSet 'tenantcni-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'install-cni' of DaemonSet 'tenantcni-operator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'install-cni-plugin' of DaemonSet 'tenantcni-operator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tenantcnid' of DaemonSet 'tenantcni-operator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'install-cni' of DaemonSet 'tenantcni-operator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'install-cni-plugin' of DaemonSet 'tenantcni-operator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tenantcnid' of DaemonSet 'tenantcni-operator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'install-cni' of DaemonSet 'tenantcni-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'install-cni-plugin' of DaemonSet 'tenantcni-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'tenantcnid' of DaemonSet 'tenantcni-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'install-cni' of DaemonSet 'tenantcni-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'install-cni-plugin' of DaemonSet 'tenantcni-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tenantcnid' of DaemonSet 'tenantcni-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'install-cni' of DaemonSet 'tenantcni-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'install-cni-plugin' of DaemonSet 'tenantcni-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tenantcnid' of DaemonSet 'tenantcni-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'tenantcnid' of DaemonSet 'tenantcni-operator' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'tenantcni-operator' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 local_operator_4.yaml:10-107
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       app: tenantcni
  13 │   template:
  14 │     metadata:
  15 │       creationTimestamp: null
  16 │       labels:
  17 │         app: tenantcni
  18 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "install-cni" of daemonset "tenantcni-operator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "install-cni-plugin" of daemonset "tenantcni-operator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tenantcnid" of daemonset "tenantcni-operator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset tenantcni-operator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 local_operator_4.yaml:4-8
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     tier: node
   7 │     app: tenantcni
   8 └   name: tenantcni-operator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container tenantcni-operator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container tenantcni-operator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset tenantcni-operator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 local_operator_4.yaml:19-107
────────────────────────────────────────
  19 ┌       affinity:
  20 │         nodeAffinity:
  21 │           requiredDuringSchedulingIgnoredDuringExecution:
  22 │             nodeSelectorTerms:
  23 │             - matchExpressions:
  24 │               - key: kubernetes.io/os
  25 │                 operator: In
  26 │                 values:
  27 └                 - linux
  ..   
────────────────────────────────────────


AVD-KSV-0119 (HIGH): container tenantcnid of daemonset tenantcni-operator in default namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container install-cni in daemonset tenantcni-operator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local_operator_4.yaml:46-58
────────────────────────────────────────
  46 ┌       - name: install-cni
  47 │         image: jovik31/tenantcni:0.2.1
  48 │         command:
  49 │         - cp
  50 │         args:
  51 │         - -f
  52 │         - /etc/tenantcni/cni-conf.json
  53 │         - /etc/cni/net.d/10-tenantcni.conf
  54 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container install-cni-plugin in daemonset tenantcni-operator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local_operator_4.yaml:35-45
────────────────────────────────────────
  35 ┌       - name: install-cni-plugin
  36 │         image: jovik31/tenantcni:0.2.1
  37 │         command:
  38 │         - cp
  39 │         args:
  40 │         - -f
  41 │         - /tenantcni
  42 │         - /opt/cni/bin/tenantcni
  43 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container tenantcnid in daemonset tenantcni-operator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 local_operator_4.yaml:60-91
────────────────────────────────────────
  60 ┌       - image: jovik31/tenantcni:0.2.1
  61 │         name: tenantcnid
  62 │         command:
  63 │         - /tenantcnid
  64 │         env:
  65 │         - name: MY_NODE_NAME
  66 │           valueFrom:
  67 │             fieldRef:
  68 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────



localized2_13.yaml (kubernetes)
===============================
Tests: 122 (SUCCESSES: 102, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 14, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy' of Deployment 'jaeger-operator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 localized2_13.yaml:69-86
────────────────────────────────────────
  69 ┌       - args:
  70 │         - --secure-listen-address=0.0.0.0:8443
  71 │         - --upstream=http://127.0.0.1:8383/
  72 │         - --logtostderr=true
  73 │         - --v=0
  74 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  75 │         name: kube-rbac-proxy
  76 │         ports:
  77 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'jaeger-operator' of Deployment 'jaeger-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 localized2_13.yaml:20-68
────────────────────────────────────────
  20 ┌       - args:
  21 │         - start
  22 │         - --health-probe-bind-address=:8081
  23 │         - --leader-elect
  24 │         command:
  25 │         - /jaeger-operator
  26 │         env:
  27 │         - name: WATCH_NAMESPACE
  28 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy' of Deployment 'jaeger-operator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 localized2_13.yaml:69-86
────────────────────────────────────────
  69 ┌       - args:
  70 │         - --secure-listen-address=0.0.0.0:8443
  71 │         - --upstream=http://127.0.0.1:8383/
  72 │         - --logtostderr=true
  73 │         - --v=0
  74 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  75 │         name: kube-rbac-proxy
  76 │         ports:
  77 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'jaeger-operator' of 'deployment' 'jaeger-operator' in 'observability' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 localized2_13.yaml:20-68
────────────────────────────────────────
  20 ┌       - args:
  21 │         - start
  22 │         - --health-probe-bind-address=:8081
  23 │         - --leader-elect
  24 │         command:
  25 │         - /jaeger-operator
  26 │         env:
  27 │         - name: WATCH_NAMESPACE
  28 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy' of 'deployment' 'jaeger-operator' in 'observability' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 localized2_13.yaml:69-86
────────────────────────────────────────
  69 ┌       - args:
  70 │         - --secure-listen-address=0.0.0.0:8443
  71 │         - --upstream=http://127.0.0.1:8383/
  72 │         - --logtostderr=true
  73 │         - --v=0
  74 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  75 │         name: kube-rbac-proxy
  76 │         ports:
  77 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'jaeger-operator' of Deployment 'jaeger-operator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 localized2_13.yaml:20-68
────────────────────────────────────────
  20 ┌       - args:
  21 │         - start
  22 │         - --health-probe-bind-address=:8081
  23 │         - --leader-elect
  24 │         command:
  25 │         - /jaeger-operator
  26 │         env:
  27 │         - name: WATCH_NAMESPACE
  28 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'jaeger-operator' of Deployment 'jaeger-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 localized2_13.yaml:20-68
────────────────────────────────────────
  20 ┌       - args:
  21 │         - start
  22 │         - --health-probe-bind-address=:8081
  23 │         - --leader-elect
  24 │         command:
  25 │         - /jaeger-operator
  26 │         env:
  27 │         - name: WATCH_NAMESPACE
  28 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy' of Deployment 'jaeger-operator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 localized2_13.yaml:69-86
────────────────────────────────────────
  69 ┌       - args:
  70 │         - --secure-listen-address=0.0.0.0:8443
  71 │         - --upstream=http://127.0.0.1:8383/
  72 │         - --logtostderr=true
  73 │         - --v=0
  74 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  75 │         name: kube-rbac-proxy
  76 │         ports:
  77 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'jaeger-operator' of Deployment 'jaeger-operator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 localized2_13.yaml:20-68
────────────────────────────────────────
  20 ┌       - args:
  21 │         - start
  22 │         - --health-probe-bind-address=:8081
  23 │         - --leader-elect
  24 │         command:
  25 │         - /jaeger-operator
  26 │         env:
  27 │         - name: WATCH_NAMESPACE
  28 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'jaeger-operator' of Deployment 'jaeger-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 localized2_13.yaml:20-68
────────────────────────────────────────
  20 ┌       - args:
  21 │         - start
  22 │         - --health-probe-bind-address=:8081
  23 │         - --leader-elect
  24 │         command:
  25 │         - /jaeger-operator
  26 │         env:
  27 │         - name: WATCH_NAMESPACE
  28 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-rbac-proxy' of Deployment 'jaeger-operator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 localized2_13.yaml:69-86
────────────────────────────────────────
  69 ┌       - args:
  70 │         - --secure-listen-address=0.0.0.0:8443
  71 │         - --upstream=http://127.0.0.1:8383/
  72 │         - --logtostderr=true
  73 │         - --v=0
  74 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  75 │         name: kube-rbac-proxy
  76 │         ports:
  77 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'jaeger-operator' of Deployment 'jaeger-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 localized2_13.yaml:20-68
────────────────────────────────────────
  20 ┌       - args:
  21 │         - start
  22 │         - --health-probe-bind-address=:8081
  23 │         - --leader-elect
  24 │         command:
  25 │         - /jaeger-operator
  26 │         env:
  27 │         - name: WATCH_NAMESPACE
  28 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-rbac-proxy' of Deployment 'jaeger-operator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 localized2_13.yaml:69-86
────────────────────────────────────────
  69 ┌       - args:
  70 │         - --secure-listen-address=0.0.0.0:8443
  71 │         - --upstream=http://127.0.0.1:8383/
  72 │         - --logtostderr=true
  73 │         - --v=0
  74 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  75 │         name: kube-rbac-proxy
  76 │         ports:
  77 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 localized2_13.yaml:69-86
────────────────────────────────────────
  69 ┌       - args:
  70 │         - --secure-listen-address=0.0.0.0:8443
  71 │         - --upstream=http://127.0.0.1:8383/
  72 │         - --logtostderr=true
  73 │         - --v=0
  74 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  75 │         name: kube-rbac-proxy
  76 │         ports:
  77 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 localized2_13.yaml:20-68
────────────────────────────────────────
  20 ┌       - args:
  21 │         - start
  22 │         - --health-probe-bind-address=:8081
  23 │         - --leader-elect
  24 │         command:
  25 │         - /jaeger-operator
  26 │         env:
  27 │         - name: WATCH_NAMESPACE
  28 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "jaeger-operator" of deployment "jaeger-operator" in "observability" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 localized2_13.yaml:20-68
────────────────────────────────────────
  20 ┌       - args:
  21 │         - start
  22 │         - --health-probe-bind-address=:8081
  23 │         - --leader-elect
  24 │         command:
  25 │         - /jaeger-operator
  26 │         env:
  27 │         - name: WATCH_NAMESPACE
  28 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy" of deployment "jaeger-operator" in "observability" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 localized2_13.yaml:69-86
────────────────────────────────────────
  69 ┌       - args:
  70 │         - --secure-listen-address=0.0.0.0:8443
  71 │         - --upstream=http://127.0.0.1:8383/
  72 │         - --logtostderr=true
  73 │         - --v=0
  74 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  75 │         name: kube-rbac-proxy
  76 │         ports:
  77 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 localized2_13.yaml:69-86
────────────────────────────────────────
  69 ┌       - args:
  70 │         - --secure-listen-address=0.0.0.0:8443
  71 │         - --upstream=http://127.0.0.1:8383/
  72 │         - --logtostderr=true
  73 │         - --v=0
  74 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  75 │         name: kube-rbac-proxy
  76 │         ports:
  77 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 localized2_13.yaml:20-68
────────────────────────────────────────
  20 ┌       - args:
  21 │         - start
  22 │         - --health-probe-bind-address=:8081
  23 │         - --leader-elect
  24 │         command:
  25 │         - /jaeger-operator
  26 │         env:
  27 │         - name: WATCH_NAMESPACE
  28 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container jaeger-operator in deployment jaeger-operator (namespace: observability) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 localized2_13.yaml:20-68
────────────────────────────────────────
  20 ┌       - args:
  21 │         - start
  22 │         - --health-probe-bind-address=:8081
  23 │         - --leader-elect
  24 │         command:
  25 │         - /jaeger-operator
  26 │         env:
  27 │         - name: WATCH_NAMESPACE
  28 └           valueFrom:
  ..   
────────────────────────────────────────



localized2_2.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 localized2_2.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 │   - get
  15 │   - list
  16 │   - watch
  17 └   - create
  ..   
────────────────────────────────────────



localized2_5.yaml (kubernetes)
==============================
Tests: 119 (SUCCESSES: 110, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 3, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'manager-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 localized2_5.yaml:89-106
────────────────────────────────────────
  89 ┌ - apiGroups:
  90 │   - ''
  91 │   resources:
  92 │   - configmaps
  93 │   - persistentvolumeclaims
  94 │   - pods
  95 │   - secrets
  96 │   - serviceaccounts
  97 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'manager-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 localized2_5.yaml:8-22
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - apps
  10 │   resources:
  11 │   - daemonsets
  12 │   - deployments
  13 │   - replicasets
  14 │   - statefulsets
  15 │   verbs:
  16 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'manager-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 localized2_5.yaml:23-34
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - apps
  25 │   resources:
  26 │   - deployments
  27 │   verbs:
  28 │   - create
  29 │   - delete
  30 │   - get
  31 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'manager-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 localized2_5.yaml:55-67
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - batch
  57 │   resources:
  58 │   - cronjobs
  59 │   - jobs
  60 │   verbs:
  61 │   - create
  62 │   - delete
  63 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'manager-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 localized2_5.yaml:89-106
────────────────────────────────────────
  89 ┌ - apiGroups:
  90 │   - ''
  91 │   resources:
  92 │   - configmaps
  93 │   - persistentvolumeclaims
  94 │   - pods
  95 │   - secrets
  96 │   - serviceaccounts
  97 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'manager-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 localized2_5.yaml:89-106
────────────────────────────────────────
  89 ┌ - apiGroups:
  90 │   - ''
  91 │   resources:
  92 │   - configmaps
  93 │   - persistentvolumeclaims
  94 │   - pods
  95 │   - secrets
  96 │   - serviceaccounts
  97 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'manager-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 localized2_5.yaml:89-106
────────────────────────────────────────
  89 ┌ - apiGroups:
  90 │   - ''
  91 │   resources:
  92 │   - configmaps
  93 │   - persistentvolumeclaims
  94 │   - pods
  95 │   - secrets
  96 │   - serviceaccounts
  97 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'manager-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 localized2_5.yaml:127-138
────────────────────────────────────────
 127 ┌ - apiGroups:
 128 │   - extensions
 129 │   resources:
 130 │   - ingresses
 131 │   verbs:
 132 │   - create
 133 │   - delete
 134 │   - get
 135 └   - list
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'manager-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 localized2_5.yaml:222-234
────────────────────────────────────────
 222 ┌ - apiGroups:
 223 │   - networking.k8s.io
 224 │   resources:
 225 │   - ingressclasses
 226 │   - ingresses
 227 │   verbs:
 228 │   - create
 229 │   - delete
 230 └   - get
 ...   
────────────────────────────────────────



localized3_14.yaml (kubernetes)
===============================
Tests: 126 (SUCCESSES: 100, FAILURES: 26)
Failures: 26 (UNKNOWN: 0, LOW: 14, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy' of Deployment 'opentelemetry-operator-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 localized3_14.yaml:59-76
────────────────────────────────────────
  59 ┌       - args:
  60 │         - --secure-listen-address=0.0.0.0:8443
  61 │         - --upstream=http://127.0.0.1:8080/
  62 │         - --logtostderr=true
  63 │         - --v=0
  64 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  65 │         name: kube-rbac-proxy
  66 │         ports:
  67 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'manager' of Deployment 'opentelemetry-operator-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy' of Deployment 'opentelemetry-operator-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 localized3_14.yaml:59-76
────────────────────────────────────────
  59 ┌       - args:
  60 │         - --secure-listen-address=0.0.0.0:8443
  61 │         - --upstream=http://127.0.0.1:8080/
  62 │         - --logtostderr=true
  63 │         - --v=0
  64 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  65 │         name: kube-rbac-proxy
  66 │         ports:
  67 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'manager' of Deployment 'opentelemetry-operator-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy' of 'deployment' 'opentelemetry-operator-controller-manager' in 'opentelemetry-operator-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 localized3_14.yaml:59-76
────────────────────────────────────────
  59 ┌       - args:
  60 │         - --secure-listen-address=0.0.0.0:8443
  61 │         - --upstream=http://127.0.0.1:8080/
  62 │         - --logtostderr=true
  63 │         - --v=0
  64 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  65 │         name: kube-rbac-proxy
  66 │         ports:
  67 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'manager' of 'deployment' 'opentelemetry-operator-controller-manager' in 'opentelemetry-operator-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'manager' of Deployment 'opentelemetry-operator-controller-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-rbac-proxy' of Deployment 'opentelemetry-operator-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 localized3_14.yaml:59-76
────────────────────────────────────────
  59 ┌       - args:
  60 │         - --secure-listen-address=0.0.0.0:8443
  61 │         - --upstream=http://127.0.0.1:8080/
  62 │         - --logtostderr=true
  63 │         - --v=0
  64 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  65 │         name: kube-rbac-proxy
  66 │         ports:
  67 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'manager' of Deployment 'opentelemetry-operator-controller-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy' of Deployment 'opentelemetry-operator-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 localized3_14.yaml:59-76
────────────────────────────────────────
  59 ┌       - args:
  60 │         - --secure-listen-address=0.0.0.0:8443
  61 │         - --upstream=http://127.0.0.1:8080/
  62 │         - --logtostderr=true
  63 │         - --v=0
  64 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  65 │         name: kube-rbac-proxy
  66 │         ports:
  67 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'manager' of Deployment 'opentelemetry-operator-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'manager' of Deployment 'opentelemetry-operator-controller-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-rbac-proxy' of Deployment 'opentelemetry-operator-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 localized3_14.yaml:59-76
────────────────────────────────────────
  59 ┌       - args:
  60 │         - --secure-listen-address=0.0.0.0:8443
  61 │         - --upstream=http://127.0.0.1:8080/
  62 │         - --logtostderr=true
  63 │         - --v=0
  64 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  65 │         name: kube-rbac-proxy
  66 │         ports:
  67 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'opentelemetry-operator-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-rbac-proxy' of Deployment 'opentelemetry-operator-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 localized3_14.yaml:59-76
────────────────────────────────────────
  59 ┌       - args:
  60 │         - --secure-listen-address=0.0.0.0:8443
  61 │         - --upstream=http://127.0.0.1:8080/
  62 │         - --logtostderr=true
  63 │         - --v=0
  64 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  65 │         name: kube-rbac-proxy
  66 │         ports:
  67 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'opentelemetry-operator-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 localized3_14.yaml:59-76
────────────────────────────────────────
  59 ┌       - args:
  60 │         - --secure-listen-address=0.0.0.0:8443
  61 │         - --upstream=http://127.0.0.1:8080/
  62 │         - --logtostderr=true
  63 │         - --v=0
  64 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  65 │         name: kube-rbac-proxy
  66 │         ports:
  67 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy" of deployment "opentelemetry-operator-controller-manager" in "opentelemetry-operator-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 localized3_14.yaml:59-76
────────────────────────────────────────
  59 ┌       - args:
  60 │         - --secure-listen-address=0.0.0.0:8443
  61 │         - --upstream=http://127.0.0.1:8080/
  62 │         - --logtostderr=true
  63 │         - --v=0
  64 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  65 │         name: kube-rbac-proxy
  66 │         ports:
  67 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "manager" of deployment "opentelemetry-operator-controller-manager" in "opentelemetry-operator-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 localized3_14.yaml:59-76
────────────────────────────────────────
  59 ┌       - args:
  60 │         - --secure-listen-address=0.0.0.0:8443
  61 │         - --upstream=http://127.0.0.1:8080/
  62 │         - --logtostderr=true
  63 │         - --v=0
  64 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  65 │         name: kube-rbac-proxy
  66 │         ports:
  67 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container opentelemetry-operator-controller-manager in opentelemetry-operator-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 localized3_14.yaml:59-76
────────────────────────────────────────
  59 ┌       - args:
  60 │         - --secure-listen-address=0.0.0.0:8443
  61 │         - --upstream=http://127.0.0.1:8080/
  62 │         - --logtostderr=true
  63 │         - --v=0
  64 │         image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.1
  65 │         name: kube-rbac-proxy
  66 │         ports:
  67 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container opentelemetry-operator-controller-manager in opentelemetry-operator-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment opentelemetry-operator-controller-manager in opentelemetry-operator-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 localized3_14.yaml:21-83
────────────────────────────────────────
  21 ┌       containers:
  22 │       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 └         - name: SERVICE_ACCOUNT_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment opentelemetry-operator-controller-manager (namespace: opentelemetry-operator-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 localized3_14.yaml:22-58
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --metrics-addr=127.0.0.1:8080
  24 │         - --enable-leader-election
  25 │         - --zap-log-level=info
  26 │         - --zap-time-encoding=rfc3339nano
  27 │         - --enable-nginx-instrumentation=true
  28 │         env:
  29 │         - name: SERVICE_ACCOUNT_NAME
  30 └           valueFrom:
  ..   
────────────────────────────────────────



localized3_5.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'opentelemetry-operator-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 localized3_5.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 │   - get
  15 │   - list
  16 │   - watch
  17 └   - create
  ..   
────────────────────────────────────────



localized3_6.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 110, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 2, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'opentelemetry-operator-manager-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 localized3_6.yaml:30-38
────────────────────────────────────────
  30 ┌ - apiGroups:
  31 │   - ''
  32 │   resources:
  33 │   - namespaces
  34 │   - secrets
  35 │   verbs:
  36 │   - get
  37 │   - list
  38 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'opentelemetry-operator-manager-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 localized3_6.yaml:8-22
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - configmaps
  12 │   - pods
  13 │   - serviceaccounts
  14 │   - services
  15 │   verbs:
  16 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'opentelemetry-operator-manager-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 localized3_6.yaml:39-52
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - apps
  41 │   resources:
  42 │   - daemonsets
  43 │   - deployments
  44 │   - statefulsets
  45 │   verbs:
  46 │   - create
  47 └   - delete
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'opentelemetry-operator-manager-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 localized3_6.yaml:8-22
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - configmaps
  12 │   - pods
  13 │   - serviceaccounts
  14 │   - services
  15 │   verbs:
  16 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'opentelemetry-operator-manager-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 localized3_6.yaml:8-22
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - configmaps
  12 │   - pods
  13 │   - serviceaccounts
  14 │   - services
  15 │   verbs:
  16 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'opentelemetry-operator-manager-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 localized3_6.yaml:112-123
────────────────────────────────────────
 112 ┌ - apiGroups:
 113 │   - networking.k8s.io
 114 │   resources:
 115 │   - ingresses
 116 │   verbs:
 117 │   - create
 118 │   - delete
 119 │   - get
 120 └   - list
 ...   
────────────────────────────────────────



localized_10.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 localized_10.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resourceNames:
  16 │   - cert-manager-webhook-ca
  17 │   resources:
  18 │   - secrets
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 localized_10.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



localized_13.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 localized_13.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 localized_13.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



localized_16.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 localized_16.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



localized_18.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 localized_18.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 localized_18.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 localized_18.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 localized_18.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 localized_18.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



localized_19.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 localized_19.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



localized_21.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 localized_21.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



localized_22.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 localized_22.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



localized_41.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 localized_41.yaml:33-69
────────────────────────────────────────
  33 ┌       - args:
  34 │         - --v=2
  35 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  36 │         - --leader-election-namespace=kube-system
  37 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  38 │         - --max-concurrent-challenges=60
  39 │         env:
  40 │         - name: POD_NAMESPACE
  41 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 localized_41.yaml:33-69
────────────────────────────────────────
  33 ┌       - args:
  34 │         - --v=2
  35 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  36 │         - --leader-election-namespace=kube-system
  37 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  38 │         - --max-concurrent-challenges=60
  39 │         env:
  40 │         - name: POD_NAMESPACE
  41 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 localized_41.yaml:33-69
────────────────────────────────────────
  33 ┌       - args:
  34 │         - --v=2
  35 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  36 │         - --leader-election-namespace=kube-system
  37 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  38 │         - --max-concurrent-challenges=60
  39 │         env:
  40 │         - name: POD_NAMESPACE
  41 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 localized_41.yaml:33-69
────────────────────────────────────────
  33 ┌       - args:
  34 │         - --v=2
  35 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  36 │         - --leader-election-namespace=kube-system
  37 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  38 │         - --max-concurrent-challenges=60
  39 │         env:
  40 │         - name: POD_NAMESPACE
  41 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 localized_41.yaml:33-69
────────────────────────────────────────
  33 ┌       - args:
  34 │         - --v=2
  35 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  36 │         - --leader-election-namespace=kube-system
  37 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  38 │         - --max-concurrent-challenges=60
  39 │         env:
  40 │         - name: POD_NAMESPACE
  41 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 localized_41.yaml:33-69
────────────────────────────────────────
  33 ┌       - args:
  34 │         - --v=2
  35 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  36 │         - --leader-election-namespace=kube-system
  37 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  38 │         - --max-concurrent-challenges=60
  39 │         env:
  40 │         - name: POD_NAMESPACE
  41 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 localized_41.yaml:33-69
────────────────────────────────────────
  33 ┌       - args:
  34 │         - --v=2
  35 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  36 │         - --leader-election-namespace=kube-system
  37 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
  38 │         - --max-concurrent-challenges=60
  39 │         env:
  40 │         - name: POD_NAMESPACE
  41 └           valueFrom:
  ..   
────────────────────────────────────────



localized_42.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 localized_42.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --leader-election-namespace=kube-system
  32 │         env:
  33 │         - name: POD_NAMESPACE
  34 │           valueFrom:
  35 │             fieldRef:
  36 │               fieldPath: metadata.namespace
  37 └         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 localized_42.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --leader-election-namespace=kube-system
  32 │         env:
  33 │         - name: POD_NAMESPACE
  34 │           valueFrom:
  35 │             fieldRef:
  36 │               fieldPath: metadata.namespace
  37 └         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 localized_42.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --leader-election-namespace=kube-system
  32 │         env:
  33 │         - name: POD_NAMESPACE
  34 │           valueFrom:
  35 │             fieldRef:
  36 │               fieldPath: metadata.namespace
  37 └         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 localized_42.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --leader-election-namespace=kube-system
  32 │         env:
  33 │         - name: POD_NAMESPACE
  34 │           valueFrom:
  35 │             fieldRef:
  36 │               fieldPath: metadata.namespace
  37 └         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 localized_42.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --leader-election-namespace=kube-system
  32 │         env:
  33 │         - name: POD_NAMESPACE
  34 │           valueFrom:
  35 │             fieldRef:
  36 │               fieldPath: metadata.namespace
  37 └         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 localized_42.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --leader-election-namespace=kube-system
  32 │         env:
  33 │         - name: POD_NAMESPACE
  34 │           valueFrom:
  35 │             fieldRef:
  36 │               fieldPath: metadata.namespace
  37 └         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 localized_42.yaml:29-45
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --leader-election-namespace=kube-system
  32 │         env:
  33 │         - name: POD_NAMESPACE
  34 │           valueFrom:
  35 │             fieldRef:
  36 │               fieldPath: metadata.namespace
  37 └         image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
  ..   
────────────────────────────────────────



localized_43.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 localized_43.yaml:29-77
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --secure-port=10250
  32 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  33 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  34 │         - --dynamic-serving-dns-names=cert-manager-webhook
  35 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  36 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 localized_43.yaml:29-77
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --secure-port=10250
  32 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  33 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  34 │         - --dynamic-serving-dns-names=cert-manager-webhook
  35 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  36 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 localized_43.yaml:29-77
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --secure-port=10250
  32 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  33 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  34 │         - --dynamic-serving-dns-names=cert-manager-webhook
  35 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  36 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 localized_43.yaml:29-77
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --secure-port=10250
  32 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  33 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  34 │         - --dynamic-serving-dns-names=cert-manager-webhook
  35 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  36 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 localized_43.yaml:29-77
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --secure-port=10250
  32 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  33 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  34 │         - --dynamic-serving-dns-names=cert-manager-webhook
  35 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  36 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 localized_43.yaml:29-77
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --secure-port=10250
  32 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  33 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  34 │         - --dynamic-serving-dns-names=cert-manager-webhook
  35 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  36 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 localized_43.yaml:29-77
────────────────────────────────────────
  29 ┌       - args:
  30 │         - --v=2
  31 │         - --secure-port=10250
  32 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  33 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  34 │         - --dynamic-serving-dns-names=cert-manager-webhook
  35 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
  36 │         - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
  37 └         env:
  ..   
────────────────────────────────────────



localstack.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'awslocal' of Pod 'awslocal' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'awslocal' of Pod 'awslocal' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'awslocal' of 'pod' 'awslocal' in 'infra' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'awslocal' of Pod 'awslocal' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'awslocal' of Pod 'awslocal' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'awslocal' of Pod 'awslocal' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'awslocal' of Pod 'awslocal' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'awslocal' of Pod 'awslocal' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'awslocal' of Pod 'awslocal' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'awslocal' of Pod 'awslocal' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'awslocal' of Pod 'awslocal' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "awslocal" of pod "awslocal" in "infra" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container awslocal in infra namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod awslocal in infra namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 localstack.yaml:9-21
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 └     - name: SERVICES
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container awslocal in pod awslocal (namespace: infra) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 localstack.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: awslocal
  11 │     image: localstack/localstack:1.3
  12 │     env:
  13 │     - name: AWS_REGION
  14 │       value: us-west-2
  15 │     - name: EDGE_PORT
  16 │       value: '4566'
  17 │     - name: SERVICES
  18 └       value: sqs
  ..   
────────────────────────────────────────



localstorage_pod.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 98, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'volume-test' of Pod 'volume-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-test' of Pod 'volume-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-test' of 'pod' 'volume-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volume-test' of Pod 'volume-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-test' of Pod 'volume-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-test' of Pod 'volume-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volume-test' of Pod 'volume-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volume-test' of Pod 'volume-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volume-test' of Pod 'volume-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-test' of Pod 'volume-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-test' of Pod 'volume-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-test" of pod "volume-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 localstorage_pod.yaml:8-20
────────────────────────────────────────
   8 ┌   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 │     volumeMounts:
  16 └     - name: volv
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volume-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 localstorage_pod.yaml:4-5
────────────────────────────────────────
   4 ┌   name: volume-test
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volume-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 localstorage_pod.yaml:7-24
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: volume-test
   9 │     image: busybox:stable
  10 │     imagePullPolicy: IfNotPresent
  11 │     command:
  12 │     - sh
  13 │     - "-c"
  14 │     - "touch /data/file1 && sleep infinity"
  15 └     volumeMounts:
  ..   
────────────────────────────────────────



localvolume.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'configmap-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'configmap-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'configmap-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'configmap-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "configmap-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod configmap-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 localvolume.yaml:4
────────────────────────────────────────
   4 [   name: configmap-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container configmap-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 localvolume.yaml:7-11
────────────────────────────────────────
   7 ┌     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 └           mountPath: /etc/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod configmap-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 localvolume.yaml:6-18
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: nginx
   8 │       image: nginx:latest
   9 │       volumeMounts:
  10 │         - name: configvolume
  11 │           mountPath: /etc/config
  12 │   volumes:
  13 │     - name: config-vol
  14 └       configMap:
  ..   
────────────────────────────────────────



lock1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'lock' of Deployment 'lock' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'lock' of Deployment 'lock' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'lock' of 'deployment' 'lock' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'lock' of Deployment 'lock' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'lock' of Deployment 'lock' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'lock' of Deployment 'lock' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'lock' of Deployment 'lock' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'lock' of Deployment 'lock' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'lock' of Deployment 'lock' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'lock' of Deployment 'lock' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'lock' of Deployment 'lock' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "lock" of deployment "lock" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment lock in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 lock1.yaml:4
────────────────────────────────────────
   4 [   name: lock
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container lock in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 lock1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment lock in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 lock1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: lock
  17 └         image: gcr.io/google_containers/pause-amd64:3.0
────────────────────────────────────────



locust-deployment.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'locust-giropops' of 'deployment' 'locust-giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "locust-giropops" of deployment "locust-giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment locust-giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 locust-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: locust-giropops
   6 └   name: locust-giropops
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container locust-giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment locust-giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container locust-giropops in deployment locust-giropops (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 locust-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────



locust-deployment1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'locust-giropops' of 'deployment' 'locust-giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "locust-giropops" of deployment "locust-giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment locust-giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 locust-deployment1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: locust-giropops
   6 └   name: locust-giropops
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container locust-giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment locust-giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-deployment1.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container locust-giropops in deployment locust-giropops (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 locust-deployment1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────



locust-deployment2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'locust-giropops' of 'deployment' 'locust-giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "locust-giropops" of deployment "locust-giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment locust-giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 locust-deployment2.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: locust-giropops
   6 └   name: locust-giropops
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container locust-giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment locust-giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-deployment2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container locust-giropops in deployment locust-giropops (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 locust-deployment2.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────



locust-master-controller.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'locust' of ReplicationController 'locust-master' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'locust' of ReplicationController 'locust-master' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'locust' of 'replicationcontroller' 'locust-master' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'locust' of ReplicationController 'locust-master' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'locust' of ReplicationController 'locust-master' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'locust' of ReplicationController 'locust-master' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'locust' of ReplicationController 'locust-master' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'locust' of ReplicationController 'locust-master' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'locust' of ReplicationController 'locust-master' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'locust' of ReplicationController 'locust-master' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'locust' of ReplicationController 'locust-master' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'locust' of ReplicationController 'locust-master' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "locust" of replicationcontroller "locust-master" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller locust-master in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 locust-master-controller.yaml:4-7
────────────────────────────────────────
   4 ┌   name: locust-master
   5 │   labels:
   6 │     name: locust
   7 └     role: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container locust-master in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller locust-master in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-master-controller.yaml:19-36
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container locust in replicationcontroller locust-master (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 locust-master-controller.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────



locust-master-controller1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'locust' of ReplicationController 'locust-master' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'locust' of ReplicationController 'locust-master' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'locust' of 'replicationcontroller' 'locust-master' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'locust' of ReplicationController 'locust-master' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'locust' of ReplicationController 'locust-master' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'locust' of ReplicationController 'locust-master' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'locust' of ReplicationController 'locust-master' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'locust' of ReplicationController 'locust-master' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'locust' of ReplicationController 'locust-master' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'locust' of ReplicationController 'locust-master' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'locust' of ReplicationController 'locust-master' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'locust' of ReplicationController 'locust-master' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "locust" of replicationcontroller "locust-master" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller locust-master in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 locust-master-controller1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: locust-master
   5 │   labels:
   6 │     name: locust
   7 └     role: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container locust-master in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller locust-master in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-master-controller1.yaml:19-36
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container locust in replicationcontroller locust-master (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 locust-master-controller1.yaml:20-36
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: master
  25 │             - name: TARGET_HOST
  26 │               value: http://sample-webapp:8000
  27 │           ports:
  28 └             - name: loc-master-web
  ..   
────────────────────────────────────────



locust-worker-controller.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'locust' of ReplicationController 'locust-worker' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'locust' of ReplicationController 'locust-worker' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'locust' of 'replicationcontroller' 'locust-worker' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'locust' of ReplicationController 'locust-worker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'locust' of ReplicationController 'locust-worker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'locust' of ReplicationController 'locust-worker' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'locust' of ReplicationController 'locust-worker' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'locust' of ReplicationController 'locust-worker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'locust' of ReplicationController 'locust-worker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'locust' of ReplicationController 'locust-worker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'locust' of ReplicationController 'locust-worker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'locust' of ReplicationController 'locust-worker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "locust" of replicationcontroller "locust-worker" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller locust-worker in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 locust-worker-controller.yaml:4-7
────────────────────────────────────────
   4 ┌   name: locust-worker
   5 │   labels:
   6 │     name: locust
   7 └     role: worker
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container locust-worker in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller locust-worker in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-worker-controller.yaml:19-28
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container locust in replicationcontroller locust-worker (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 locust-worker-controller.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────



locust-worker-controller1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'locust' of ReplicationController 'locust-worker' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'locust' of ReplicationController 'locust-worker' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'locust' of 'replicationcontroller' 'locust-worker' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'locust' of ReplicationController 'locust-worker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'locust' of ReplicationController 'locust-worker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'locust' of ReplicationController 'locust-worker' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'locust' of ReplicationController 'locust-worker' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'locust' of ReplicationController 'locust-worker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'locust' of ReplicationController 'locust-worker' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'locust' of ReplicationController 'locust-worker' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'locust' of ReplicationController 'locust-worker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'locust' of ReplicationController 'locust-worker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "locust" of replicationcontroller "locust-worker" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller locust-worker in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 locust-worker-controller1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: locust-worker
   5 │   labels:
   6 │     name: locust
   7 └     role: worker
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container locust-worker in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller locust-worker in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust-worker-controller1.yaml:19-28
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container locust in replicationcontroller locust-worker (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 locust-worker-controller1.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: locust
  21 │           image: registry.cn-hangzhou.aliyuncs.com/we1ru1/locust-tasks:latest
  22 │           env:
  23 │             - name: LOCUST_MODE
  24 │               value: worker
  25 │             - name: LOCUST_MASTER
  26 │               value: locust-master
  27 │             - name: TARGET_HOST
  28 └               value: http://sample-webapp:8000
────────────────────────────────────────



locust1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'locust-giropops' of 'deployment' 'locust-giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "locust-giropops" of deployment "locust-giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment locust-giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 locust1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: locust-giropops
   6 └   name: locust-giropops
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container locust-giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment locust-giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust1.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container locust-giropops in deployment locust-giropops (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 locust1.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────



locust2_3.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'locust' of Deployment 'locust' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'locust' of Deployment 'locust' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'locust' of 'deployment' 'locust' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'locust' of Deployment 'locust' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'locust' of Deployment 'locust' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'locust' of Deployment 'locust' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'locust' of Deployment 'locust' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'locust' of Deployment 'locust' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'locust' of Deployment 'locust' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "locust" of deployment "locust" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment locust in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 locust2_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: locust
   5 │   labels:
   6 └     app: locust
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container locust in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment locust in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust2_3.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 └         - -f
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container locust in deployment locust (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 locust2_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: locust
  19 │         image: locustio/locust:2.8.4
  20 │         resources:
  21 │           limits:
  22 │             cpu: 800m
  23 │             memory: 128Mi
  24 │         args:
  25 │         - -f
  26 └         - /mnt/locust/locustfile.py
  ..   
────────────────────────────────────────



locust3.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'locust-giropops' of 'deployment' 'locust-giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "locust-giropops" of deployment "locust-giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment locust-giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 locust3.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: locust-giropops
   6 └   name: locust-giropops
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container locust-giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment locust-giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust3.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container locust-giropops in deployment locust-giropops (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 locust3.yaml:18-28
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         env:
  21 │           - name:  LOCUST_LOCUSTFILE
  22 │             value: "/usr/src/app/scripts/locustfile.py"
  23 │         ports:
  24 │         - containerPort: 8089
  25 │         imagePullPolicy: Always
  26 └         volumeMounts:
  ..   
────────────────────────────────────────



locust4.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'locust-giropops' of 'deployment' 'locust-giropops' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'locust-giropops' of Deployment 'locust-giropops' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "locust-giropops" of deployment "locust-giropops" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment locust-giropops in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 locust4.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: locust-giropops
   6 └   name: locust-giropops
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container locust-giropops in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment locust-giropops in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust4.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container locust-giropops in deployment locust-giropops (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 locust4.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: linuxtips/locust-giropops:1.0
  19 │         name: locust-giropops
  20 │         ports:
  21 │         - containerPort: 8089
  22 └         imagePullPolicy: Always
────────────────────────────────────────



locust5_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Deployment 'locust-master' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Deployment 'locust-master' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'deployment' 'locust-master' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Deployment 'locust-master' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Deployment 'locust-master' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'master' of Deployment 'locust-master' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Deployment 'locust-master' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Deployment 'locust-master' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Deployment 'locust-master' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Deployment 'locust-master' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Deployment 'locust-master' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Deployment 'locust-master' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of deployment "locust-master" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment locust-master in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 locust5_1.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     deployment.kubernetes.io/revision: '1'
   6 │   labels:
   7 │     role: locust-master
   8 │     app: locust-master
   9 └   name: locust-master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container locust-master in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment locust-master in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust5_1.yaml:27-54
────────────────────────────────────────
  27 ┌       containers:
  28 │       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 └           name: locust-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container master in deployment locust-master (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 locust5_1.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: master
  31 │         args:
  32 │         - --master
  33 │         volumeMounts:
  34 │         - mountPath: /home/locust
  35 │           name: locust-scripts
  36 └         ports:
  ..   
────────────────────────────────────────



locust5_3.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'worker' of Deployment 'locust-worker' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 locust5_3.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 │         - mountPath: /home/locust
  36 └           name: locust-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'worker' of Deployment 'locust-worker' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 locust5_3.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 │         - mountPath: /home/locust
  36 └           name: locust-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'worker' of 'deployment' 'locust-worker' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 locust5_3.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 │         - mountPath: /home/locust
  36 └           name: locust-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'worker' of Deployment 'locust-worker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 locust5_3.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 │         - mountPath: /home/locust
  36 └           name: locust-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'worker' of Deployment 'locust-worker' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 locust5_3.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 │         - mountPath: /home/locust
  36 └           name: locust-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'worker' of Deployment 'locust-worker' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 locust5_3.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 │         - mountPath: /home/locust
  36 └           name: locust-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'worker' of Deployment 'locust-worker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 locust5_3.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 │         - mountPath: /home/locust
  36 └           name: locust-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'worker' of Deployment 'locust-worker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 locust5_3.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 │         - mountPath: /home/locust
  36 └           name: locust-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 locust5_3.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 │         - mountPath: /home/locust
  36 └           name: locust-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "worker" of deployment "locust-worker" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 locust5_3.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 │         - mountPath: /home/locust
  36 └           name: locust-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 locust5_3.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 │         - mountPath: /home/locust
  36 └           name: locust-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment locust-worker in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 locust5_3.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     deployment.kubernetes.io/revision: '1'
   6 │   labels:
   7 │     role: locust-worker
   8 │     app: locust-worker
   9 └   name: locust-worker
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container locust-worker in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust5_3.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 │         - mountPath: /home/locust
  36 └           name: locust-scripts
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment locust-worker in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 locust5_3.yaml:27-54
────────────────────────────────────────
  27 ┌       containers:
  28 │       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 └         - mountPath: /home/locust
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container worker in deployment locust-worker (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 locust5_3.yaml:28-45
────────────────────────────────────────
  28 ┌       - image: locustio/locust
  29 │         imagePullPolicy: Always
  30 │         name: worker
  31 │         args:
  32 │         - --worker
  33 │         - --master-host=locust-master
  34 │         volumeMounts:
  35 │         - mountPath: /home/locust
  36 └           name: locust-scripts
  ..   
────────────────────────────────────────



log-deployment.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'log-reader' of Deployment 'logs-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'log-reader' of 'deployment' 'logs-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "log-reader" of deployment "logs-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment logs-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log-deployment.yaml:4
────────────────────────────────────────
   4 [   name: logs-dep
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logs-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logs-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container log-reader in deployment logs-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: log-reader
  17 │         image: lapalmerjack/output-reader:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────



log-deployment1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'log-reader' of Deployment 'logs-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'log-reader' of 'deployment' 'logs-dep' in 'ping-pong-uuid' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "log-reader" of deployment "logs-dep" in "ping-pong-uuid" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logs-dep in ping-pong-uuid namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logs-dep in ping-pong-uuid namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container log-reader in deployment logs-dep (namespace: ping-pong-uuid) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log-deployment1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/output-reader:latest
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────



log-deployment2.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'log-reader' of Deployment 'logs-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'log-reader' of 'deployment' 'logs-dep' in 'ping-pong-uuid' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "log-reader" of deployment "logs-dep" in "ping-pong-uuid" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logs-dep in ping-pong-uuid namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logs-dep in ping-pong-uuid namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment2.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container log-reader in deployment logs-dep (namespace: ping-pong-uuid) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: hello-config
  26 └               key: example.string
────────────────────────────────────────



log-deployment3.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'log-reader' of Deployment 'logs-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'log-reader' of 'deployment' 'logs-dep' in 'ping-pong-uuid' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "log-reader" of deployment "logs-dep" in "ping-pong-uuid" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logs-dep in ping-pong-uuid namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logs-dep in ping-pong-uuid namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment3.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container log-reader in deployment logs-dep (namespace: ping-pong-uuid) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log-deployment3.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────



log-deployment4.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'log-reader' of Deployment 'logs-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'log-reader' of 'deployment' 'logs-dep' in 'ping-pong-uuid' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "log-reader" of deployment "logs-dep" in "ping-pong-uuid" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logs-dep in ping-pong-uuid namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logs-dep in ping-pong-uuid namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment4.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container log-reader in deployment logs-dep (namespace: ping-pong-uuid) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log-deployment4.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:2.06
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────



log-deployment5.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'log-reader' of Deployment 'logs-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'log-reader' of 'deployment' 'logs-dep' in 'ping-pong-uuid' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "log-reader" of deployment "logs-dep" in "ping-pong-uuid" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logs-dep in ping-pong-uuid namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logs-dep in ping-pong-uuid namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment5.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container log-reader in deployment logs-dep (namespace: ping-pong-uuid) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log-deployment5.yaml:17-26
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: EXAMPLE
  23 │           valueFrom:
  24 │             configMapKeyRef:
  25 │               name: database-config
  26 └               key: example.string
────────────────────────────────────────



log-deployment6.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'log-reader' of Deployment 'logs-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'log-reader' of 'deployment' 'logs-dep' in 'ping-pong-uuid' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'log-reader' of Deployment 'logs-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "log-reader" of deployment "logs-dep" in "ping-pong-uuid" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logs-dep in ping-pong-uuid namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logs-dep in ping-pong-uuid namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-deployment6.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container log-reader in deployment logs-dep (namespace: ping-pong-uuid) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log-deployment6.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: log-reader
  18 │         image: lapalmerjack/outputreader:3.02v2
  19 │         resources:
  20 │           limits:
  21 │             cpu: 50m
  22 │             memory: 170Mi
  23 │         ports:
  24 │         - containerPort: 8080
  25 └         env:
  ..   
────────────────────────────────────────



log-gatherer_1.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 93, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'log-gatherer' of DaemonSet 'log-gatherer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'log-gatherer' of DaemonSet 'log-gatherer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'log-gatherer' of 'daemonset' 'log-gatherer' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'log-gatherer' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 log-gatherer_1.yaml:8-51
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       k8s-app: cilium-test-logs
  11 │       kubernetes.io/cluster-service: 'true'
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: cilium-test-logs
  16 └         kubernetes.io/cluster-service: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0010 (HIGH): DaemonSet 'log-gatherer' should not set 'spec.template.spec.hostPID' to true
════════════════════════════════════════
Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.

See https://avd.aquasec.com/misconfig/ksv010
────────────────────────────────────────
 log-gatherer_1.yaml:8-51
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       k8s-app: cilium-test-logs
  11 │       kubernetes.io/cluster-service: 'true'
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: cilium-test-logs
  16 └         kubernetes.io/cluster-service: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'log-gatherer' of DaemonSet 'log-gatherer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'log-gatherer' of DaemonSet 'log-gatherer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'log-gatherer' of DaemonSet 'log-gatherer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'log-gatherer' of DaemonSet 'log-gatherer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'log-gatherer' of DaemonSet 'log-gatherer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'log-gatherer' of DaemonSet 'log-gatherer' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'log-gatherer' of DaemonSet 'log-gatherer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'log-gatherer' of DaemonSet 'log-gatherer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'log-gatherer' of DaemonSet 'log-gatherer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'log-gatherer' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 log-gatherer_1.yaml:8-51
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       k8s-app: cilium-test-logs
  11 │       kubernetes.io/cluster-service: 'true'
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         k8s-app: cilium-test-logs
  16 └         kubernetes.io/cluster-service: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "log-gatherer" of daemonset "log-gatherer" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset log-gatherer in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log-gatherer_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: log-gatherer
   5 │   labels:
   6 └     k8s-app: cilium-test-logs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset log-gatherer in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-gatherer_1.yaml:18-51
────────────────────────────────────────
  18 ┌       containers:
  19 │       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container log-gatherer in daemonset log-gatherer (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log-gatherer_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - args:
  20 │         - '10000'
  21 │         command:
  22 │         - sleep
  23 │         image: quay.io/cilium/log-gatherer:v1.2
  24 │         imagePullPolicy: IfNotPresent
  25 │         name: log-gatherer
  26 │         securityContext:
  27 └           privileged: true
  ..   
────────────────────────────────────────



log-message-processor.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'log-channel' of Deployment 'log-channel' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'log-channel' of Deployment 'log-channel' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'log-channel' of 'deployment' 'log-channel' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'log-channel' of Deployment 'log-channel' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'log-channel' of Deployment 'log-channel' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'log-channel' of Deployment 'log-channel' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'log-channel' of Deployment 'log-channel' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'log-channel' of Deployment 'log-channel' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'log-channel' of Deployment 'log-channel' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'log-channel' of Deployment 'log-channel' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'log-channel' of Deployment 'log-channel' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "log-channel" of deployment "log-channel" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment log-channel in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log-message-processor.yaml:4
────────────────────────────────────────
   4 [   name: log-channel
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container log-channel in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment log-channel in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-message-processor.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 └         - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container log-channel in deployment log-channel (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log-message-processor.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: log-channel
  17 │         image: stebanrodriguez/app-log-message:0.1.0
  18 │         ports:
  19 │         - containerPort: 6060
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis
  23 │         - name: REDIS_PORT
  24 └           value: '6379'
  ..   
────────────────────────────────────────



log-output-deployment.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'log-output' of Deployment 'log-output' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'log-output' of Deployment 'log-output' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'log-output' of 'deployment' 'log-output' in 'devops-apps' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'log-output' of Deployment 'log-output' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'log-output' of Deployment 'log-output' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'log-output' of Deployment 'log-output' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'log-output' of Deployment 'log-output' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'log-output' of Deployment 'log-output' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'log-output' of Deployment 'log-output' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'log-output' of Deployment 'log-output' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'log-output' of Deployment 'log-output' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'log-output' of Deployment 'log-output' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "log-output" of deployment "log-output" in "devops-apps" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container log-output in devops-apps namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-output-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 │                 name: log-output-config
  25 └                 key: MESSAGE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment log-output in devops-apps namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-output-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: log-output
  18 │         image: log-output:latest
  19 │         imagePullPolicy: Never
  20 │         env:
  21 │           - name: MESSAGE
  22 │             valueFrom:
  23 │               configMapKeyRef:
  24 └                 name: log-output-config
  ..   
────────────────────────────────────────



log-output-deployment1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'log-output' of Deployment 'log-output' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log-output-deployment1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'log-output' of Deployment 'log-output' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log-output-deployment1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'log-output' of 'deployment' 'log-output' in 'devops-apps' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log-output-deployment1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'log-output' of Deployment 'log-output' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log-output-deployment1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'log-output' of Deployment 'log-output' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log-output-deployment1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'log-output' of Deployment 'log-output' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log-output-deployment1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'log-output' of Deployment 'log-output' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log-output-deployment1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'log-output' of Deployment 'log-output' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log-output-deployment1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log-output-deployment1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "log-output" of deployment "log-output" in "devops-apps" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log-output-deployment1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log-output-deployment1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container log-output in devops-apps namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-output-deployment1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment log-output in devops-apps namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-output-deployment1.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 └             memory: "32Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container log-output in deployment log-output (namespace: devops-apps) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log-output-deployment1.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         resources:
  23 │           requests:
  24 │             memory: "32Mi"
  25 └             cpu: "100m"
  ..   
────────────────────────────────────────



log-output-deployment2.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'log-output' of Deployment 'log-output' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'log-output' of Deployment 'log-output' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'log-output' of 'deployment' 'log-output' in 'devops-apps' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'log-output' of Deployment 'log-output' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'log-output' of Deployment 'log-output' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'log-output' of Deployment 'log-output' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'log-output' of Deployment 'log-output' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'log-output' of Deployment 'log-output' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'log-output' of Deployment 'log-output' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'log-output' of Deployment 'log-output' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'log-output' of Deployment 'log-output' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'log-output' of Deployment 'log-output' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "log-output" of deployment "log-output" in "devops-apps" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container log-output in devops-apps namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment log-output in devops-apps namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log-output-deployment2.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container log-output in deployment log-output (namespace: devops-apps) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log-output-deployment2.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: log-output
  18 │         image: yuc217/log-output:latest
  19 │         imagePullPolicy: "Always"
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         readinessProbe:
  23 │           httpGet:
  24 │             path: /
  25 └             port: 3000
  ..   
────────────────────────────────────────



log10_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log10_1.yaml:4
────────────────────────────────────────
   4 [   name: apod-log
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log10_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log10_1.yaml:14-19
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: api
  16 │         image: access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────



log11_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'apod' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "apod" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in apod namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in apod namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in apod namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log11_1.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: apod) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log11_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────



log12_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log12_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: apod-log
   5 │   labels:
   6 └     kubernetes.courselabs.co: networkpolicy
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log12_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log12_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────



log14_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in kiamol-ch14-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in kiamol-ch14-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log14_1.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: kiamol-ch14-test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log14_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────



log15_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log15_1.yaml:4
────────────────────────────────────────
   4 [   name: apod-log
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log15_1.yaml:14-19
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log15_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────



log16_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log16_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: apod-log
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log16_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log16_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────



log17_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log17_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: apod-log
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log17_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log17_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────



log19_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in kiamol-ch14-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in kiamol-ch14-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log19_1.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: kiamol-ch14-test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log19_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────



log1_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log1_1.yaml:4
────────────────────────────────────────
   4 [   name: apod-log
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log1_1.yaml:14-19
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────



log20_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log20_1.yaml:4
────────────────────────────────────────
   4 [   name: apod-log
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log20_1.yaml:14-19
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log20_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────



log21_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log21_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: apod-log
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log21_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log21_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────



log22_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log22_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: apod-log
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log22_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log22_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────



log23.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'loggen' of Pod 'logme' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'loggen' of Pod 'logme' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'loggen' of 'pod' 'logme' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'loggen' of Pod 'logme' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'loggen' of Pod 'logme' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'loggen' of Pod 'logme' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'loggen' of Pod 'logme' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loggen' of Pod 'logme' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loggen' of Pod 'logme' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loggen' of Pod 'logme' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'loggen' of Pod 'logme' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'loggen' of Pod 'logme' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loggen" of pod "logme" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod logme in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log23.yaml:4
────────────────────────────────────────
   4 [   name: logme
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logme in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log23.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod logme in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log23.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: loggen
   8 │     image: centos
   9 │     command:
  10 │       - "bin/bash"
  11 │       - "-c"
  12 └       - "while true; do echo $(date) | tee /dev/stderr; sleep 1; done"
────────────────────────────────────────



log2_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log2_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: apod-log
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log2_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────



log3_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log3_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: apod-log
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log3_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log3_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────



log4_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in kiamol-ch14-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in kiamol-ch14-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log4_1.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: kiamol-ch14-test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────



log5_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log5_1.yaml:4
────────────────────────────────────────
   4 [   name: apod-log
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log5_1.yaml:14-19
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log5_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: api
  16 │         image: kiamol/ch14-access-log
  17 │         ports:
  18 │         - containerPort: 80
  19 └           name: api
────────────────────────────────────────



log6_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log6_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: apod-log
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log6_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log6_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────



log7_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apod-log in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 log7_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: apod-log
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log7_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log7_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: api
  18 │         image: kiamol/ch14-access-log
  19 │         ports:
  20 │         - containerPort: 80
  21 └           name: api
────────────────────────────────────────



log8_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 8, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'apod' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "apod" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in apod namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in apod namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in apod namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log8_1.yaml:17-26
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: apod) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log8_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: api
  23 │         resources:
  24 │           limits:
  25 │             cpu: 250m
  26 └             memory: 200Mi
────────────────────────────────────────



log9_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'apod' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "apod" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in apod namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in apod namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in apod namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log9_1.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: apod) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log9_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: api
  19 │         image: kiamol/ch14-access-log
  20 │         ports:
  21 │         - containerPort: 80
  22 └           name: api
────────────────────────────────────────



log_1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'api' of Deployment 'apod-log' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'api' of 'deployment' 'apod-log' in 'kiamol-ch14-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'api' of Deployment 'apod-log' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'api' of Deployment 'apod-log' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'api' of Deployment 'apod-log' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'api' of Deployment 'apod-log' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "api" of deployment "apod-log" in "kiamol-ch14-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apod-log in kiamol-ch14-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apod-log in kiamol-ch14-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apod-log in kiamol-ch14-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 log_1.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container api in deployment apod-log (namespace: kiamol-ch14-test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 log_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: api
  17 │         image: kiamol/ch14-access-log
  18 │         ports:
  19 │         - containerPort: 80
  20 └           name: api
────────────────────────────────────────



loggen-ansi.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'loggen' of Deployment 'loggen-ansi' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'loggen' of Deployment 'loggen-ansi' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'loggen' of 'deployment' 'loggen-ansi' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'loggen' of Deployment 'loggen-ansi' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'loggen' of Deployment 'loggen-ansi' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'loggen' of Deployment 'loggen-ansi' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loggen' of Deployment 'loggen-ansi' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loggen' of Deployment 'loggen-ansi' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loggen' of Deployment 'loggen-ansi' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'loggen' of Deployment 'loggen-ansi' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'loggen' of Deployment 'loggen-ansi' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loggen" of deployment "loggen-ansi" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loggen-ansi in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loggen-ansi.yaml:5-9
────────────────────────────────────────
   5 ┌   name: loggen-ansi
   6 │   namespace: default
   7 │   labels:
   8 │     app.kubernetes.io/name: loggen
   9 └     app.kubernetes.io/instance: kubetail-dev-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loggen-ansi in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment loggen-ansi in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loggen-ansi.yaml:24-28
────────────────────────────────────────
  24 ┌       containers:
  25 │       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loggen in deployment loggen-ansi (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loggen-ansi.yaml:25-28
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 │         args: ["-ansi"]
  28 └         resources: {}
────────────────────────────────────────



loggen.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'loggen' of Deployment 'loggen' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'loggen' of Deployment 'loggen' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'loggen' of 'deployment' 'loggen' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'loggen' of Deployment 'loggen' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'loggen' of Deployment 'loggen' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'loggen' of Deployment 'loggen' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loggen' of Deployment 'loggen' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loggen' of Deployment 'loggen' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loggen' of Deployment 'loggen' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'loggen' of Deployment 'loggen' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'loggen' of Deployment 'loggen' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loggen" of deployment "loggen" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loggen in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loggen.yaml:5-9
────────────────────────────────────────
   5 ┌   name: loggen
   6 │   namespace: default
   7 │   labels:
   8 │     app.kubernetes.io/name: loggen
   9 └     app.kubernetes.io/instance: kubetail-dev-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loggen in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment loggen in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loggen.yaml:24-27
────────────────────────────────────────
  24 ┌       containers:
  25 │       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loggen in deployment loggen (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loggen.yaml:25-27
────────────────────────────────────────
  25 ┌       - name: loggen
  26 │         image: docker.io/kubetail/loggen:0.1.2
  27 └         resources: {}
────────────────────────────────────────



logger-deploy.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'docker-log-generator' of Deployment 'docker-log-generator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logger-deploy.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: docker-log-generator
  21 │         imagePullPolicy: Always
  22 │         image: coffeeapplied/dockerloggenerator:1.0.2
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │             memory: 50Mi
  27 │           limits:
  28 │             cpu: 100m
  29 └             memory: 100Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'docker-log-generator' of Deployment 'docker-log-generator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logger-deploy.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: docker-log-generator
  21 │         imagePullPolicy: Always
  22 │         image: coffeeapplied/dockerloggenerator:1.0.2
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │             memory: 50Mi
  27 │           limits:
  28 │             cpu: 100m
  29 └             memory: 100Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'docker-log-generator' of 'deployment' 'docker-log-generator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logger-deploy.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: docker-log-generator
  21 │         imagePullPolicy: Always
  22 │         image: coffeeapplied/dockerloggenerator:1.0.2
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │             memory: 50Mi
  27 │           limits:
  28 │             cpu: 100m
  29 └             memory: 100Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'docker-log-generator' of Deployment 'docker-log-generator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logger-deploy.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: docker-log-generator
  21 │         imagePullPolicy: Always
  22 │         image: coffeeapplied/dockerloggenerator:1.0.2
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │             memory: 50Mi
  27 │           limits:
  28 │             cpu: 100m
  29 └             memory: 100Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'docker-log-generator' of Deployment 'docker-log-generator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logger-deploy.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: docker-log-generator
  21 │         imagePullPolicy: Always
  22 │         image: coffeeapplied/dockerloggenerator:1.0.2
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │             memory: 50Mi
  27 │           limits:
  28 │             cpu: 100m
  29 └             memory: 100Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'docker-log-generator' of Deployment 'docker-log-generator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logger-deploy.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: docker-log-generator
  21 │         imagePullPolicy: Always
  22 │         image: coffeeapplied/dockerloggenerator:1.0.2
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │             memory: 50Mi
  27 │           limits:
  28 │             cpu: 100m
  29 └             memory: 100Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'docker-log-generator' of Deployment 'docker-log-generator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logger-deploy.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: docker-log-generator
  21 │         imagePullPolicy: Always
  22 │         image: coffeeapplied/dockerloggenerator:1.0.2
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │             memory: 50Mi
  27 │           limits:
  28 │             cpu: 100m
  29 └             memory: 100Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logger-deploy.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: docker-log-generator
  21 │         imagePullPolicy: Always
  22 │         image: coffeeapplied/dockerloggenerator:1.0.2
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │             memory: 50Mi
  27 │           limits:
  28 │             cpu: 100m
  29 └             memory: 100Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "docker-log-generator" of deployment "docker-log-generator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logger-deploy.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: docker-log-generator
  21 │         imagePullPolicy: Always
  22 │         image: coffeeapplied/dockerloggenerator:1.0.2
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │             memory: 50Mi
  27 │           limits:
  28 │             cpu: 100m
  29 └             memory: 100Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logger-deploy.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: docker-log-generator
  21 │         imagePullPolicy: Always
  22 │         image: coffeeapplied/dockerloggenerator:1.0.2
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │             memory: 50Mi
  27 │           limits:
  28 │             cpu: 100m
  29 └             memory: 100Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment docker-log-generator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 logger-deploy.yaml:6-8
────────────────────────────────────────
   6 ┌   name: docker-log-generator
   7 │   labels:
   8 └     app: docker-log-generator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container docker-log-generator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logger-deploy.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: docker-log-generator
  21 │         imagePullPolicy: Always
  22 │         image: coffeeapplied/dockerloggenerator:1.0.2
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │             memory: 50Mi
  27 │           limits:
  28 │             cpu: 100m
  29 └             memory: 100Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment docker-log-generator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logger-deploy.yaml:19-29
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: docker-log-generator
  21 │         imagePullPolicy: Always
  22 │         image: coffeeapplied/dockerloggenerator:1.0.2
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │             memory: 50Mi
  27 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container docker-log-generator in deployment docker-log-generator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logger-deploy.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: docker-log-generator
  21 │         imagePullPolicy: Always
  22 │         image: coffeeapplied/dockerloggenerator:1.0.2
  23 │         resources:
  24 │           requests:
  25 │             cpu: 50m
  26 │             memory: 50Mi
  27 │           limits:
  28 │             cpu: 100m
  29 └             memory: 100Mi
────────────────────────────────────────



logging-promtail_4.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'promtail-container' of DaemonSet 'promtail' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'promtail-container' of DaemonSet 'promtail' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'promtail-container' of 'daemonset' 'promtail' in 'logging' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'promtail-container' of DaemonSet 'promtail' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'promtail-container' of DaemonSet 'promtail' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'promtail-container' of DaemonSet 'promtail' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'promtail-container' of DaemonSet 'promtail' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'promtail-container' of DaemonSet 'promtail' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'promtail-container' of DaemonSet 'promtail' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'promtail-container' of DaemonSet 'promtail' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'promtail-container' of DaemonSet 'promtail' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'promtail' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 logging-promtail_4.yaml:7-43
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: promtail
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: promtail
  14 │     spec:
  15 └       serviceAccount: promtail-serviceaccount
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "promtail-container" of daemonset "promtail" in "logging" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container promtail in logging namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset promtail in logging namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logging-promtail_4.yaml:15-43
────────────────────────────────────────
  15 ┌       serviceAccount: promtail-serviceaccount
  16 │       containers:
  17 │       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container promtail-container in daemonset promtail (namespace: logging) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logging-promtail_4.yaml:17-33
────────────────────────────────────────
  17 ┌       - name: promtail-container
  18 │         image: grafana/promtail:2.9.4
  19 │         args:
  20 │         - -config.file=/etc/promtail/promtail.yaml
  21 │         env:
  22 │         - name: HOSTNAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               fieldPath: spec.nodeName
  ..   
────────────────────────────────────────



logging-stack_2.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'elasticsearch' of Deployment 'elasticsearch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'elasticsearch' of 'deployment' 'elasticsearch' in 'logging' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'elasticsearch' of Deployment 'elasticsearch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "elasticsearch" of deployment "elasticsearch" in "logging" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container elasticsearch in logging namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment elasticsearch in logging namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logging-stack_2.yaml:20-43
────────────────────────────────────────
  20 ┌       containers:
  21 │       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container elasticsearch in deployment elasticsearch (namespace: logging) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logging-stack_2.yaml:21-40
────────────────────────────────────────
  21 ┌       - image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
  22 │         name: elasticsearch
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: discovery.type
  ..   
────────────────────────────────────────



logging-stack_4.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'fluentd-es' of Deployment 'fluentd-es' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logging-stack_4.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: fluentd-es
  22 │         image: gcr.io/google-containers/fluentd-elasticsearch:v2.0.1
  23 │         env:
  24 │         - name: FLUENTD_ARGS
  25 │           value: --no-supervisor -q
  26 │         resources:
  27 │           limits:
  28 │             memory: 500Mi
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fluentd-es' of Deployment 'fluentd-es' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logging-stack_4.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: fluentd-es
  22 │         image: gcr.io/google-containers/fluentd-elasticsearch:v2.0.1
  23 │         env:
  24 │         - name: FLUENTD_ARGS
  25 │           value: --no-supervisor -q
  26 │         resources:
  27 │           limits:
  28 │             memory: 500Mi
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fluentd-es' of 'deployment' 'fluentd-es' in 'logging' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logging-stack_4.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: fluentd-es
  22 │         image: gcr.io/google-containers/fluentd-elasticsearch:v2.0.1
  23 │         env:
  24 │         - name: FLUENTD_ARGS
  25 │           value: --no-supervisor -q
  26 │         resources:
  27 │           limits:
  28 │             memory: 500Mi
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'fluentd-es' of Deployment 'fluentd-es' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logging-stack_4.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: fluentd-es
  22 │         image: gcr.io/google-containers/fluentd-elasticsearch:v2.0.1
  23 │         env:
  24 │         - name: FLUENTD_ARGS
  25 │           value: --no-supervisor -q
  26 │         resources:
  27 │           limits:
  28 │             memory: 500Mi
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fluentd-es' of Deployment 'fluentd-es' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logging-stack_4.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: fluentd-es
  22 │         image: gcr.io/google-containers/fluentd-elasticsearch:v2.0.1
  23 │         env:
  24 │         - name: FLUENTD_ARGS
  25 │           value: --no-supervisor -q
  26 │         resources:
  27 │           limits:
  28 │             memory: 500Mi
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fluentd-es' of Deployment 'fluentd-es' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logging-stack_4.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: fluentd-es
  22 │         image: gcr.io/google-containers/fluentd-elasticsearch:v2.0.1
  23 │         env:
  24 │         - name: FLUENTD_ARGS
  25 │           value: --no-supervisor -q
  26 │         resources:
  27 │           limits:
  28 │             memory: 500Mi
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fluentd-es' of Deployment 'fluentd-es' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logging-stack_4.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: fluentd-es
  22 │         image: gcr.io/google-containers/fluentd-elasticsearch:v2.0.1
  23 │         env:
  24 │         - name: FLUENTD_ARGS
  25 │           value: --no-supervisor -q
  26 │         resources:
  27 │           limits:
  28 │             memory: 500Mi
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fluentd-es' of Deployment 'fluentd-es' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logging-stack_4.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: fluentd-es
  22 │         image: gcr.io/google-containers/fluentd-elasticsearch:v2.0.1
  23 │         env:
  24 │         - name: FLUENTD_ARGS
  25 │           value: --no-supervisor -q
  26 │         resources:
  27 │           limits:
  28 │             memory: 500Mi
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logging-stack_4.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: fluentd-es
  22 │         image: gcr.io/google-containers/fluentd-elasticsearch:v2.0.1
  23 │         env:
  24 │         - name: FLUENTD_ARGS
  25 │           value: --no-supervisor -q
  26 │         resources:
  27 │           limits:
  28 │             memory: 500Mi
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fluentd-es" of deployment "fluentd-es" in "logging" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logging-stack_4.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: fluentd-es
  22 │         image: gcr.io/google-containers/fluentd-elasticsearch:v2.0.1
  23 │         env:
  24 │         - name: FLUENTD_ARGS
  25 │           value: --no-supervisor -q
  26 │         resources:
  27 │           limits:
  28 │             memory: 500Mi
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logging-stack_4.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: fluentd-es
  22 │         image: gcr.io/google-containers/fluentd-elasticsearch:v2.0.1
  23 │         env:
  24 │         - name: FLUENTD_ARGS
  25 │           value: --no-supervisor -q
  26 │         resources:
  27 │           limits:
  28 │             memory: 500Mi
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container fluentd-es in logging namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logging-stack_4.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: fluentd-es
  22 │         image: gcr.io/google-containers/fluentd-elasticsearch:v2.0.1
  23 │         env:
  24 │         - name: FLUENTD_ARGS
  25 │           value: --no-supervisor -q
  26 │         resources:
  27 │           limits:
  28 │             memory: 500Mi
  29 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment fluentd-es in logging namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logging-stack_4.yaml:20-39
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: fluentd-es
  22 │         image: gcr.io/google-containers/fluentd-elasticsearch:v2.0.1
  23 │         env:
  24 │         - name: FLUENTD_ARGS
  25 │           value: --no-supervisor -q
  26 │         resources:
  27 │           limits:
  28 └             memory: 500Mi
  ..   
────────────────────────────────────────



logging-stack_7.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kibana' of Deployment 'kibana' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kibana' of Deployment 'kibana' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kibana' of 'deployment' 'kibana' in 'logging' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kibana' of Deployment 'kibana' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kibana' of Deployment 'kibana' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kibana' of Deployment 'kibana' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kibana' of Deployment 'kibana' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kibana' of Deployment 'kibana' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kibana' of Deployment 'kibana' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kibana" of deployment "kibana" in "logging" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kibana in logging namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kibana in logging namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logging-stack_7.yaml:20-34
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kibana in deployment kibana (namespace: logging) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logging-stack_7.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: kibana
  22 │         image: docker.elastic.co/kibana/kibana-oss:6.1.1
  23 │         resources:
  24 │           limits:
  25 │             cpu: 1000m
  26 │           requests:
  27 │             cpu: 100m
  28 │         env:
  29 └         - name: ELASTICSEARCH_URL
  ..   
────────────────────────────────────────



logging5.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'busybox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 logging5.yaml:10-13
────────────────────────────────────────
  10 ┌   creationTimestamp: null
  11 │   labels:
  12 │     run: busybox
  13 └   name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logging5.yaml:16-22
────────────────────────────────────────
  16 ┌   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 └     resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logging5.yaml:15-24
────────────────────────────────────────
  15 ┌   containers:
  16 │   - args:
  17 │     - /bin/sh
  18 │     - -c
  19 │     - 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
  20 │     image: busybox
  21 │     name: busybox
  22 │     resources: {}
  23 │   dnsPolicy: ClusterFirst
  24 └   restartPolicy: Never
────────────────────────────────────────



loggingservice.-dpl.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'loggingservice' of Deployment 'loggingservice-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'loggingservice' of Deployment 'loggingservice-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'loggingservice' of 'deployment' 'loggingservice-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'loggingservice' of Deployment 'loggingservice-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'loggingservice' of Deployment 'loggingservice-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'loggingservice' of Deployment 'loggingservice-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'loggingservice' of Deployment 'loggingservice-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loggingservice' of Deployment 'loggingservice-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loggingservice' of Deployment 'loggingservice-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loggingservice' of Deployment 'loggingservice-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'loggingservice' of Deployment 'loggingservice-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'loggingservice' of Deployment 'loggingservice-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loggingservice" of deployment "loggingservice-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loggingservice-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loggingservice.-dpl.yaml:4
────────────────────────────────────────
   4 [   name: loggingservice-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loggingservice-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loggingservice.-dpl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment loggingservice-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loggingservice.-dpl.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: loggingservice
  17 └         image: us.gcr.io/image-project-123/loggingservice
────────────────────────────────────────



login-deployment3.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'login' of Deployment 'login' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'login' of Deployment 'login' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'login' of 'deployment' 'login' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'login' of Deployment 'login' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'login' of Deployment 'login' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'login' of Deployment 'login' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'login' of Deployment 'login' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'login' of Deployment 'login' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'login' of Deployment 'login' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'login' of Deployment 'login' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'login' of Deployment 'login' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "login" of deployment "login" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment login in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 login-deployment3.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: login
   6 └   name: login
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container login in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment login in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 login-deployment3.yaml:17-24
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container login in deployment login (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 login-deployment3.yaml:18-24
────────────────────────────────────────
  18 ┌       - image: rahul12shaw/rahulitc:login
  19 │         name: login
  20 │         env:
  21 │         - name: "spring.datasource.username"
  22 │           value: root
  23 │         - name: "spring.datasource.password"
  24 └           value: root1234
────────────────────────────────────────



login.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sso-login' of Deployment 'sso-login' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sso-login' of Deployment 'sso-login' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sso-login' of 'deployment' 'sso-login' in 'sso' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sso-login' of Deployment 'sso-login' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sso-login' of Deployment 'sso-login' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sso-login' of Deployment 'sso-login' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sso-login' of Deployment 'sso-login' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sso-login' of Deployment 'sso-login' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sso-login' of Deployment 'sso-login' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sso-login' of Deployment 'sso-login' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sso-login' of Deployment 'sso-login' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sso-login' of Deployment 'sso-login' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sso-login" of deployment "sso-login" in "sso" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sso-login in sso namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment sso-login in sso namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 login.yaml:16-29
────────────────────────────────────────
  16 ┌       nodeSelector:
  17 │         kubernetes.io/arch: arm64
  18 │       containers:
  19 │       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 └         - name: HYDRA_ADMIN_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sso-login in deployment sso-login (namespace: sso) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 login.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: sso-login
  20 │         image: docker.prayujt.com/sso-login
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         env:
  24 │         - name: HYDRA_ADMIN_URL
  25 │           value: http://hydra-admin.hydra.svc.cluster.local:4445
  26 │         - name: KRATOS_ADMIN_URL
  27 └           value: http://kratos-admin.kratos.svc.cluster.local
  ..   
────────────────────────────────────────



logreader.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logreader-container' of DaemonSet 'logreader' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logreader-container' of DaemonSet 'logreader' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logreader-container' of 'daemonset' 'logreader' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logreader-container' of DaemonSet 'logreader' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logreader-container' of DaemonSet 'logreader' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'logreader-container' of DaemonSet 'logreader' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logreader-container' of DaemonSet 'logreader' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logreader-container' of DaemonSet 'logreader' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logreader-container' of DaemonSet 'logreader' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logreader-container' of DaemonSet 'logreader' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'logreader' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 logreader.yaml:6-34
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       pod: logreader-pod
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         pod: logreader-pod
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logreader-container" of daemonset "logreader" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset logreader in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 logreader.yaml:4
────────────────────────────────────────
   4 [   name: logreader
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logreader in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logreader.yaml:15-30
────────────────────────────────────────
  15 ┌       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset logreader in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logreader.yaml:14-34
────────────────────────────────────────
  14 ┌       containers:
  15 │       - image: ubuntu
  16 │         command:
  17 │         - bash
  18 │         - "-c"
  19 │         - |
  20 │           tail -f /var/log/containers/*_kube-system_*.log
  21 │         name: logreader-container
  22 └         resources:
  ..   
────────────────────────────────────────



logs-deployment.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logs' of Deployment 'logs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logs' of Deployment 'logs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logs' of 'deployment' 'logs' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logs' of Deployment 'logs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logs' of Deployment 'logs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logs' of Deployment 'logs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logs' of Deployment 'logs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logs' of Deployment 'logs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logs' of Deployment 'logs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logs" of deployment "logs" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment logs in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 logs-deployment.yaml:4
────────────────────────────────────────
   4 [   name: logs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logs in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logs in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logs-deployment.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 └         - name: REDIS_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logs in deployment logs (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logs-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: jayantduneja1234/demucs-logs:v1
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────



logs-deployment1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logs' of Deployment 'logs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logs' of Deployment 'logs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logs' of 'deployment' 'logs' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logs' of Deployment 'logs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logs' of Deployment 'logs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'logs' of Deployment 'logs' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logs' of Deployment 'logs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logs' of Deployment 'logs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logs' of Deployment 'logs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logs' of Deployment 'logs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logs" of deployment "logs" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment logs in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 logs-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: logs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logs in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logs-deployment1.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 │         - name: REDIS_HOST
  24 └           value: "redis"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logs in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logs-deployment1.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: logs
  17 │         image: gcr.io/dcsc-398122/demucs-logs-gke:latest
  18 │         resources:
  19 │           requests:
  20 │             cpu: 100m
  21 │             memory: 100Mi
  22 │         env:
  23 └         - name: REDIS_HOST
  ..   
────────────────────────────────────────



logs_1.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'openobserve' of StatefulSet 'openobserve' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logs_1.yaml:26-59
────────────────────────────────────────
  26 ┌       - name: openobserve
  27 │         image: public.ecr.aws/zinclabs/openobserve:latest
  28 │         env:
  29 │         - name: ZO_ROOT_USER_EMAIL
  30 │           valueFrom:
  31 │             secretKeyRef:
  32 │               name: openobserve
  33 │               key: ZO_ROOT_USER_EMAIL
  34 └         - name: ZO_ROOT_USER_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'openobserve' of StatefulSet 'openobserve' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logs_1.yaml:26-59
────────────────────────────────────────
  26 ┌       - name: openobserve
  27 │         image: public.ecr.aws/zinclabs/openobserve:latest
  28 │         env:
  29 │         - name: ZO_ROOT_USER_EMAIL
  30 │           valueFrom:
  31 │             secretKeyRef:
  32 │               name: openobserve
  33 │               key: ZO_ROOT_USER_EMAIL
  34 └         - name: ZO_ROOT_USER_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'openobserve' of 'statefulset' 'openobserve' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logs_1.yaml:26-59
────────────────────────────────────────
  26 ┌       - name: openobserve
  27 │         image: public.ecr.aws/zinclabs/openobserve:latest
  28 │         env:
  29 │         - name: ZO_ROOT_USER_EMAIL
  30 │           valueFrom:
  31 │             secretKeyRef:
  32 │               name: openobserve
  33 │               key: ZO_ROOT_USER_EMAIL
  34 └         - name: ZO_ROOT_USER_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'openobserve' of StatefulSet 'openobserve' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 logs_1.yaml:26-59
────────────────────────────────────────
  26 ┌       - name: openobserve
  27 │         image: public.ecr.aws/zinclabs/openobserve:latest
  28 │         env:
  29 │         - name: ZO_ROOT_USER_EMAIL
  30 │           valueFrom:
  31 │             secretKeyRef:
  32 │               name: openobserve
  33 │               key: ZO_ROOT_USER_EMAIL
  34 └         - name: ZO_ROOT_USER_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'openobserve' of StatefulSet 'openobserve' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logs_1.yaml:26-59
────────────────────────────────────────
  26 ┌       - name: openobserve
  27 │         image: public.ecr.aws/zinclabs/openobserve:latest
  28 │         env:
  29 │         - name: ZO_ROOT_USER_EMAIL
  30 │           valueFrom:
  31 │             secretKeyRef:
  32 │               name: openobserve
  33 │               key: ZO_ROOT_USER_EMAIL
  34 └         - name: ZO_ROOT_USER_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'openobserve' of StatefulSet 'openobserve' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logs_1.yaml:26-59
────────────────────────────────────────
  26 ┌       - name: openobserve
  27 │         image: public.ecr.aws/zinclabs/openobserve:latest
  28 │         env:
  29 │         - name: ZO_ROOT_USER_EMAIL
  30 │           valueFrom:
  31 │             secretKeyRef:
  32 │               name: openobserve
  33 │               key: ZO_ROOT_USER_EMAIL
  34 └         - name: ZO_ROOT_USER_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'openobserve' of StatefulSet 'openobserve' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logs_1.yaml:26-59
────────────────────────────────────────
  26 ┌       - name: openobserve
  27 │         image: public.ecr.aws/zinclabs/openobserve:latest
  28 │         env:
  29 │         - name: ZO_ROOT_USER_EMAIL
  30 │           valueFrom:
  31 │             secretKeyRef:
  32 │               name: openobserve
  33 │               key: ZO_ROOT_USER_EMAIL
  34 └         - name: ZO_ROOT_USER_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logs_1.yaml:26-59
────────────────────────────────────────
  26 ┌       - name: openobserve
  27 │         image: public.ecr.aws/zinclabs/openobserve:latest
  28 │         env:
  29 │         - name: ZO_ROOT_USER_EMAIL
  30 │           valueFrom:
  31 │             secretKeyRef:
  32 │               name: openobserve
  33 │               key: ZO_ROOT_USER_EMAIL
  34 └         - name: ZO_ROOT_USER_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "openobserve" of statefulset "openobserve" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logs_1.yaml:26-59
────────────────────────────────────────
  26 ┌       - name: openobserve
  27 │         image: public.ecr.aws/zinclabs/openobserve:latest
  28 │         env:
  29 │         - name: ZO_ROOT_USER_EMAIL
  30 │           valueFrom:
  31 │             secretKeyRef:
  32 │               name: openobserve
  33 │               key: ZO_ROOT_USER_EMAIL
  34 └         - name: ZO_ROOT_USER_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logs_1.yaml:26-59
────────────────────────────────────────
  26 ┌       - name: openobserve
  27 │         image: public.ecr.aws/zinclabs/openobserve:latest
  28 │         env:
  29 │         - name: ZO_ROOT_USER_EMAIL
  30 │           valueFrom:
  31 │             secretKeyRef:
  32 │               name: openobserve
  33 │               key: ZO_ROOT_USER_EMAIL
  34 └         - name: ZO_ROOT_USER_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset openobserve in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 logs_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: openobserve
   5 │   labels:
   6 └     name: openobserve
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container openobserve in statefulset openobserve (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logs_1.yaml:26-59
────────────────────────────────────────
  26 ┌       - name: openobserve
  27 │         image: public.ecr.aws/zinclabs/openobserve:latest
  28 │         env:
  29 │         - name: ZO_ROOT_USER_EMAIL
  30 │           valueFrom:
  31 │             secretKeyRef:
  32 │               name: openobserve
  33 │               key: ZO_ROOT_USER_EMAIL
  34 └         - name: ZO_ROOT_USER_PASSWORD
  ..   
────────────────────────────────────────



logserver_deployment.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logserver' of Deployment 'logserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logserver' of Deployment 'logserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logserver' of 'deployment' 'logserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logserver' of Deployment 'logserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logserver' of Deployment 'logserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'logserver' of Deployment 'logserver' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logserver' of Deployment 'logserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logserver' of Deployment 'logserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logserver' of Deployment 'logserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logserver' of Deployment 'logserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logserver' of Deployment 'logserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logserver' of Deployment 'logserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logserver" of deployment "logserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment logserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 logserver_deployment.yaml:4
────────────────────────────────────────
   4 [   name: logserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logserver_deployment.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 │         - containerPort: 8081
  23 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logserver in deployment logserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logserver_deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────



logserver_deployment1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logserver' of Deployment 'logserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logserver' of Deployment 'logserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logserver' of 'deployment' 'logserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logserver' of Deployment 'logserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logserver' of Deployment 'logserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'logserver' of Deployment 'logserver' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logserver' of Deployment 'logserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logserver' of Deployment 'logserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logserver' of Deployment 'logserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logserver' of Deployment 'logserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logserver' of Deployment 'logserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logserver' of Deployment 'logserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logserver" of deployment "logserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment logserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 logserver_deployment1.yaml:4
────────────────────────────────────────
   4 [   name: logserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logserver_deployment1.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 │         - containerPort: 8081
  23 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logserver in deployment logserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logserver_deployment1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: logserver
  17 │         image: registry:5000/logserver:v3
  18 │         volumeMounts:
  19 │         - name: log-volume
  20 │           mountPath: /app/logs
  21 │         ports:
  22 └         - containerPort: 8081
────────────────────────────────────────



logstash-configmap2.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'logstash-configmap' in 'kube-system' namespace stores sensitive contents in key(s) or value(s) '{"        message_key "}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



logstash-deployment.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash-deployment' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'logstash-deployment' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment.yaml:7-38
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: logstash
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: logstash
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash-deployment" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash-deployment in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash-deployment in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 └           - name: logstash-pipeline-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash-deployment (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────



logstash-deployment1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash-deployment' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'logstash-deployment' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment1.yaml:7-38
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: logstash
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: logstash
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash-deployment" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash-deployment in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash-deployment in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment1.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 └           - name: logstash-pipeline-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash-deployment (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │           - name: config-volume
  23 │             mountPath: /usr/share/logstash/config
  24 │           - name: logstash-pipeline-volume
  25 └             mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────



logstash-deployment2.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash-deployment' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'logstash-deployment' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment2.yaml:7-38
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: logstash
  10 │   replicas: 1
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: logstash
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash-deployment" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash-deployment in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash-deployment in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment2.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 └             - name: logstash-pipeline-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash-deployment (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash-deployment2.yaml:17-25
────────────────────────────────────────
  17 ┌         - name: logstash
  18 │           image: docker.elastic.co/logstash/logstash:7.17.16
  19 │           ports:
  20 │             - containerPort: 5044
  21 │           volumeMounts:
  22 │             - name: config-volume
  23 │               mountPath: /usr/share/logstash/config
  24 │             - name: logstash-pipeline-volume
  25 └               mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────



logstash-deployment3_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash-deployment' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'logstash-deployment' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment3_1.yaml:7-38
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: logstash
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: logstash
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash-deployment" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash-deployment in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash-deployment in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment3_1.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 └         - name: logstash-pipeline-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash-deployment (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash-deployment3_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────



logstash-deployment3_2.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'logstash-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment3_2.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: logstash
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5044
  12 │     targetPort: 5044
  13 └   type: ClusterIP
────────────────────────────────────────



logstash-deployment4_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash-deployment' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'logstash-deployment' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment4_1.yaml:7-38
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: logstash
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: logstash
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash-deployment" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash-deployment in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash-deployment in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment4_1.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 └         - name: logstash-pipeline-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash-deployment (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash-deployment4_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────



logstash-deployment4_2.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'logstash-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment4_2.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: logstash
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5044
  12 │     targetPort: 5044
  13 └   type: ClusterIP
────────────────────────────────────────



logstash-deployment5_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash-deployment' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'logstash-deployment' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment5_1.yaml:7-38
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: logstash
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: logstash
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash-deployment" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash-deployment in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash-deployment in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment5_1.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 └         - name: logstash-pipeline-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash-deployment (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash-deployment5_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────



logstash-deployment5_2.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'logstash-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment5_2.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: logstash
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5044
  12 │     targetPort: 5044
  13 └   type: ClusterIP
────────────────────────────────────────



logstash-deployment6_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash-deployment' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'logstash-deployment' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment6_1.yaml:7-38
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: logstash
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: logstash
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash-deployment" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash-deployment in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash-deployment in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment6_1.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 └         - name: logstash-pipeline-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash-deployment (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash-deployment6_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────



logstash-deployment6_2.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'logstash-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment6_2.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: logstash
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5044
  12 │     targetPort: 5044
  13 └   type: ClusterIP
────────────────────────────────────────



logstash-deployment7_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash-deployment' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'logstash-deployment' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment7_1.yaml:7-38
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: logstash
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: logstash
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash-deployment" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash-deployment in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash-deployment in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment7_1.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 └         - name: logstash-pipeline-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash-deployment (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash-deployment7_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────



logstash-deployment7_2.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'logstash-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment7_2.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: logstash
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5044
  12 │     targetPort: 5044
  13 └   type: ClusterIP
────────────────────────────────────────



logstash-deployment8_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash-deployment' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'logstash-deployment' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment8_1.yaml:7-38
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: logstash
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: logstash
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash-deployment" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash-deployment in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash-deployment in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash-deployment8_1.yaml:16-38
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 └         - name: logstash-pipeline-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash-deployment (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash-deployment8_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         image: docker.elastic.co/logstash/logstash:6.3.0
  19 │         ports:
  20 │         - containerPort: 5044
  21 │         volumeMounts:
  22 │         - name: config-volume
  23 │           mountPath: /usr/share/logstash/config
  24 │         - name: logstash-pipeline-volume
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────



logstash-deployment8_2.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'logstash-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-deployment8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: logstash
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5044
  12 │     targetPort: 5044
  13 └   type: ClusterIP
────────────────────────────────────────



logstash-service.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'logstash-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-service.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: logstash
   9 │   ports:
  10 │     - protocol: TCP
  11 │       port: 5044
  12 └       targetPort: 5044
────────────────────────────────────────



logstash-svc.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'logstash-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-svc.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: logstash
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5044
  12 └     targetPort: 5044
────────────────────────────────────────



logstash-svc1.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'logstash-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 logstash-svc1.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: logstash
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5044
  12 └     targetPort: 5044
────────────────────────────────────────



logstash.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash' in 'logging' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash" in "logging" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash in logging namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash in logging namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash.yaml:15-53
────────────────────────────────────────
  15 ┌       hostname: logstash
  16 │       containers:
  17 │       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 └         - name: logstash-config
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash (namespace: logging) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────



logstash1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash' in 'logging' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash" in "logging" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash in logging namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash in logging namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash1.yaml:15-53
────────────────────────────────────────
  15 ┌       hostname: logstash
  16 │       containers:
  17 │       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 └         - name: logstash-config
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash (namespace: logging) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: logstash
  18 │         ports:
  19 │         - containerPort: 9600
  20 │           name: logstash
  21 │         image: docker.elastic.co/logstash/logstash:7.5.0
  22 │         volumeMounts:
  23 │         - name: logstash-config
  24 │           mountPath: /usr/share/logstash/pipeline/
  25 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────



logstash15_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment logstash in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 logstash15_1.yaml:4
────────────────────────────────────────
   4 [   name: logstash
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash15_1.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 │           mountPath: /usr/share/logstash/config
  21 │       volumes:
  22 │       - name: logstash-config
  23 │         configMap:
  24 └           name: logstash-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash15_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.17.0
  18 │         volumeMounts:
  19 │         - name: logstash-config
  20 └           mountPath: /usr/share/logstash/config
────────────────────────────────────────



logstash16.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash' in 'elastic' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash" in "elastic" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash in elastic namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash in elastic namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash16.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 └           mountPath: /usr/share/logstash/pipeline/logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash (namespace: elastic) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash16.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
  ..   
────────────────────────────────────────



logstash17.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash' in 'elastic' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash" in "elastic" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash in elastic namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash in elastic namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash17.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 └           mountPath: /usr/share/logstash/pipeline/logstash.conf
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash (namespace: elastic) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash17.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         image: docker.elastic.co/logstash/logstash:7.15.0
  18 │         ports:
  19 │         - containerPort: 5044
  20 │           name: logstash
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/logstash.conf
  24 └           subPath: logstash.conf
────────────────────────────────────────



logstash19.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'logstash' of Deployment 'logstash' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment logstash in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 logstash19.yaml:4-6
────────────────────────────────────────
   4 ┌   name: logstash
   5 │   labels:
   6 └     component: logstash
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash19.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 └           mountPath: /usr/share/logstash/pipeline
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash19.yaml:18-29
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: logstash
  20 │         image: logstash:7.16.3
  21 │         ports:
  22 │         - containerPort: 5044
  23 │         volumeMounts:
  24 │         - name: logstash-config
  25 │           mountPath: /usr/share/logstash/pipeline
  26 └       volumes:
  ..   
────────────────────────────────────────



logstash3.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'logstash-configmap' in 'elastic-stack' namespace stores secrets in key(s) or value(s) '{"    password "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



logstash3_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash3_1.yaml:16-46
────────────────────────────────────────
  16 ┌       - image: docker.elastic.co/logstash/logstash:7.17.9
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: logstash
  19 │         ports:
  20 │         - containerPort: 25826
  21 │         - containerPort: 5044
  22 │         env:
  23 │         - name: ES_HOSTS
  24 └           value: http://elasticsearch.elastic-stack:9200
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash3_1.yaml:16-46
────────────────────────────────────────
  16 ┌       - image: docker.elastic.co/logstash/logstash:7.17.9
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: logstash
  19 │         ports:
  20 │         - containerPort: 25826
  21 │         - containerPort: 5044
  22 │         env:
  23 │         - name: ES_HOSTS
  24 └           value: http://elasticsearch.elastic-stack:9200
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash' in 'elastic-stack' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash3_1.yaml:16-46
────────────────────────────────────────
  16 ┌       - image: docker.elastic.co/logstash/logstash:7.17.9
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: logstash
  19 │         ports:
  20 │         - containerPort: 25826
  21 │         - containerPort: 5044
  22 │         env:
  23 │         - name: ES_HOSTS
  24 └           value: http://elasticsearch.elastic-stack:9200
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash3_1.yaml:16-46
────────────────────────────────────────
  16 ┌       - image: docker.elastic.co/logstash/logstash:7.17.9
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: logstash
  19 │         ports:
  20 │         - containerPort: 25826
  21 │         - containerPort: 5044
  22 │         env:
  23 │         - name: ES_HOSTS
  24 └           value: http://elasticsearch.elastic-stack:9200
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash3_1.yaml:16-46
────────────────────────────────────────
  16 ┌       - image: docker.elastic.co/logstash/logstash:7.17.9
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: logstash
  19 │         ports:
  20 │         - containerPort: 25826
  21 │         - containerPort: 5044
  22 │         env:
  23 │         - name: ES_HOSTS
  24 └           value: http://elasticsearch.elastic-stack:9200
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash3_1.yaml:16-46
────────────────────────────────────────
  16 ┌       - image: docker.elastic.co/logstash/logstash:7.17.9
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: logstash
  19 │         ports:
  20 │         - containerPort: 25826
  21 │         - containerPort: 5044
  22 │         env:
  23 │         - name: ES_HOSTS
  24 └           value: http://elasticsearch.elastic-stack:9200
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash3_1.yaml:16-46
────────────────────────────────────────
  16 ┌       - image: docker.elastic.co/logstash/logstash:7.17.9
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: logstash
  19 │         ports:
  20 │         - containerPort: 25826
  21 │         - containerPort: 5044
  22 │         env:
  23 │         - name: ES_HOSTS
  24 └           value: http://elasticsearch.elastic-stack:9200
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash3_1.yaml:16-46
────────────────────────────────────────
  16 ┌       - image: docker.elastic.co/logstash/logstash:7.17.9
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: logstash
  19 │         ports:
  20 │         - containerPort: 25826
  21 │         - containerPort: 5044
  22 │         env:
  23 │         - name: ES_HOSTS
  24 └           value: http://elasticsearch.elastic-stack:9200
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash" in "elastic-stack" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash3_1.yaml:16-46
────────────────────────────────────────
  16 ┌       - image: docker.elastic.co/logstash/logstash:7.17.9
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: logstash
  19 │         ports:
  20 │         - containerPort: 25826
  21 │         - containerPort: 5044
  22 │         env:
  23 │         - name: ES_HOSTS
  24 └           value: http://elasticsearch.elastic-stack:9200
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash3_1.yaml:16-46
────────────────────────────────────────
  16 ┌       - image: docker.elastic.co/logstash/logstash:7.17.9
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: logstash
  19 │         ports:
  20 │         - containerPort: 25826
  21 │         - containerPort: 5044
  22 │         env:
  23 │         - name: ES_HOSTS
  24 └           value: http://elasticsearch.elastic-stack:9200
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash in elastic-stack namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash3_1.yaml:16-46
────────────────────────────────────────
  16 ┌       - image: docker.elastic.co/logstash/logstash:7.17.9
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: logstash
  19 │         ports:
  20 │         - containerPort: 25826
  21 │         - containerPort: 5044
  22 │         env:
  23 │         - name: ES_HOSTS
  24 └           value: http://elasticsearch.elastic-stack:9200
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash in elastic-stack namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash3_1.yaml:15-59
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: docker.elastic.co/logstash/logstash:7.17.9
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: logstash
  19 │         ports:
  20 │         - containerPort: 25826
  21 │         - containerPort: 5044
  22 │         env:
  23 └         - name: ES_HOSTS
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash (namespace: elastic-stack) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash3_1.yaml:16-46
────────────────────────────────────────
  16 ┌       - image: docker.elastic.co/logstash/logstash:7.17.9
  17 │         imagePullPolicy: IfNotPresent
  18 │         name: logstash
  19 │         ports:
  20 │         - containerPort: 25826
  21 │         - containerPort: 5044
  22 │         env:
  23 │         - name: ES_HOSTS
  24 └           value: http://elasticsearch.elastic-stack:9200
  ..   
────────────────────────────────────────



logstash4_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 logstash4_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         ports:
  18 │         - containerPort: 9600
  19 │           name: logstash
  20 │         image: docker.elastic.co/logstash/logstash:7.5.0
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/
  24 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'logstash' of Deployment 'logstash' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 logstash4_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         ports:
  18 │         - containerPort: 9600
  19 │           name: logstash
  20 │         image: docker.elastic.co/logstash/logstash:7.5.0
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/
  24 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'logstash' of 'deployment' 'logstash' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 logstash4_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         ports:
  18 │         - containerPort: 9600
  19 │           name: logstash
  20 │         image: docker.elastic.co/logstash/logstash:7.5.0
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/
  24 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 logstash4_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         ports:
  18 │         - containerPort: 9600
  19 │           name: logstash
  20 │         image: docker.elastic.co/logstash/logstash:7.5.0
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/
  24 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'logstash' of Deployment 'logstash' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 logstash4_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         ports:
  18 │         - containerPort: 9600
  19 │           name: logstash
  20 │         image: docker.elastic.co/logstash/logstash:7.5.0
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/
  24 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 logstash4_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         ports:
  18 │         - containerPort: 9600
  19 │           name: logstash
  20 │         image: docker.elastic.co/logstash/logstash:7.5.0
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/
  24 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'logstash' of Deployment 'logstash' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 logstash4_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         ports:
  18 │         - containerPort: 9600
  19 │           name: logstash
  20 │         image: docker.elastic.co/logstash/logstash:7.5.0
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/
  24 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 logstash4_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         ports:
  18 │         - containerPort: 9600
  19 │           name: logstash
  20 │         image: docker.elastic.co/logstash/logstash:7.5.0
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/
  24 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "logstash" of deployment "logstash" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 logstash4_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         ports:
  18 │         - containerPort: 9600
  19 │           name: logstash
  20 │         image: docker.elastic.co/logstash/logstash:7.5.0
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/
  24 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 logstash4_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         ports:
  18 │         - containerPort: 9600
  19 │           name: logstash
  20 │         image: docker.elastic.co/logstash/logstash:7.5.0
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/
  24 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment logstash in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 logstash4_1.yaml:4
────────────────────────────────────────
   4 [   name: logstash
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container logstash in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash4_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         ports:
  18 │         - containerPort: 9600
  19 │           name: logstash
  20 │         image: docker.elastic.co/logstash/logstash:7.5.0
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/
  24 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment logstash in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 logstash4_1.yaml:14-52
────────────────────────────────────────
  14 ┌       hostname: logstash
  15 │       containers:
  16 │       - name: logstash
  17 │         ports:
  18 │         - containerPort: 9600
  19 │           name: logstash
  20 │         image: docker.elastic.co/logstash/logstash:7.5.0
  21 │         volumeMounts:
  22 └         - name: logstash-config
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container logstash in deployment logstash (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 logstash4_1.yaml:16-42
────────────────────────────────────────
  16 ┌       - name: logstash
  17 │         ports:
  18 │         - containerPort: 9600
  19 │           name: logstash
  20 │         image: docker.elastic.co/logstash/logstash:7.5.0
  21 │         volumeMounts:
  22 │         - name: logstash-config
  23 │           mountPath: /usr/share/logstash/pipeline/
  24 └         - name: logstash-persistent-storage
  ..   
────────────────────────────────────────



loki-deployment.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'loki' of Deployment 'loki-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'loki' of Deployment 'loki-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'loki' of 'deployment' 'loki-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'loki' of Deployment 'loki-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'loki' of Deployment 'loki-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'loki' of Deployment 'loki-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of Deployment 'loki-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of Deployment 'loki-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of Deployment 'loki-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'loki' of Deployment 'loki-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'loki' of Deployment 'loki-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of deployment "loki-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loki-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loki-deployment.yaml:4
────────────────────────────────────────
   4 [   name: loki-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loki-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment loki-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in deployment loki-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki-deployment.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki:2.0.0
  18 │         ports:
  19 │         - containerPort: 3100
  20 │         args:
  21 │         - -config.file=/etc/loki/local-config.yaml
  22 │         volumeMounts:
  23 │         - name: loki-config-volume
  24 └           mountPath: /etc/loki/
────────────────────────────────────────



loki-deployment1.yaml (kubernetes)
==================================
Tests: 146 (SUCCESSES: 97, FAILURES: 49)
Failures: 49 (UNKNOWN: 0, LOW: 30, MEDIUM: 12, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'loki' of Deployment 'loki' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'promtail' of Deployment 'loki' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'setup-loki-directories' of Deployment 'loki' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'loki' of Deployment 'loki' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'promtail' of Deployment 'loki' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'setup-loki-directories' of Deployment 'loki' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'loki' of 'deployment' 'loki' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'promtail' of 'deployment' 'loki' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'setup-loki-directories' of 'deployment' 'loki' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'promtail' of Deployment 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'setup-loki-directories' of Deployment 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'promtail' of Deployment 'loki' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'setup-loki-directories' of Deployment 'loki' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'setup-loki-directories' of Deployment 'loki' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'loki' of Deployment 'loki' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'promtail' of Deployment 'loki' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'setup-loki-directories' of Deployment 'loki' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'promtail' of Deployment 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'setup-loki-directories' of Deployment 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'promtail' of Deployment 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'setup-loki-directories' of Deployment 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'promtail' of Deployment 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'setup-loki-directories' of Deployment 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'promtail' of Deployment 'loki' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'setup-loki-directories' of Deployment 'loki' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'promtail' of Deployment 'loki' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'setup-loki-directories' of Deployment 'loki' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of deployment "loki" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "promtail" of deployment "loki" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "setup-loki-directories" of deployment "loki" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loki in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loki in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loki in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki-deployment1.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 │             ]
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment loki in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki-deployment1.yaml:16-54
────────────────────────────────────────
  16 ┌       initContainers:
  17 │         - name: setup-loki-directories
  18 │           image: busybox
  19 │           command:
  20 │             [
  21 │               "sh",
  22 │               "-c",
  23 │               "mkdir -p /data/loki/index /data/loki/cache /data/loki/chunks /data/loki/wal /data/loki/compactor && chmod -R 777 /data/loki",
  24 └             ]
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in deployment loki (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki-deployment1.yaml:29-39
────────────────────────────────────────
  29 ┌         - name: loki
  30 │           image: grafana/loki:2.9.1
  31 │           args:
  32 │             - "-config.file=/etc/loki/loki.yaml"
  33 │           ports:
  34 │             - containerPort: 3100
  35 │           volumeMounts:
  36 │             - name: loki-config
  37 └               mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container promtail in deployment loki (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki-deployment1.yaml:40-48
────────────────────────────────────────
  40 ┌         - name: promtail
  41 │           image: grafana/promtail:2.9.1
  42 │           args:
  43 │             - "-config.file=/etc/promtail/promtail.yaml"
  44 │           volumeMounts:
  45 │             - name: loki-config
  46 │               mountPath: /etc/promtail
  47 │             - name: loki-storage
  48 └               mountPath: /var/log
────────────────────────────────────────



loki-statefulset.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'loki' of StatefulSet 'loki' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 loki-statefulset.yaml:45-81
────────────────────────────────────────
  45 ┌         - name: loki
  46 │           image: "grafana/loki:2.6.1"
  47 │           imagePullPolicy: IfNotPresent
  48 │           args:
  49 │             - "-config.file=/etc/loki/loki.yaml"
  50 │           volumeMounts:
  51 │             - name: tmp
  52 │               mountPath: /tmp
  53 └             - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'loki' of StatefulSet 'loki' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 loki-statefulset.yaml:45-81
────────────────────────────────────────
  45 ┌         - name: loki
  46 │           image: "grafana/loki:2.6.1"
  47 │           imagePullPolicy: IfNotPresent
  48 │           args:
  49 │             - "-config.file=/etc/loki/loki.yaml"
  50 │           volumeMounts:
  51 │             - name: tmp
  52 │               mountPath: /tmp
  53 └             - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'loki' of 'statefulset' 'loki' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 loki-statefulset.yaml:45-81
────────────────────────────────────────
  45 ┌         - name: loki
  46 │           image: "grafana/loki:2.6.1"
  47 │           imagePullPolicy: IfNotPresent
  48 │           args:
  49 │             - "-config.file=/etc/loki/loki.yaml"
  50 │           volumeMounts:
  51 │             - name: tmp
  52 │               mountPath: /tmp
  53 └             - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki-statefulset.yaml:45-81
────────────────────────────────────────
  45 ┌         - name: loki
  46 │           image: "grafana/loki:2.6.1"
  47 │           imagePullPolicy: IfNotPresent
  48 │           args:
  49 │             - "-config.file=/etc/loki/loki.yaml"
  50 │           volumeMounts:
  51 │             - name: tmp
  52 │               mountPath: /tmp
  53 └             - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki-statefulset.yaml:45-81
────────────────────────────────────────
  45 ┌         - name: loki
  46 │           image: "grafana/loki:2.6.1"
  47 │           imagePullPolicy: IfNotPresent
  48 │           args:
  49 │             - "-config.file=/etc/loki/loki.yaml"
  50 │           volumeMounts:
  51 │             - name: tmp
  52 │               mountPath: /tmp
  53 └             - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki-statefulset.yaml:45-81
────────────────────────────────────────
  45 ┌         - name: loki
  46 │           image: "grafana/loki:2.6.1"
  47 │           imagePullPolicy: IfNotPresent
  48 │           args:
  49 │             - "-config.file=/etc/loki/loki.yaml"
  50 │           volumeMounts:
  51 │             - name: tmp
  52 │               mountPath: /tmp
  53 └             - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki-statefulset.yaml:45-81
────────────────────────────────────────
  45 ┌         - name: loki
  46 │           image: "grafana/loki:2.6.1"
  47 │           imagePullPolicy: IfNotPresent
  48 │           args:
  49 │             - "-config.file=/etc/loki/loki.yaml"
  50 │           volumeMounts:
  51 │             - name: tmp
  52 │               mountPath: /tmp
  53 └             - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki-statefulset.yaml:45-81
────────────────────────────────────────
  45 ┌         - name: loki
  46 │           image: "grafana/loki:2.6.1"
  47 │           imagePullPolicy: IfNotPresent
  48 │           args:
  49 │             - "-config.file=/etc/loki/loki.yaml"
  50 │           volumeMounts:
  51 │             - name: tmp
  52 │               mountPath: /tmp
  53 └             - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of statefulset "loki" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki-statefulset.yaml:45-81
────────────────────────────────────────
  45 ┌         - name: loki
  46 │           image: "grafana/loki:2.6.1"
  47 │           imagePullPolicy: IfNotPresent
  48 │           args:
  49 │             - "-config.file=/etc/loki/loki.yaml"
  50 │           volumeMounts:
  51 │             - name: tmp
  52 │               mountPath: /tmp
  53 └             - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 loki-statefulset.yaml:45-81
────────────────────────────────────────
  45 ┌         - name: loki
  46 │           image: "grafana/loki:2.6.1"
  47 │           imagePullPolicy: IfNotPresent
  48 │           args:
  49 │             - "-config.file=/etc/loki/loki.yaml"
  50 │           volumeMounts:
  51 │             - name: tmp
  52 │               mountPath: /tmp
  53 └             - name: config
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in statefulset loki (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki-statefulset.yaml:45-81
────────────────────────────────────────
  45 ┌         - name: loki
  46 │           image: "grafana/loki:2.6.1"
  47 │           imagePullPolicy: IfNotPresent
  48 │           args:
  49 │             - "-config.file=/etc/loki/loki.yaml"
  50 │           volumeMounts:
  51 │             - name: tmp
  52 │               mountPath: /tmp
  53 └             - name: config
  ..   
────────────────────────────────────────



loki12_6.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki12_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki12_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki12_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki12_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki12_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of statefulset "loki" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki12_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset loki in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loki12_6.yaml:4-12
────────────────────────────────────────
   4 ┌   name: loki
   5 │   labels:
   6 │     helm.sh/chart: loki-4.8.0
   7 │     app.kubernetes.io/name: loki
   8 │     app.kubernetes.io/instance: loki
   9 │     app.kubernetes.io/version: 2.7.3
  10 │     app.kubernetes.io/managed-by: Helm
  11 │     app.kubernetes.io/component: single-binary
  12 └     app.kubernetes.io/part-of: memberlist
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in statefulset loki (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki12_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────



loki13_1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'loki' of Deployment 'loki' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'loki' of Deployment 'loki' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'loki' of 'deployment' 'loki' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'loki' of Deployment 'loki' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'loki' of Deployment 'loki' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of deployment "loki" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loki in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loki13_1.yaml:4
────────────────────────────────────────
   4 [   name: loki
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loki in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment loki in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki13_1.yaml:14-22
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 │           mountPath: /tmp/loki
  20 │       volumes:
  21 │       - name: loki-data
  22 └         emptyDir: {}
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in deployment loki (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki13_1.yaml:15-19
────────────────────────────────────────
  15 ┌       - name: loki
  16 │         image: grafana/loki:latest
  17 │         volumeMounts:
  18 │         - name: loki-data
  19 └           mountPath: /tmp/loki
────────────────────────────────────────



loki14.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'loki' of Deployment 'loki' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'loki' of Deployment 'loki' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'loki' of 'deployment' 'loki' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'loki' of Deployment 'loki' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'loki' of Deployment 'loki' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of deployment "loki" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loki in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loki14.yaml:4
────────────────────────────────────────
   4 [   name: loki
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loki in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment loki in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki14.yaml:15-36
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 └         - mountPath: /etc/loki
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in deployment loki (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki14.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: loki
  17 │         image: grafana/loki
  18 │         args:
  19 │         - -config.file=/etc/loki/loki-config.yaml
  20 │         volumeMounts:
  21 │         - mountPath: /var/log
  22 │           name: log-pv-storage
  23 │         - mountPath: /etc/loki
  24 └           name: config-volume
  ..   
────────────────────────────────────────



loki16_2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'loki' of Deployment 'loki' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'loki' of Deployment 'loki' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'loki' of 'deployment' 'loki' in 'obs' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'loki' of Deployment 'loki' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'loki' of Deployment 'loki' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'loki' of Deployment 'loki' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of deployment "loki" in "obs" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loki in obs namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment loki in obs namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki16_2.yaml:20-48
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 └         - name: JAEGER_SAMPLER_PARAM
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in deployment loki (namespace: obs) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki16_2.yaml:21-42
────────────────────────────────────────
  21 ┌       - args:
  22 │         - -config.file=/etc/loki-local-config.yaml
  23 │         env:
  24 │         - name: JAEGER_AGENT_HOST
  25 │           value: tempo
  26 │         - name: JAEGER_ENDPOINT
  27 │           value: http://tempo:14268/api/traces
  28 │         - name: JAEGER_SAMPLER_PARAM
  29 └           value: '1'
  ..   
────────────────────────────────────────



loki17_6.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki17_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki17_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki17_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki17_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki17_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of statefulset "loki" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki17_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset loki in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loki17_6.yaml:4-12
────────────────────────────────────────
   4 ┌   name: loki
   5 │   labels:
   6 │     helm.sh/chart: loki-4.8.0
   7 │     app.kubernetes.io/name: loki
   8 │     app.kubernetes.io/instance: loki
   9 │     app.kubernetes.io/version: 2.7.3
  10 │     app.kubernetes.io/managed-by: Helm
  11 │     app.kubernetes.io/component: single-binary
  12 └     app.kubernetes.io/part-of: memberlist
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in statefulset loki (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki17_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────



loki18_6.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki18_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki18_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki18_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki18_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki18_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of statefulset "loki" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki18_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset loki in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loki18_6.yaml:4-12
────────────────────────────────────────
   4 ┌   name: loki
   5 │   labels:
   6 │     helm.sh/chart: loki-4.8.0
   7 │     app.kubernetes.io/name: loki
   8 │     app.kubernetes.io/instance: loki
   9 │     app.kubernetes.io/version: 2.7.3
  10 │     app.kubernetes.io/managed-by: Helm
  11 │     app.kubernetes.io/component: single-binary
  12 └     app.kubernetes.io/part-of: memberlist
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in statefulset loki (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki18_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────



loki20_6.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki20_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki20_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki20_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki20_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki20_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of statefulset "loki" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki20_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset loki in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loki20_6.yaml:4-12
────────────────────────────────────────
   4 ┌   name: loki
   5 │   labels:
   6 │     helm.sh/chart: loki-4.8.0
   7 │     app.kubernetes.io/name: loki
   8 │     app.kubernetes.io/instance: loki
   9 │     app.kubernetes.io/version: 2.7.3
  10 │     app.kubernetes.io/managed-by: Helm
  11 │     app.kubernetes.io/component: single-binary
  12 └     app.kubernetes.io/part-of: memberlist
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in statefulset loki (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki20_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────



loki21.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'loki' of Deployment 'loki' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'loki' of Deployment 'loki' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'loki' of 'deployment' 'loki' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'loki' of Deployment 'loki' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of Deployment 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'loki' of Deployment 'loki' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of deployment "loki" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment loki in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loki21.yaml:4-6
────────────────────────────────────────
   4 ┌   name: loki
   5 │   labels:
   6 └     app: loki
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container loki in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment loki in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 loki21.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in deployment loki (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki21.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: loki
  19 │         image: grafana/loki:2.9.4
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 3100
────────────────────────────────────────



loki22_6.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki22_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki22_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki22_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki22_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki22_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of statefulset "loki" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki22_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset loki in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loki22_6.yaml:4-12
────────────────────────────────────────
   4 ┌   name: loki
   5 │   labels:
   6 │     helm.sh/chart: loki-4.8.0
   7 │     app.kubernetes.io/name: loki
   8 │     app.kubernetes.io/instance: loki
   9 │     app.kubernetes.io/version: 2.7.3
  10 │     app.kubernetes.io/managed-by: Helm
  11 │     app.kubernetes.io/component: single-binary
  12 └     app.kubernetes.io/part-of: memberlist
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in statefulset loki (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki22_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────



loki23_6.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki23_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki23_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki23_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki23_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki23_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of statefulset "loki" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki23_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset loki in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loki23_6.yaml:4-12
────────────────────────────────────────
   4 ┌   name: loki
   5 │   labels:
   6 │     helm.sh/chart: loki-4.8.0
   7 │     app.kubernetes.io/name: loki
   8 │     app.kubernetes.io/instance: loki
   9 │     app.kubernetes.io/version: 2.7.3
  10 │     app.kubernetes.io/managed-by: Helm
  11 │     app.kubernetes.io/component: single-binary
  12 └     app.kubernetes.io/part-of: memberlist
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in statefulset loki (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki23_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────



loki26_6.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki26_6.yaml:50-87
────────────────────────────────────────
  50 ┌       - name: loki
  51 │         image: docker.io/grafana/loki:3.0.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - -config.file=/etc/loki/config/config.yaml
  55 │         - -target=all
  56 │         ports:
  57 │         - name: http-metrics
  58 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki26_6.yaml:50-87
────────────────────────────────────────
  50 ┌       - name: loki
  51 │         image: docker.io/grafana/loki:3.0.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - -config.file=/etc/loki/config/config.yaml
  55 │         - -target=all
  56 │         ports:
  57 │         - name: http-metrics
  58 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki26_6.yaml:50-87
────────────────────────────────────────
  50 ┌       - name: loki
  51 │         image: docker.io/grafana/loki:3.0.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - -config.file=/etc/loki/config/config.yaml
  55 │         - -target=all
  56 │         ports:
  57 │         - name: http-metrics
  58 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki26_6.yaml:50-87
────────────────────────────────────────
  50 ┌       - name: loki
  51 │         image: docker.io/grafana/loki:3.0.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - -config.file=/etc/loki/config/config.yaml
  55 │         - -target=all
  56 │         ports:
  57 │         - name: http-metrics
  58 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki26_6.yaml:50-87
────────────────────────────────────────
  50 ┌       - name: loki
  51 │         image: docker.io/grafana/loki:3.0.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - -config.file=/etc/loki/config/config.yaml
  55 │         - -target=all
  56 │         ports:
  57 │         - name: http-metrics
  58 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of statefulset "loki" in "istio-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki26_6.yaml:50-87
────────────────────────────────────────
  50 ┌       - name: loki
  51 │         image: docker.io/grafana/loki:3.0.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - -config.file=/etc/loki/config/config.yaml
  55 │         - -target=all
  56 │         ports:
  57 │         - name: http-metrics
  58 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in statefulset loki (namespace: istio-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki26_6.yaml:50-87
────────────────────────────────────────
  50 ┌       - name: loki
  51 │         image: docker.io/grafana/loki:3.0.0
  52 │         imagePullPolicy: IfNotPresent
  53 │         args:
  54 │         - -config.file=/etc/loki/config/config.yaml
  55 │         - -target=all
  56 │         ports:
  57 │         - name: http-metrics
  58 └           containerPort: 3100
  ..   
────────────────────────────────────────



loki27_6.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki27_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki27_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki27_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki27_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki27_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of statefulset "loki" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki27_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset loki in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loki27_6.yaml:4-12
────────────────────────────────────────
   4 ┌   name: loki
   5 │   labels:
   6 │     helm.sh/chart: loki-4.8.0
   7 │     app.kubernetes.io/name: loki
   8 │     app.kubernetes.io/instance: loki
   9 │     app.kubernetes.io/version: 2.7.3
  10 │     app.kubernetes.io/managed-by: Helm
  11 │     app.kubernetes.io/component: single-binary
  12 └     app.kubernetes.io/part-of: memberlist
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in statefulset loki (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki27_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────



loki7_6.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 loki7_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 loki7_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 loki7_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loki' of StatefulSet 'loki' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 loki7_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 loki7_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loki" of statefulset "loki" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 loki7_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset loki in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 loki7_6.yaml:4-12
────────────────────────────────────────
   4 ┌   name: loki
   5 │   labels:
   6 │     helm.sh/chart: loki-4.8.0
   7 │     app.kubernetes.io/name: loki
   8 │     app.kubernetes.io/instance: loki
   9 │     app.kubernetes.io/version: 2.7.3
  10 │     app.kubernetes.io/managed-by: Helm
  11 │     app.kubernetes.io/component: single-binary
  12 └     app.kubernetes.io/part-of: memberlist
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container loki in statefulset loki (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 loki7_6.yaml:49-86
────────────────────────────────────────
  49 ┌       - name: loki
  50 │         image: docker.io/grafana/loki:2.7.3
  51 │         imagePullPolicy: IfNotPresent
  52 │         args:
  53 │         - -config.file=/etc/loki/config/config.yaml
  54 │         - -target=all
  55 │         ports:
  56 │         - name: http-metrics
  57 └           containerPort: 3100
  ..   
────────────────────────────────────────



long-log-pod.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'network-connector' of Pod 'network-connector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'network-connector' of Pod 'network-connector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'network-connector' of 'pod' 'network-connector' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'network-connector' of Pod 'network-connector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'network-connector' of Pod 'network-connector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'network-connector' of Pod 'network-connector' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'network-connector' of Pod 'network-connector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'network-connector' of Pod 'network-connector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'network-connector' of Pod 'network-connector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'network-connector' of Pod 'network-connector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'network-connector' of Pod 'network-connector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'network-connector' of Pod 'network-connector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "network-connector" of pod "network-connector" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod network-connector in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 long-log-pod.yaml:4
────────────────────────────────────────
   4 [   name: network-connector
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container network-connector in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 long-log-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod network-connector in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 long-log-pod.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────



long-log-pod1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'network-connector' of Pod 'network-connector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'network-connector' of Pod 'network-connector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'network-connector' of 'pod' 'network-connector' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'network-connector' of Pod 'network-connector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'network-connector' of Pod 'network-connector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'network-connector' of Pod 'network-connector' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'network-connector' of Pod 'network-connector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'network-connector' of Pod 'network-connector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'network-connector' of Pod 'network-connector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'network-connector' of Pod 'network-connector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'network-connector' of Pod 'network-connector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'network-connector' of Pod 'network-connector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "network-connector" of pod "network-connector" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod network-connector in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 long-log-pod1.yaml:4
────────────────────────────────────────
   4 [   name: network-connector
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container network-connector in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 long-log-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod network-connector in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 long-log-pod1.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: network-connector
   8 │     image: busybox
   9 │     command: ["/bin/sh", "-c"]
  10 │     args:
  11 └       - |
────────────────────────────────────────



longhorn-v1.5.1_26.yaml (kubernetes)
====================================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn-v1.5.1_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn-v1.5.1_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn-v1.5.1_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn-v1.5.1_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn-v1.5.1_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn-v1.5.1_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn-v1.5.1_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn-v1.5.1_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn-v1.5.1_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn-v1.5.1_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn-v1.5.1_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn-v1.5.1_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn-v1.5.1_26.yaml:156-166
────────────────────────────────────────
 156 ┌ - apiGroups:
 157 │   - admissionregistration.k8s.io
 158 │   resources:
 159 │   - mutatingwebhookconfigurations
 160 │   - validatingwebhookconfigurations
 161 │   verbs:
 162 │   - get
 163 │   - list
 164 └   - create
 ...   
────────────────────────────────────────



longhorn-v1.5.1_28.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn-v1.5.1_28.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.5.1
────────────────────────────────────────



longhorn-v1.5.1_36.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-manager' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'longhorn-manager' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:12-101
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       app: longhorn-manager
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/name: longhorn
  19 │         app.kubernetes.io/instance: longhorn
  20 └         app.kubernetes.io/version: v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-manager" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset longhorn-manager in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:23-98
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 └         - -d
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-manager in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn-v1.5.1_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────



longhorn-v1.5.1_37.yaml (kubernetes)
====================================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-driver-deployer' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-manager' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-driver-deployer" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-manager" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:70
────────────────────────────────────────
  70 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-driver-deployer in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-manager in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn-v1.5.1_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────



longhorn-v1.5.1_38.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-ui' of 'deployment' 'longhorn-ui' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-ui" of deployment "longhorn-ui" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-ui in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-ui in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:24-61
────────────────────────────────────────
  24 ┌       affinity:
  25 │         podAntiAffinity:
  26 │           preferredDuringSchedulingIgnoredDuringExecution:
  27 │           - weight: 1
  28 │             podAffinityTerm:
  29 │               labelSelector:
  30 │                 matchExpressions:
  31 │                 - key: app
  32 └                   operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-ui in deployment longhorn-ui (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn-v1.5.1_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────



longhorn-v1.5.2_26.yaml (kubernetes)
====================================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn-v1.5.2_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn-v1.5.2_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn-v1.5.2_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn-v1.5.2_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn-v1.5.2_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn-v1.5.2_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn-v1.5.2_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn-v1.5.2_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn-v1.5.2_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn-v1.5.2_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn-v1.5.2_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn-v1.5.2_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn-v1.5.2_26.yaml:156-166
────────────────────────────────────────
 156 ┌ - apiGroups:
 157 │   - admissionregistration.k8s.io
 158 │   resources:
 159 │   - mutatingwebhookconfigurations
 160 │   - validatingwebhookconfigurations
 161 │   verbs:
 162 │   - get
 163 │   - list
 164 └   - create
 ...   
────────────────────────────────────────



longhorn-v1.5.2_28.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn-v1.5.2_28.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.5.2
────────────────────────────────────────



longhorn-v1.5.2_36.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-manager' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'longhorn-manager' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:12-101
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       app: longhorn-manager
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/name: longhorn
  19 │         app.kubernetes.io/instance: longhorn
  20 └         app.kubernetes.io/version: v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-manager" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset longhorn-manager in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:23-98
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 └         - -d
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-manager in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn-v1.5.2_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────



longhorn-v1.5.2_37.yaml (kubernetes)
====================================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-driver-deployer' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-manager' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-driver-deployer" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-manager" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:70
────────────────────────────────────────
  70 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-driver-deployer in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.2
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.2
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-manager in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn-v1.5.2_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.2
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────



longhorn-v1.5.2_38.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-ui' of 'deployment' 'longhorn-ui' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-ui" of deployment "longhorn-ui" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-ui in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-ui in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:24-61
────────────────────────────────────────
  24 ┌       affinity:
  25 │         podAntiAffinity:
  26 │           preferredDuringSchedulingIgnoredDuringExecution:
  27 │           - weight: 1
  28 │             podAffinityTerm:
  29 │               labelSelector:
  30 │                 matchExpressions:
  31 │                 - key: app
  32 └                   operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-ui in deployment longhorn-ui (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn-v1.5.2_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.2
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────



longhorn-v1.5.3_26.yaml (kubernetes)
====================================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn-v1.5.3_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn-v1.5.3_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn-v1.5.3_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn-v1.5.3_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn-v1.5.3_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn-v1.5.3_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn-v1.5.3_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn-v1.5.3_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn-v1.5.3_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn-v1.5.3_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn-v1.5.3_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn-v1.5.3_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn-v1.5.3_26.yaml:156-166
────────────────────────────────────────
 156 ┌ - apiGroups:
 157 │   - admissionregistration.k8s.io
 158 │   resources:
 159 │   - mutatingwebhookconfigurations
 160 │   - validatingwebhookconfigurations
 161 │   verbs:
 162 │   - get
 163 │   - list
 164 └   - create
 ...   
────────────────────────────────────────



longhorn-v1.5.3_28.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn-v1.5.3_28.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.5.3
────────────────────────────────────────



longhorn-v1.5.3_36.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-manager' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'longhorn-manager' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:12-101
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       app: longhorn-manager
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/name: longhorn
  19 │         app.kubernetes.io/instance: longhorn
  20 └         app.kubernetes.io/version: v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-manager" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset longhorn-manager in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:23-98
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 └         - -d
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-manager in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn-v1.5.3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────



longhorn-v1.5.3_37.yaml (kubernetes)
====================================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-driver-deployer' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-manager' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-driver-deployer" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-manager" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:70
────────────────────────────────────────
  70 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-driver-deployer in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.3
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-manager in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn-v1.5.3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.3
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────



longhorn-v1.5.3_38.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-ui' of 'deployment' 'longhorn-ui' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-ui" of deployment "longhorn-ui" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-ui in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-ui in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:24-61
────────────────────────────────────────
  24 ┌       affinity:
  25 │         podAntiAffinity:
  26 │           preferredDuringSchedulingIgnoredDuringExecution:
  27 │           - weight: 1
  28 │             podAffinityTerm:
  29 │               labelSelector:
  30 │                 matchExpressions:
  31 │                 - key: app
  32 └                   operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-ui in deployment longhorn-ui (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn-v1.5.3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.3
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────



longhorn10_26.yaml (kubernetes)
===============================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn10_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn10_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn10_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn10_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn10_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn10_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn10_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn10_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn10_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn10_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn10_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn10_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn10_26.yaml:156-166
────────────────────────────────────────
 156 ┌ - apiGroups:
 157 │   - admissionregistration.k8s.io
 158 │   resources:
 159 │   - mutatingwebhookconfigurations
 160 │   - validatingwebhookconfigurations
 161 │   verbs:
 162 │   - get
 163 │   - list
 164 └   - create
 ...   
────────────────────────────────────────



longhorn10_28.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn10_28.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.5.1
────────────────────────────────────────



longhorn10_36.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-manager' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'longhorn-manager' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 longhorn10_36.yaml:12-103
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       app: longhorn-manager
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/name: longhorn
  19 │         app.kubernetes.io/instance: longhorn
  20 └         app.kubernetes.io/version: v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-manager" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset longhorn-manager in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn10_36.yaml:23-100
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 └         - -d
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-manager in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn10_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────



longhorn10_37.yaml (kubernetes)
===============================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-driver-deployer' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-manager' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-driver-deployer" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-manager" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 longhorn10_37.yaml:72
────────────────────────────────────────
  72 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-driver-deployer in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn10_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-manager in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn10_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────



longhorn10_38.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-ui' of 'deployment' 'longhorn-ui' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-ui" of deployment "longhorn-ui" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-ui in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-ui in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn10_38.yaml:24-63
────────────────────────────────────────
  24 ┌       affinity:
  25 │         podAntiAffinity:
  26 │           preferredDuringSchedulingIgnoredDuringExecution:
  27 │           - weight: 1
  28 │             podAffinityTerm:
  29 │               labelSelector:
  30 │                 matchExpressions:
  31 │                 - key: app
  32 └                   operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-ui in deployment longhorn-ui (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn10_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────



longhorn18_29.yaml (kubernetes)
===============================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn18_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn18_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn18_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn18_29.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn18_29.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn18_29.yaml:169-177
────────────────────────────────────────
 169 ┌ - apiGroups:
 170 │   - rbac.authorization.k8s.io
 171 │   resources:
 172 │   - roles
 173 │   - rolebindings
 174 │   - clusterrolebindings
 175 │   - clusterroles
 176 │   verbs:
 177 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn18_29.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn18_29.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn18_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn18_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn18_29.yaml:169-177
────────────────────────────────────────
 169 ┌ - apiGroups:
 170 │   - rbac.authorization.k8s.io
 171 │   resources:
 172 │   - roles
 173 │   - rolebindings
 174 │   - clusterrolebindings
 175 │   - clusterroles
 176 │   verbs:
 177 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn18_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn18_29.yaml:158-168
────────────────────────────────────────
 158 ┌ - apiGroups:
 159 │   - admissionregistration.k8s.io
 160 │   resources:
 161 │   - mutatingwebhookconfigurations
 162 │   - validatingwebhookconfigurations
 163 │   verbs:
 164 │   - get
 165 │   - list
 166 └   - create
 ...   
────────────────────────────────────────



longhorn18_31.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn18_31.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.6.0
────────────────────────────────────────



longhorn18_39.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-manager' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'longhorn-manager' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 longhorn18_39.yaml:12-103
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       app: longhorn-manager
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/name: longhorn
  19 │         app.kubernetes.io/instance: longhorn
  20 └         app.kubernetes.io/version: v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-manager" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset longhorn-manager in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn18_39.yaml:23-100
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 └         - -d
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-manager in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn18_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────



longhorn18_40.yaml (kubernetes)
===============================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-driver-deployer' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-manager' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-driver-deployer" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-manager" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 longhorn18_40.yaml:71
────────────────────────────────────────
  71 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-driver-deployer in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn18_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-manager in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn18_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────



longhorn18_41.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-ui' of 'deployment' 'longhorn-ui' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-ui" of deployment "longhorn-ui" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-ui in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-ui in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn18_41.yaml:24-63
────────────────────────────────────────
  24 ┌       serviceAccountName: longhorn-ui-service-account
  25 │       affinity:
  26 │         podAntiAffinity:
  27 │           preferredDuringSchedulingIgnoredDuringExecution:
  28 │           - weight: 1
  29 │             podAffinityTerm:
  30 │               labelSelector:
  31 │                 matchExpressions:
  32 └                 - key: app
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-ui in deployment longhorn-ui (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn18_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────



longhorn19_26.yaml (kubernetes)
===============================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn19_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn19_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn19_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn19_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn19_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn19_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn19_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn19_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn19_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn19_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn19_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn19_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn19_26.yaml:156-166
────────────────────────────────────────
 156 ┌ - apiGroups:
 157 │   - admissionregistration.k8s.io
 158 │   resources:
 159 │   - mutatingwebhookconfigurations
 160 │   - validatingwebhookconfigurations
 161 │   verbs:
 162 │   - get
 163 │   - list
 164 └   - create
 ...   
────────────────────────────────────────



longhorn19_28.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn19_28.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.5.1
────────────────────────────────────────



longhorn19_36.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-manager' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'longhorn-manager' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 longhorn19_36.yaml:12-101
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       app: longhorn-manager
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/name: longhorn
  19 │         app.kubernetes.io/instance: longhorn
  20 └         app.kubernetes.io/version: v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-manager" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset longhorn-manager in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn19_36.yaml:23-98
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 └         - -d
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-manager in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn19_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────



longhorn19_37.yaml (kubernetes)
===============================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-driver-deployer' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-manager' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-driver-deployer" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-manager" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 longhorn19_37.yaml:70
────────────────────────────────────────
  70 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-driver-deployer in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn19_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-manager in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn19_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────



longhorn19_38.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-ui' of 'deployment' 'longhorn-ui' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-ui" of deployment "longhorn-ui" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-ui in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-ui in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn19_38.yaml:24-61
────────────────────────────────────────
  24 ┌       affinity:
  25 │         podAntiAffinity:
  26 │           preferredDuringSchedulingIgnoredDuringExecution:
  27 │           - weight: 1
  28 │             podAffinityTerm:
  29 │               labelSelector:
  30 │                 matchExpressions:
  31 │                 - key: app
  32 └                   operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-ui in deployment longhorn-ui (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn19_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────



longhorn21_29.yaml (kubernetes)
===============================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn21_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn21_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn21_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn21_29.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn21_29.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn21_29.yaml:169-177
────────────────────────────────────────
 169 ┌ - apiGroups:
 170 │   - rbac.authorization.k8s.io
 171 │   resources:
 172 │   - roles
 173 │   - rolebindings
 174 │   - clusterrolebindings
 175 │   - clusterroles
 176 │   verbs:
 177 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn21_29.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn21_29.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn21_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn21_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn21_29.yaml:169-177
────────────────────────────────────────
 169 ┌ - apiGroups:
 170 │   - rbac.authorization.k8s.io
 171 │   resources:
 172 │   - roles
 173 │   - rolebindings
 174 │   - clusterrolebindings
 175 │   - clusterroles
 176 │   verbs:
 177 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn21_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn21_29.yaml:158-168
────────────────────────────────────────
 158 ┌ - apiGroups:
 159 │   - admissionregistration.k8s.io
 160 │   resources:
 161 │   - mutatingwebhookconfigurations
 162 │   - validatingwebhookconfigurations
 163 │   verbs:
 164 │   - get
 165 │   - list
 166 └   - create
 ...   
────────────────────────────────────────



longhorn21_31.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn21_31.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.6.1
────────────────────────────────────────



longhorn21_39.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-manager' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'longhorn-manager' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 longhorn21_39.yaml:12-103
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       app: longhorn-manager
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/name: longhorn
  19 │         app.kubernetes.io/instance: longhorn
  20 └         app.kubernetes.io/version: v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-manager" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset longhorn-manager in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn21_39.yaml:23-100
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 └         - -d
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-manager in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn21_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────



longhorn21_40.yaml (kubernetes)
===============================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-driver-deployer' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-manager' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-driver-deployer" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-manager" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 longhorn21_40.yaml:71
────────────────────────────────────────
  71 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-driver-deployer in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn21_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-manager in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn21_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────



longhorn21_41.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-ui' of 'deployment' 'longhorn-ui' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-ui" of deployment "longhorn-ui" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-ui in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-ui in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn21_41.yaml:24-63
────────────────────────────────────────
  24 ┌       serviceAccountName: longhorn-ui-service-account
  25 │       affinity:
  26 │         podAntiAffinity:
  27 │           preferredDuringSchedulingIgnoredDuringExecution:
  28 │           - weight: 1
  29 │             podAffinityTerm:
  30 │               labelSelector:
  31 │                 matchExpressions:
  32 └                 - key: app
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-ui in deployment longhorn-ui (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn21_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────



longhorn23_26.yaml (kubernetes)
===============================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn23_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn23_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn23_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn23_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn23_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn23_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn23_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn23_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn23_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn23_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn23_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn23_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn23_26.yaml:156-166
────────────────────────────────────────
 156 ┌ - apiGroups:
 157 │   - admissionregistration.k8s.io
 158 │   resources:
 159 │   - mutatingwebhookconfigurations
 160 │   - validatingwebhookconfigurations
 161 │   verbs:
 162 │   - get
 163 │   - list
 164 └   - create
 ...   
────────────────────────────────────────



longhorn23_28.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn23_28.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.4.0-dev
────────────────────────────────────────



longhorn23_36.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-manager' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'longhorn-manager' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 longhorn23_36.yaml:12-101
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       app: longhorn-manager
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/name: longhorn
  19 │         app.kubernetes.io/instance: longhorn
  20 └         app.kubernetes.io/version: v1.4.0-dev
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-manager" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset longhorn-manager in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn23_36.yaml:23-98
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 └         - -d
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-manager in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn23_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────



longhorn23_37.yaml (kubernetes)
===============================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-driver-deployer' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-manager' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-driver-deployer" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-manager" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 longhorn23_37.yaml:70
────────────────────────────────────────
  70 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-driver-deployer in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn23_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:master-head
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:master-head
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-manager in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn23_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:master-head
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────



longhorn23_38.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-ui' of 'deployment' 'longhorn-ui' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-ui" of deployment "longhorn-ui" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-ui in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-ui in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn23_38.yaml:24-61
────────────────────────────────────────
  24 ┌       affinity:
  25 │         podAntiAffinity:
  26 │           preferredDuringSchedulingIgnoredDuringExecution:
  27 │           - weight: 1
  28 │             podAffinityTerm:
  29 │               labelSelector:
  30 │                 matchExpressions:
  31 │                 - key: app
  32 └                   operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-ui in deployment longhorn-ui (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn23_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:master-head
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────



longhorn25_26.yaml (kubernetes)
===============================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn25_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn25_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn25_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn25_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn25_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn25_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn25_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn25_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn25_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn25_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn25_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn25_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn25_26.yaml:156-166
────────────────────────────────────────
 156 ┌ - apiGroups:
 157 │   - admissionregistration.k8s.io
 158 │   resources:
 159 │   - mutatingwebhookconfigurations
 160 │   - validatingwebhookconfigurations
 161 │   verbs:
 162 │   - get
 163 │   - list
 164 └   - create
 ...   
────────────────────────────────────────



longhorn25_28.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn25_28.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.5.1
────────────────────────────────────────



longhorn25_36.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-manager' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'longhorn-manager' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 longhorn25_36.yaml:12-101
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       app: longhorn-manager
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/name: longhorn
  19 │         app.kubernetes.io/instance: longhorn
  20 └         app.kubernetes.io/version: v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-manager" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset longhorn-manager in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn25_36.yaml:23-98
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 └         - -d
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-manager in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn25_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────



longhorn25_37.yaml (kubernetes)
===============================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-driver-deployer' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-manager' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-driver-deployer" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-manager" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 longhorn25_37.yaml:70
────────────────────────────────────────
  70 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-driver-deployer in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn25_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-manager in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn25_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────



longhorn25_38.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-ui' of 'deployment' 'longhorn-ui' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-ui" of deployment "longhorn-ui" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-ui in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-ui in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn25_38.yaml:24-61
────────────────────────────────────────
  24 ┌       affinity:
  25 │         podAntiAffinity:
  26 │           preferredDuringSchedulingIgnoredDuringExecution:
  27 │           - weight: 1
  28 │             podAffinityTerm:
  29 │               labelSelector:
  30 │                 matchExpressions:
  31 │                 - key: app
  32 └                   operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-ui in deployment longhorn-ui (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn25_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────



longhorn3_26.yaml (kubernetes)
==============================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn3_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn3_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn3_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn3_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn3_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn3_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn3_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn3_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn3_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn3_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn3_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn3_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn3_26.yaml:156-166
────────────────────────────────────────
 156 ┌ - apiGroups:
 157 │   - admissionregistration.k8s.io
 158 │   resources:
 159 │   - mutatingwebhookconfigurations
 160 │   - validatingwebhookconfigurations
 161 │   verbs:
 162 │   - get
 163 │   - list
 164 └   - create
 ...   
────────────────────────────────────────



longhorn3_28.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn3_28.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.5.1
────────────────────────────────────────



longhorn3_36.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-manager' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'longhorn-manager' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 longhorn3_36.yaml:12-103
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       app: longhorn-manager
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/name: longhorn
  19 │         app.kubernetes.io/instance: longhorn
  20 └         app.kubernetes.io/version: v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-manager" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset longhorn-manager in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn3_36.yaml:23-100
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 └         - -d
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-manager in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn3_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────



longhorn3_37.yaml (kubernetes)
==============================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-driver-deployer' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-manager' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-driver-deployer" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-manager" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 longhorn3_37.yaml:72
────────────────────────────────────────
  72 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-driver-deployer in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn3_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-manager in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn3_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────



longhorn3_38.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-ui' of 'deployment' 'longhorn-ui' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-ui" of deployment "longhorn-ui" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-ui in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-ui in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn3_38.yaml:24-63
────────────────────────────────────────
  24 ┌       affinity:
  25 │         podAntiAffinity:
  26 │           preferredDuringSchedulingIgnoredDuringExecution:
  27 │           - weight: 1
  28 │             podAffinityTerm:
  29 │               labelSelector:
  30 │                 matchExpressions:
  31 │                 - key: app
  32 └                   operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-ui in deployment longhorn-ui (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn3_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────



longhorn40_26.yaml (kubernetes)
===============================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn40_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn40_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn40_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn40_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn40_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn40_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn40_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn40_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn40_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn40_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn40_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn40_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn40_26.yaml:156-166
────────────────────────────────────────
 156 ┌ - apiGroups:
 157 │   - admissionregistration.k8s.io
 158 │   resources:
 159 │   - mutatingwebhookconfigurations
 160 │   - validatingwebhookconfigurations
 161 │   verbs:
 162 │   - get
 163 │   - list
 164 └   - create
 ...   
────────────────────────────────────────



longhorn40_28.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn40_28.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.5.1
────────────────────────────────────────



longhorn40_36.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-manager' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'longhorn-manager' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 longhorn40_36.yaml:12-101
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       app: longhorn-manager
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/name: longhorn
  19 │         app.kubernetes.io/instance: longhorn
  20 └         app.kubernetes.io/version: v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-manager" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset longhorn-manager in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn40_36.yaml:23-98
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 └         - -d
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-manager in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn40_36.yaml:24-83
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────



longhorn40_37.yaml (kubernetes)
===============================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-driver-deployer' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-manager' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-driver-deployer" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-manager" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 longhorn40_37.yaml:70
────────────────────────────────────────
  70 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-driver-deployer in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn40_37.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.5.1
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-manager in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn40_37.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.5.1
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────



longhorn40_38.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-ui' of 'deployment' 'longhorn-ui' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-ui" of deployment "longhorn-ui" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-ui in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-ui in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn40_38.yaml:24-61
────────────────────────────────────────
  24 ┌       affinity:
  25 │         podAntiAffinity:
  26 │           preferredDuringSchedulingIgnoredDuringExecution:
  27 │           - weight: 1
  28 │             podAffinityTerm:
  29 │               labelSelector:
  30 │                 matchExpressions:
  31 │                 - key: app
  32 └                   operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-ui in deployment longhorn-ui (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn40_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.5.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────



longhorn45_29.yaml (kubernetes)
===============================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn45_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn45_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn45_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn45_29.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn45_29.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn45_29.yaml:169-177
────────────────────────────────────────
 169 ┌ - apiGroups:
 170 │   - rbac.authorization.k8s.io
 171 │   resources:
 172 │   - roles
 173 │   - rolebindings
 174 │   - clusterrolebindings
 175 │   - clusterroles
 176 │   verbs:
 177 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn45_29.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn45_29.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn45_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn45_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn45_29.yaml:169-177
────────────────────────────────────────
 169 ┌ - apiGroups:
 170 │   - rbac.authorization.k8s.io
 171 │   resources:
 172 │   - roles
 173 │   - rolebindings
 174 │   - clusterrolebindings
 175 │   - clusterroles
 176 │   verbs:
 177 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn45_29.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn45_29.yaml:158-168
────────────────────────────────────────
 158 ┌ - apiGroups:
 159 │   - admissionregistration.k8s.io
 160 │   resources:
 161 │   - mutatingwebhookconfigurations
 162 │   - validatingwebhookconfigurations
 163 │   verbs:
 164 │   - get
 165 │   - list
 166 └   - create
 ...   
────────────────────────────────────────



longhorn45_31.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn45_31.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.6.0
────────────────────────────────────────



longhorn45_39.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-manager' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'longhorn-manager' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 longhorn45_39.yaml:12-103
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       app: longhorn-manager
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/name: longhorn
  19 │         app.kubernetes.io/instance: longhorn
  20 └         app.kubernetes.io/version: v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-manager" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset longhorn-manager in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn45_39.yaml:23-100
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 └         - -d
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-manager in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn45_39.yaml:24-84
────────────────────────────────────────
  24 ┌       - name: longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         imagePullPolicy: IfNotPresent
  27 │         securityContext:
  28 │           privileged: true
  29 │         command:
  30 │         - longhorn-manager
  31 │         - -d
  32 └         - daemon
  ..   
────────────────────────────────────────



longhorn45_40.yaml (kubernetes)
===============================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-driver-deployer' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-manager' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-driver-deployer" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-manager" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 longhorn45_40.yaml:71
────────────────────────────────────────
  71 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-driver-deployer in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn45_40.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.6.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.6.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-manager in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn45_40.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.6.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────



longhorn45_41.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-ui' of 'deployment' 'longhorn-ui' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-ui" of deployment "longhorn-ui" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-ui in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-ui in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn45_41.yaml:24-63
────────────────────────────────────────
  24 ┌       serviceAccountName: longhorn-ui-service-account
  25 │       affinity:
  26 │         podAntiAffinity:
  27 │           preferredDuringSchedulingIgnoredDuringExecution:
  28 │           - weight: 1
  29 │             podAffinityTerm:
  30 │               labelSelector:
  31 │                 matchExpressions:
  32 └                 - key: app
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-ui in deployment longhorn-ui (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn45_41.yaml:38-55
────────────────────────────────────────
  38 ┌       - name: longhorn-ui
  39 │         image: longhornio/longhorn-ui:v1.6.0
  40 │         imagePullPolicy: IfNotPresent
  41 │         volumeMounts:
  42 │         - name: nginx-cache
  43 │           mountPath: /var/cache/nginx/
  44 │         - name: nginx-config
  45 │           mountPath: /var/config/nginx/
  46 └         - name: var-run
  ..   
────────────────────────────────────────



longhorn49_25.yaml (kubernetes)
===============================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn49_25.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn49_25.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn49_25.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn49_25.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn49_25.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn49_25.yaml:165-173
────────────────────────────────────────
 165 ┌ - apiGroups:
 166 │   - rbac.authorization.k8s.io
 167 │   resources:
 168 │   - roles
 169 │   - rolebindings
 170 │   - clusterrolebindings
 171 │   - clusterroles
 172 │   verbs:
 173 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn49_25.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn49_25.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn49_25.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn49_25.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn49_25.yaml:165-173
────────────────────────────────────────
 165 ┌ - apiGroups:
 166 │   - rbac.authorization.k8s.io
 167 │   resources:
 168 │   - roles
 169 │   - rolebindings
 170 │   - clusterrolebindings
 171 │   - clusterroles
 172 │   verbs:
 173 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn49_25.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn49_25.yaml:154-164
────────────────────────────────────────
 154 ┌ - apiGroups:
 155 │   - admissionregistration.k8s.io
 156 │   resources:
 157 │   - mutatingwebhookconfigurations
 158 │   - validatingwebhookconfigurations
 159 │   verbs:
 160 │   - get
 161 │   - list
 162 └   - create
 ...   
────────────────────────────────────────



longhorn49_27.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn49_27.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.4.0
────────────────────────────────────────



longhorn49_35.yaml (kubernetes)
===============================
Tests: 130 (SUCCESSES: 96, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 20, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-admission-webhook' of DaemonSet 'longhorn-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-admission-webhook' of DaemonSet 'longhorn-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-manager' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-admission-webhook' of 'daemonset' 'longhorn-manager' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-admission-webhook' of DaemonSet 'longhorn-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-admission-webhook' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-admission-webhook' of DaemonSet 'longhorn-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-admission-webhook' of DaemonSet 'longhorn-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-admission-webhook' of DaemonSet 'longhorn-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-admission-webhook' of DaemonSet 'longhorn-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-admission-webhook' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-manager' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-admission-webhook' of DaemonSet 'longhorn-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'longhorn-manager' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 longhorn49_35.yaml:12-101
────────────────────────────────────────
  12 ┌   selector:
  13 │     matchLabels:
  14 │       app: longhorn-manager
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app.kubernetes.io/name: longhorn
  19 │         app.kubernetes.io/instance: longhorn
  20 └         app.kubernetes.io/version: v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-manager" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-admission-webhook" of daemonset "longhorn-manager" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-manager in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset longhorn-manager in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn49_35.yaml:23-98
────────────────────────────────────────
  23 ┌       initContainers:
  24 │       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
  30 │           != "200" ]; do echo waiting; sleep 2; done
  31 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-manager in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn49_35.yaml:32-83
────────────────────────────────────────
  32 ┌       - name: longhorn-manager
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         securityContext:
  36 │           privileged: true
  37 │         command:
  38 │         - longhorn-manager
  39 │         - -d
  40 └         - daemon
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-admission-webhook in daemonset longhorn-manager (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn49_35.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-admission-webhook
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-admission-webhook:9443/v1/healthz)
────────────────────────────────────────



longhorn49_36.yaml (kubernetes)
===============================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 22, MEDIUM: 8, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-driver-deployer' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-manager' of 'deployment' 'longhorn-driver-deployer' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-driver-deployer' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-manager' of Deployment 'longhorn-driver-deployer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-driver-deployer" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-manager" of deployment "longhorn-driver-deployer" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 longhorn49_36.yaml:70
────────────────────────────────────────
  70 [         runAsUser: 0
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-driver-deployer in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn49_36.yaml:32-67
────────────────────────────────────────
  32 ┌       - name: longhorn-driver-deployer
  33 │         image: longhornio/longhorn-manager:v1.4.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         command:
  36 │         - longhorn-manager
  37 │         - -d
  38 │         - deploy-driver
  39 │         - --manager-image
  40 └         - longhornio/longhorn-manager:v1.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-manager in deployment longhorn-driver-deployer (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn49_36.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: wait-longhorn-manager
  25 │         image: longhornio/longhorn-manager:v1.4.0
  26 │         command:
  27 │         - sh
  28 │         - -c
  29 └         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1)
────────────────────────────────────────



longhorn49_37.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 98, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-recovery-backend' of Deployment 'longhorn-recovery-backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-recovery-backend' of Deployment 'longhorn-recovery-backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-recovery-backend' of 'deployment' 'longhorn-recovery-backend' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-recovery-backend' of Deployment 'longhorn-recovery-backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-recovery-backend' of Deployment 'longhorn-recovery-backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-recovery-backend' of Deployment 'longhorn-recovery-backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-recovery-backend' of Deployment 'longhorn-recovery-backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-recovery-backend' of Deployment 'longhorn-recovery-backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-recovery-backend' of Deployment 'longhorn-recovery-backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-recovery-backend' of Deployment 'longhorn-recovery-backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-recovery-backend' of Deployment 'longhorn-recovery-backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-recovery-backend" of deployment "longhorn-recovery-backend" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-recovery-backend in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn49_37.yaml:24-64
────────────────────────────────────────
  24 ┌       affinity:
  25 │         podAntiAffinity:
  26 │           preferredDuringSchedulingIgnoredDuringExecution:
  27 │           - weight: 1
  28 │             podAffinityTerm:
  29 │               labelSelector:
  30 │                 matchExpressions:
  31 │                 - key: app
  32 └                   operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-recovery-backend in deployment longhorn-recovery-backend (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn49_37.yaml:37-63
────────────────────────────────────────
  37 ┌       - name: longhorn-recovery-backend
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - recovery-backend
  45 └         - --service-account
  ..   
────────────────────────────────────────



longhorn49_38.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-ui' of 'deployment' 'longhorn-ui' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-ui' of Deployment 'longhorn-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-ui" of deployment "longhorn-ui" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container longhorn-ui in longhorn-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-ui in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn49_38.yaml:24-61
────────────────────────────────────────
  24 ┌       affinity:
  25 │         podAntiAffinity:
  26 │           preferredDuringSchedulingIgnoredDuringExecution:
  27 │           - weight: 1
  28 │             podAffinityTerm:
  29 │               labelSelector:
  30 │                 matchExpressions:
  31 │                 - key: app
  32 └                   operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-ui in deployment longhorn-ui (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn49_38.yaml:37-54
────────────────────────────────────────
  37 ┌       - name: longhorn-ui
  38 │         image: longhornio/longhorn-ui:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         volumeMounts:
  41 │         - name: nginx-cache
  42 │           mountPath: /var/cache/nginx/
  43 │         - name: nginx-config
  44 │           mountPath: /var/config/nginx/
  45 └         - name: var-run
  ..   
────────────────────────────────────────



longhorn49_39.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 98, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-conversion-webhook' of Deployment 'longhorn-conversion-webhook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-conversion-webhook' of Deployment 'longhorn-conversion-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-conversion-webhook' of 'deployment' 'longhorn-conversion-webhook' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-conversion-webhook' of Deployment 'longhorn-conversion-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-conversion-webhook' of Deployment 'longhorn-conversion-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-conversion-webhook' of Deployment 'longhorn-conversion-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-conversion-webhook' of Deployment 'longhorn-conversion-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-conversion-webhook' of Deployment 'longhorn-conversion-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-conversion-webhook' of Deployment 'longhorn-conversion-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-conversion-webhook' of Deployment 'longhorn-conversion-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-conversion-webhook' of Deployment 'longhorn-conversion-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-conversion-webhook" of deployment "longhorn-conversion-webhook" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-conversion-webhook in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn49_39.yaml:24-58
────────────────────────────────────────
  24 ┌       affinity:
  25 │         podAntiAffinity:
  26 │           preferredDuringSchedulingIgnoredDuringExecution:
  27 │           - weight: 1
  28 │             podAffinityTerm:
  29 │               labelSelector:
  30 │                 matchExpressions:
  31 │                 - key: app
  32 └                   operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-conversion-webhook in deployment longhorn-conversion-webhook (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn49_39.yaml:37-57
────────────────────────────────────────
  37 ┌       - name: longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         securityContext:
  41 │           runAsUser: 2000
  42 │         command:
  43 │         - longhorn-manager
  44 │         - conversion-webhook
  45 └         - --service-account
  ..   
────────────────────────────────────────



longhorn49_40.yaml (kubernetes)
===============================
Tests: 129 (SUCCESSES: 98, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'longhorn-admission-webhook' of Deployment 'longhorn-admission-webhook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-longhorn-conversion-webhook' of Deployment 'longhorn-admission-webhook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'longhorn-admission-webhook' of Deployment 'longhorn-admission-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-longhorn-conversion-webhook' of Deployment 'longhorn-admission-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'longhorn-admission-webhook' of 'deployment' 'longhorn-admission-webhook' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-longhorn-conversion-webhook' of 'deployment' 'longhorn-admission-webhook' in 'longhorn-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'longhorn-admission-webhook' of Deployment 'longhorn-admission-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-longhorn-conversion-webhook' of Deployment 'longhorn-admission-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'longhorn-admission-webhook' of Deployment 'longhorn-admission-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-longhorn-conversion-webhook' of Deployment 'longhorn-admission-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'longhorn-admission-webhook' of Deployment 'longhorn-admission-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-longhorn-conversion-webhook' of Deployment 'longhorn-admission-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'longhorn-admission-webhook' of Deployment 'longhorn-admission-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-longhorn-conversion-webhook' of Deployment 'longhorn-admission-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'longhorn-admission-webhook' of Deployment 'longhorn-admission-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-longhorn-conversion-webhook' of Deployment 'longhorn-admission-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'longhorn-admission-webhook' of Deployment 'longhorn-admission-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-longhorn-conversion-webhook' of Deployment 'longhorn-admission-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'longhorn-admission-webhook' of Deployment 'longhorn-admission-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-longhorn-conversion-webhook' of Deployment 'longhorn-admission-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'longhorn-admission-webhook' of Deployment 'longhorn-admission-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-longhorn-conversion-webhook' of Deployment 'longhorn-admission-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "longhorn-admission-webhook" of deployment "longhorn-admission-webhook" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-longhorn-conversion-webhook" of deployment "longhorn-admission-webhook" in "longhorn-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment longhorn-admission-webhook in longhorn-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 longhorn49_40.yaml:24-73
────────────────────────────────────────
  24 ┌       affinity:
  25 │         podAntiAffinity:
  26 │           preferredDuringSchedulingIgnoredDuringExecution:
  27 │           - weight: 1
  28 │             podAffinityTerm:
  29 │               labelSelector:
  30 │                 matchExpressions:
  31 │                 - key: app
  32 └                   operator: In
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container longhorn-admission-webhook in deployment longhorn-admission-webhook (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn49_40.yaml:48-72
────────────────────────────────────────
  48 ┌       - name: longhorn-admission-webhook
  49 │         image: longhornio/longhorn-manager:v1.4.0
  50 │         imagePullPolicy: IfNotPresent
  51 │         securityContext:
  52 │           runAsUser: 2000
  53 │         command:
  54 │         - longhorn-manager
  55 │         - admission-webhook
  56 └         - --service-account
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-longhorn-conversion-webhook in deployment longhorn-admission-webhook (namespace: longhorn-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 longhorn49_40.yaml:37-46
────────────────────────────────────────
  37 ┌       - name: wait-longhorn-conversion-webhook
  38 │         image: longhornio/longhorn-manager:v1.4.0
  39 │         command:
  40 │         - sh
  41 │         - -c
  42 │         - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" -k https://longhorn-conversion-webhook:9443/v1/healthz)
  43 │           != "200" ]; do echo waiting; sleep 2; done
  44 │         imagePullPolicy: IfNotPresent
  45 │         securityContext:
  46 └           runAsUser: 2000
────────────────────────────────────────



longhorn51_26.yaml (kubernetes)
===============================
Tests: 119 (SUCCESSES: 106, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 1, CRITICAL: 7)

AVD-KSV-0041 (CRITICAL): ClusterRole 'longhorn-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 longhorn51_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 longhorn51_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn51_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn51_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn51_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 longhorn51_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn51_26.yaml:49-55
────────────────────────────────────────
  49 ┌ - apiGroups:
  50 │   - batch
  51 │   resources:
  52 │   - jobs
  53 │   - cronjobs
  54 │   verbs:
  55 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn51_26.yaml:41-48
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - apps
  43 │   resources:
  44 │   - daemonsets
  45 │   - statefulsets
  46 │   - deployments
  47 │   verbs:
  48 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 longhorn51_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'longhorn-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 longhorn51_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 longhorn51_26.yaml:167-175
────────────────────────────────────────
 167 ┌ - apiGroups:
 168 │   - rbac.authorization.k8s.io
 169 │   resources:
 170 │   - roles
 171 │   - rolebindings
 172 │   - clusterrolebindings
 173 │   - clusterroles
 174 │   verbs:
 175 └   - '*'
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'longhorn-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 longhorn51_26.yaml:16-33
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - ''
  18 │   resources:
  19 │   - pods
  20 │   - events
  21 │   - persistentvolumes
  22 │   - persistentvolumeclaims
  23 │   - persistentvolumeclaims/status
  24 └   - nodes
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'longhorn-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 longhorn51_26.yaml:156-166
────────────────────────────────────────
 156 ┌ - apiGroups:
 157 │   - admissionregistration.k8s.io
 158 │   resources:
 159 │   - mutatingwebhookconfigurations
 160 │   - validatingwebhookconfigurations
 161 │   verbs:
 162 │   - get
 163 │   - list
 164 └   - create
 ...   
────────────────────────────────────────



longhorn51_28.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'longhorn-support-bundle' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 longhorn51_28.yaml:4-8
────────────────────────────────────────
   4 ┌   name: longhorn-support-bundle
   5 │   labels:
   6 │     app.kubernetes.io/name: longhorn
   7 │     app.kubernetes.io/instance: longhorn
   8 └     app.kubernetes.io/version: v1.5.3
────────────────────────────────────────


